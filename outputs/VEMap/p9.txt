EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Project/current use/NRAandLoops
starttime, test: 1679722061200
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: org.springframework.data.domain.Page is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.util.Optional is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.JoinTable is a phantom class!
Warning: org.hibernate.validator.constraints.Email is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: org.hibernate.validator.constraints.NotEmpty is a phantom class!
Warning: com.fasterxml.jackson.annotation.JsonIgnore is a phantom class!
Warning: javax.persistence.ManyToMany is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: org.hibernate.validator.constraints.Length is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: org.hibernate.annotations.CreationTimestamp is a phantom class!
Warning: java.util.Date is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: javax.validation.constraints.NotNull is a phantom class!
Warning: javax.persistence.Temporal is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:25
| | Id:26
| Union
| | Project
| | | Select
| | | | Id:26
| | | | Id:18
| | | Id:21
| | Project
| | | Select
| | | | Id:26
| | | | Eq
| | | | | Id:18
| | | | | Zero
| | | Id:24

{<col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=18, <list1>=21, <init_val>=25, <itr>=27, <coll>=26}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:36
| | | Id:31
| | Id:33
| Id:35

{<list>=33, <elseval>=34, <col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=31, <list1>=21, <init_val>=35, <itr>=37, <coll>=36}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:41
| | Select
| | | Id:41
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:49
| | | | | | Id:45
| | | | | Id
| Project
| | Id:47
| | Join
| | | Id:49
| | | Id:45

{<list>=47, <repo>=41, <cond>=31, <nop>=46, <init_val>=48, <join_right>=45, <itr>=50, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=49}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:61
| | Select
| | | Id:57
| | | In
| | | | Id:59
| | | | Id:63
| Id:62

{<list>=61, <rel>=57, <repo>=41, <cond>=31, <nop>=46, <clm>=59, <init_val>=62, <join_right>=45, <itr>=64, <receiver>=54, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=63}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:71
| | | In
| | | | Id:73
| | | | Id:77
| | Id:75
| Id:76

{<list>=61, <rel>=71, <repo>=41, <cond>=31, <nop>=46, <clm>=73, <init_val>=76, <join_right>=45, <itr>=78, <clmagg>=75, <receiver>=54, <aggvar>=68, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=77}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: blogForUsername
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = this.<com.reljicd.controller.BlogController: com.reljicd.service.UserService userService>;

        optionalUser = interfaceinvoke $r0.<com.reljicd.service.UserService: java.util.Optional findByUsername(java.lang.String)>(username);

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = this.<com.reljicd.controller.BlogController: com.reljicd.service.PostService postService>;

        posts = interfaceinvoke $r2.<com.reljicd.service.PostService: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.BlogController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
Warning: org.springframework.boot.autoconfigure.web.ErrorController is a phantom class!
Warning: org.springframework.web.servlet.ModelAndView is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: org.springframework.web.bind.annotation.RestController is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: java.security.Principal is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
Warning: org.springframework.boot.SpringApplication is a phantom class!
Warning: org.springframework.boot.autoconfigure.SpringBootApplication is a phantom class!
Warning: org.springframework.context.ConfigurableApplicationContext is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
Warning: org.springframework.security.web.access.AccessDeniedHandler is a phantom class!
Warning: org.slf4j.Logger is a phantom class!
Warning: javax.servlet.http.HttpServletResponse is a phantom class!
Warning: org.slf4j.LoggerFactory is a phantom class!
Warning: java.io.IOException is a phantom class!
Warning: org.springframework.security.access.AccessDeniedException is a phantom class!
Warning: org.springframework.stereotype.Component is a phantom class!
Warning: javax.servlet.http.HttpServletRequest is a phantom class!
Warning: org.springframework.security.core.context.SecurityContext is a phantom class!
Warning: org.springframework.security.core.context.SecurityContextHolder is a phantom class!
Warning: org.springframework.security.core.Authentication is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
Warning: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter is a phantom class!
Warning: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.builders.HttpSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer is a phantom class!
Warning: org.springframework.beans.factory.annotation.Value is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer is a phantom class!
Warning: javax.sql.DataSource is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.LogoutConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer$UserDetailsBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: org.springframework.context.annotation.Configuration is a phantom class!
Warning: org.springframework.security.config.annotation.SecurityBuilder is a phantom class!
Warning: org.springframework.security.crypto.password.PasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.web.HttpSecurityBuilder is a phantom class!
Warning: org.springframework.context.annotation.Bean is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
Warning: org.springframework.web.bind.annotation.ControllerAdvice is a phantom class!
Warning: org.springframework.web.bind.annotation.ExceptionHandler is a phantom class!
Warning: org.springframework.web.bind.annotation.ResponseStatus is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
Warning: org.springframework.data.jpa.repository.JpaRepository is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
Warning: org.springframework.data.domain.Pageable is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
Warning: org.springframework.data.domain.PageRequest is a phantom class!
Warning: org.springframework.stereotype.Service is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
Warning: java.lang.CharSequence is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.util.Collections is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.BlogController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.UserServiceImp, $r2=com.reljicd.service.impl.PostServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = username := @parameter0: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = page := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalUser = interfaceinvoke $r0.<com.reljicd.service.UserService: java.util.Optional findByUsername(java.lang.String)>(username)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.BlogController: com.reljicd.service.UserService userService>, <com.reljicd.controller.BlogController: com.reljicd.service.PostService postService>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = (com.reljicd.model.User) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = posts = interfaceinvoke $r2.<com.reljicd.service.PostService: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = pager = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/posts"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        posts = interfaceinvoke $r2.<com.reljicd.service.PostService: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = username := @parameter0: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = page := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = (com.reljicd.model.User) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = posts = interfaceinvoke $r2.<com.reljicd.service.PostService: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.BlogController: com.reljicd.service.PostService postService>, <com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = pager = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/posts"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }

FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: username
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: username
FuncStackInfoBuilder.java: regionTreeForBody(): local: page
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: page
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: optionalUser
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: optionalUser
FuncStackInfoBuilder.java: regionTreeForBody(): local: user
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: user
FuncStackInfoBuilder.java: regionTreeForBody(): local: posts
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: posts
FuncStackInfoBuilder.java: regionTreeForBody(): local: pager
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pager
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: blogForUsername is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: com.reljicd.controller.BlogController;
username := @parameter0: java.lang.String;
page := @parameter1: int;
model := @parameter2: org.springframework.ui.Model;
$r0 = new com.reljicd.service.impl.UserServiceImp;
optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);
this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;
$z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();
if $z0 == 0 goto return "/error";

Block 1:
[preds: 0 ] [succs: ]
$r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();
user = (com.reljicd.model.User) $r1;
$r2 = new com.reljicd.service.impl.PostServiceImp;
posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);
this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;
$r3 = new com.reljicd.util.Pager;
specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);
pager = $r3;
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);
return "/posts";

Block 2:
[preds: 0 ] [succs: ]
return "/error";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [1, 2, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [0, 1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [1, 2, 0]
removeVertices: vset = [0, 1, 2]
removeVertices: v = 0
removeVertex: adj = {1=[], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[], 2=[]}
removeVertex: incoming = {1=[], 2=[]}
removeVertex: v = 1
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_IfThenElse0
|  +- 0
|  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: com.reljicd.controller.BlogController;
username := @parameter0: java.lang.String;
page := @parameter1: int;
model := @parameter2: org.springframework.ui.Model;
$r0 = new com.reljicd.service.impl.UserServiceImp;
optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);
this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;
$z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();
if $z0 == 0 goto return "/error";

Block 1:
[preds: 0 ] [succs: ]
$r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();
user = (com.reljicd.model.User) $r1;
$r2 = new com.reljicd.service.impl.PostServiceImp;
posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);
this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;
$r3 = new com.reljicd.util.Pager;
specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);
pager = $r3;
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);
return "/posts";

Block 2:
[preds: 0 ] [succs: ]
return "/error";


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock1, | BasicBlock2]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_IfThenElse0
FuncStackInfoBuilder.java: regionTreeForBody(): | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
VIRTUAL edge: optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username) in <com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)> ==> <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
VIRTUAL edge: posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page) in <com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)> ==> <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
SPECIAL edge: specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts) in <com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)> ==> <com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>
SPECIAL edge: $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page) in <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)> ==> <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
SPECIAL edge: specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5) in <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)> ==> <org.springframework.data.domain.PageRequest: void <init>(int,int)>
SPECIAL edge: specialinvoke this.<java.lang.Object: void <init>()>() in <com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)> ==> <java.lang.Object: void <init>()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findByUsername
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Optional findByUsername(java.lang.String)
    {
        com.reljicd.service.impl.UserServiceImp this;
        java.lang.String username;
        com.reljicd.repository.UserRepository $r0;
        java.util.Optional $r1;

        this := @this: com.reljicd.service.impl.UserServiceImp;

        username := @parameter0: java.lang.String;

        $r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>;

        $r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username);

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: username
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: username
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findByUsername is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.UserServiceImp;
username := @parameter0: java.lang.String;
$r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>;
$r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username);
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.UserServiceImp;
username := @parameter0: java.lang.String;
$r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>;
$r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username);
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.UserServiceImp, username := @parameter0: java.lang.String, $r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>, $r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username), return $r1]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.data.domain.Page)
    {
        com.reljicd.util.Pager this;
        org.springframework.data.domain.Page posts;

        this := @this: com.reljicd.util.Pager;

        posts := @parameter0: org.springframework.data.domain.Page;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: posts
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: posts
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: <init> is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.util.Pager;
posts := @parameter0: org.springframework.data.domain.Page;
specialinvoke this.<java.lang.Object: void <init>()>();
this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.util.Pager;
posts := @parameter0: org.springframework.data.domain.Page;
specialinvoke this.<java.lang.Object: void <init>()>();
this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.util.Pager, posts := @parameter0: org.springframework.data.domain.Page, specialinvoke this.<java.lang.Object: void <init>()>(), this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findByUserOrderedByDatePageable
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User, int)
    {
        com.reljicd.service.impl.PostServiceImp this;
        com.reljicd.model.User user;
        int page, $i0;
        org.springframework.data.domain.PageRequest $r0;
        com.reljicd.repository.PostRepository $r1;
        org.springframework.data.domain.Page $r2;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        user := @parameter0: com.reljicd.model.User;

        page := @parameter1: int;

        $r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;

        $r0 = new org.springframework.data.domain.PageRequest;

        $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page);

        specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5);

        $r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0);

        return $r2;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: user
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: user
FuncStackInfoBuilder.java: regionTreeForBody(): local: page
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: page
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findByUserOrderedByDatePageable is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.PostServiceImp;
user := @parameter0: com.reljicd.model.User;
page := @parameter1: int;
$r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;
$r0 = new org.springframework.data.domain.PageRequest;
$i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page);
specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5);
$r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0);
return $r2;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.PostServiceImp;
user := @parameter0: com.reljicd.model.User;
page := @parameter1: int;
$r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;
$r0 = new org.springframework.data.domain.PageRequest;
$i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page);
specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5);
$r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0);
return $r2;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, user := @parameter0: com.reljicd.model.User, page := @parameter1: int, $r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>, $r0 = new org.springframework.data.domain.PageRequest, $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page), specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5), $r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0), return $r2]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.lang.Object: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: subtractPageByOne
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    private int subtractPageByOne(int)
    {
        com.reljicd.service.impl.PostServiceImp this;
        int page, $i0;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        page := @parameter0: int;

        if page >= 1 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = page - 1;

     label2:
        return $i0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: page
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: page
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: subtractPageByOne is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: com.reljicd.service.impl.PostServiceImp;
page := @parameter0: int;
if page >= 1 goto $i0 = page - 1;

Block 1:
[preds: 0 ] [succs: 3 ]
$i0 = 0;
goto [?= return $i0];

Block 2:
[preds: 0 ] [succs: 3 ]
$i0 = page - 1;

Block 3:
[preds: 1 2 ] [succs: ]
return $i0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
2 -> 3
0 -> 2
1 -> 3
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 3
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [3, 1, 2, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [0, 1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 3
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, 1, 2, 0]
removeVertices: vset = [0, 1, 2]
removeVertices: v = 0
removeVertex: adj = {1=[3], 2=[3], 3=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0], 3=[1, 2], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[3], 2=[3], 3=[]}
removeVertex: incoming = {1=[], 2=[], 3=[1, 2]}
removeVertex: v = 1
removeVertices: v = 2
removeVertex: adj = {2=[3], 3=[]}
removeVertex: incoming = {2=[], 3=[2]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [3, R_IfThenElse0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse0, 3]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [R_IfThenElse0, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, R_IfThenElse0]
removeVertices: vset = [R_IfThenElse0, 3]
removeVertices: v = R_IfThenElse0
removeVertex: adj = {3=[], R_IfThenElse0=[3]}
removeVertex: incoming = {3=[R_IfThenElse0], R_IfThenElse0=[]}
removeVertex: v = R_IfThenElse0
removeVertices: v = 3
removeVertex: adj = {3=[]}
removeVertex: incoming = {3=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThenElse0
|  |  +- 0
|  |  +- 1
|  |  +- 2
|  +- 3

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: com.reljicd.service.impl.PostServiceImp;
page := @parameter0: int;
if page >= 1 goto $i0 = page - 1;

Block 1:
[preds: 0 ] [succs: 3 ]
$i0 = 0;
goto [?= return $i0];

Block 2:
[preds: 0 ] [succs: 3 ]
$i0 = page - 1;

Block 3:
[preds: 1 2 ] [succs: ]
return $i0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock1, | BasicBlock2]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThenElse
| | | BasicBlock0
| | | BasicBlock1
| | | BasicBlock2
| | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.data.domain.PageRequest: void <init>(int,int)
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper(): {com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)=    public void <init>(org.springframework.data.domain.Page)
    {
        com.reljicd.util.Pager this;
        org.springframework.data.domain.Page posts;

        this := @this: com.reljicd.util.Pager;

        posts := @parameter0: org.springframework.data.domain.Page;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts;

        return;
    }
, com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)=    public org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User, int)
    {
        com.reljicd.service.impl.PostServiceImp this;
        com.reljicd.model.User user;
        int page, $i0;
        org.springframework.data.domain.PageRequest $r0;
        com.reljicd.repository.PostRepository $r1;
        org.springframework.data.domain.Page $r2;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        user := @parameter0: com.reljicd.model.User;

        page := @parameter1: int;

        $r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;

        $r0 = new org.springframework.data.domain.PageRequest;

        $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page);

        specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5);

        $r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0);

        return $r2;
    }
, com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)=    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", pager);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }
, com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)=    private int subtractPageByOne(int)
    {
        com.reljicd.service.impl.PostServiceImp this;
        int page, $i0;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        page := @parameter0: int;

        if page >= 1 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = page - 1;

     label2:
        return $i0;
    }
, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=    public java.util.Optional findByUsername(java.lang.String)
    {
        com.reljicd.service.impl.UserServiceImp this;
        java.lang.String username;
        com.reljicd.repository.UserRepository $r0;
        java.util.Optional $r1;

        this := @this: com.reljicd.service.impl.UserServiceImp;

        username := @parameter0: java.lang.String;

        $r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>;

        $r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username);

        return $r1;
    }
}

Decompiling com.reljicd.controller.BlogController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.BlogController: void <init>(com.reljicd.service.UserService,com.reljicd.service.PostService)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(com.reljicd.service.UserService, com.reljicd.service.PostService)
    {
        com.reljicd.controller.BlogController this;
        com.reljicd.service.UserService userService;
        com.reljicd.service.PostService postService;

        this := @this: com.reljicd.controller.BlogController;

        userService := @parameter0: com.reljicd.service.UserService;

        postService := @parameter1: com.reljicd.service.PostService;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.reljicd.controller.BlogController: com.reljicd.service.UserService userService> = userService;

        this.<com.reljicd.controller.BlogController: com.reljicd.service.PostService postService> = postService;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: blogForUsername
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String blogForUsername(java.lang.String, int, org.springframework.ui.Model)
    {
        com.reljicd.controller.BlogController this;
        java.lang.String username;
        int page;
        org.springframework.ui.Model model;
        java.util.Optional optionalUser;
        com.reljicd.model.User user;
        org.springframework.data.domain.Page posts;
        com.reljicd.util.Pager pager, $r3;
        com.reljicd.service.UserService $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.reljicd.service.PostService $r2;

        this := @this: com.reljicd.controller.BlogController;

        username := @parameter0: java.lang.String;

        page := @parameter1: int;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>();

        user = (com.reljicd.model.User) $r1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page);

        this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;

        $r3 = new com.reljicd.util.Pager;

        specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts);

        pager = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user);

        return "/posts";

     label1:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String), com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)has typemap: {optionalUser=com.reljicd.model.User}
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: blogForUsername
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.controller.BlogController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = username := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = page := @parameter1: int
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter2: org.springframework.ui.Model
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new com.reljicd.service.impl.UserServiceImp
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
Utils.java: getRelExpForMethod(): actualargs = [username]
Utils.java: getRelExpForMethod(): methodInvoked = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Ljava/lang/String;)Ljava/util/Optional<Lcom/reljicd/model/User;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.service.UserService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.service.UserService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findByUsername
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.UserServiceImp, username := @parameter0: java.lang.String, $r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>, $r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.service.impl.UserServiceImp
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = username := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.reljicd.service.impl.UserServiceImp: com.reljicd.repository.UserRepository userRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.userRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
Utils.java: getRelExpForMethod(): actualargs = [username]
Utils.java: getRelExpForMethod(): methodInvoked = <com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Ljava/lang/String;)Ljava/util/Optional<Lcom/reljicd/model/User;>;, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: username


]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): Return is optional-typed for function: com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): typeTable after analyzeBCEL: {return_com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=com.reljicd.model.User, return=com.reljicd.model.User}
construct/Utils.java: parseObjectInvoke(): retTypeStr: com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): retType = com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): entityClass = com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): tableName = com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): check = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
construct/Utils.java: parseObjectInvoke(): attributes = [id, email, password, username, name, lastName, active]
construct/Utils.java: parseObjectInvoke(): retAccp: return
construct/Utils.java: parseObjectInvoke(): check 2
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.reljicd.model.User: java.util.Collection posts>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = [<com.reljicd.model.User: java.util.Collection roles>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
construct/Utils.java: parseObjectInvoke(): dir after mapDBFetchAccessGraph: {return.posts=Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp, return.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username, return.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email, return.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password, return.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName, return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id, return.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name, return.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active, return=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, return.roles=Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp}
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): leftType : java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): left type = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): v1 type is optional
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.roles ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.roles ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String name> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: int active> = int
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection roles> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
Flatten.java: getNestedFields(): check *ToMany sf: roles , type = java.util.Collection
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection posts> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: posts , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Role
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Role
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): key= return.roles
 value= Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= users
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Role.users=Pi
NRA.java: genExprNra(): nestexpr= Role.users=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.role_id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.roles
 value : 
 User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Post
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): key= return.posts
 value= Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.Comment
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= post
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: Comment.post=Pi
NRA.java: genExprNra(): nestexpr= Comment.post=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.post_id
| | | Post.id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Comment
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Comment.user=Pi
NRA.java: genExprNra(): nestexpr= Comment.user=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.posts
 value : 
 User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = return.posts
DIRRegionAnalyzer.java: constructDIR(): val = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = return.name
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = return.roles
DIRRegionAnalyzer.java: constructDIR(): val = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.name
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): key = $r1.roles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.posts
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {return=com.reljicd.model.User, return_com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=com.reljicd.model.User}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.User
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.reljicd.model.User
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.util.Optional
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.email
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.password
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.username
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.name
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.lastName
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.active
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.roles
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.posts
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: return.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: $r0=this.userRepository
DIR.java: updateRegion(): update region entry: $r1.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: $r1.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIR.java: updateRegion(): update region entry: return.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: $r1.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: $r1.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: return.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIR.java: updateRegion(): update region entry: return.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: return.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIR.java: updateRegion(): update region entry: $r1.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIR.java: updateRegion(): update region entry: return.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: optionalret=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: $r1.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: $r1.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): leftType : java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: optionalUser
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): left type = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): v1 type is optional
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [username, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: username
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.String
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: username
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.service.impl.UserServiceImp
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r1.lastName, $r0, $r1.roles, $r1, $r1.active, return.email, this, return.lastName, $r1.email, $r1.id, return.active, return.roles, $r1.password, return.username, $r1.username, return.password, optionalret, return.id, $r1.posts, return.name, return, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.roleRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r1.lastName, $r0, $r1.roles, $r1, $r1.active, return.email, this, return.lastName, $r1.email, $r1.id, return.active, return.roles, $r1.password, return.username, $r1.username, return.password, optionalret, return.id, $r1.posts, return.name, return, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.USER_ROLE
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r1.lastName, $r0, $r1.roles, $r1, $r1.active, return.email, this, return.lastName, $r1.email, $r1.id, return.active, return.roles, $r1.password, return.username, $r1.username, return.password, optionalret, return.id, $r1.posts, return.name, return, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findByUsername, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: username
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: username
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: username
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): username
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): username
DIRRegionAnalyzer.java: handleSideEffects(): formal = username, actual = username
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: username
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = optionalUser, com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [optionalUser.id, optionalUser.email, optionalUser.password, optionalUser.username, optionalUser.name, optionalUser.lastName, optionalUser.active, optionalUser.roles, optionalUser.posts]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String name> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: int active> = int
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection roles> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
Flatten.java: getNestedFields(): check *ToMany sf: roles , type = java.util.Collection
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection posts> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: posts , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Role
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Role
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.roles
 value= User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Role)
| Equals
| | Alpha.role_id
| | Role.user_id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= users
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Role.users=Pi
NRA.java: genExprNra(): nestexpr= Role.users=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.role_id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.roles
 value : 
 User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Post
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.posts
 value= User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.model.Post)
| Equals
| | Alpha.id
| | Post.user_id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Role
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.Comment
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= post
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = com.reljicd.model.Post
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: Comment.post=Pi
NRA.java: genExprNra(): nestexpr= Comment.post=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.post_id
| | | Post.id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = com.reljicd.model.Comment
NRA.java: genExprNra(): fieldclass = com.reljicd.model.User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.User~roles, com.reljicd.model.User~posts]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = com.reljicd.model.User
NRA.java: genExprNra(): fieldclass = com.reljicd.model.Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Comment.user=Pi
NRA.java: genExprNra(): nestexpr= Comment.user=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.posts
 value : 
 User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = return.posts
DIRRegionAnalyzer.java: constructDIR(): val = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.userRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1.roles
DIRRegionAnalyzer.java: constructDIR(): val = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.active
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): key = return.roles
DIRRegionAnalyzer.java: constructDIR(): val = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.posts
DIRRegionAnalyzer.java: constructDIR(): val = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.name
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.name
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [optionalUser.id, optionalUser.email, optionalUser.password, optionalUser.username, optionalUser.name, optionalUser.lastName, optionalUser.active, optionalUser.roles, optionalUser.posts]
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.name
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.roles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = optionalUser.posts
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [username, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = username
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.userRepository, this.roleRepository, this.USER_ROLE]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.userServiceImpl.userRepository, this.userServiceImpl.roleRepository, this.userServiceImpl.USER_ROLE]
DIRRegionAnalyzer.java: constructDIR(): right val = $r0
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.userRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.roleRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.USER_ROLE
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isPresent
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: boolean isPresent()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: boolean isPresent()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: boolean isPresent()>
construct/Utils.java: parseObjectInvoke(): methodName = isPresent
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: boolean isPresent()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseInvokeExpr(): methodName = isPresent
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: boolean isPresent()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: boolean isPresent()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: boolean isPresent()>
construct/Utils.java: parseObjectInvoke(): methodName = isPresent
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: boolean isPresent()
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto return "/error"
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: optionalUser.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: optionalUser.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIR.java: updateRegion(): update region entry: optionalUser.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIR.java: updateRegion(): update region entry: condition=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
DIR.java: updateRegion(): update region entry: optionalUser.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: optionalUser=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: optionalUser.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: optionalUser.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: optionalUser.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: optionalUser.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
DIR.java: updateRegion(): update region entry: optionalUser.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: blogForUsername
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = get
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: java.lang.Object get()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: java.lang.Object get()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: java.lang.Object get()>
construct/Utils.java: parseObjectInvoke(): methodName = get
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: java.lang.Object get()
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {optionalUser=com.reljicd.model.User}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): base (arg0 to Flatten.flatten): optionalUser
construct/Utils.java: parseObjectInvoke(): type (arg1 to Flatten.flatten): com.reljicd.model.User
construct/Utils.java: parseObjectInvoke(): get(): paths = [optionalUser.id, optionalUser.email, optionalUser.password, optionalUser.username, optionalUser.name, optionalUser.lastName, optionalUser.active, optionalUser.roles, optionalUser.posts]
construct/Utils.java: parseObjectInvoke(): methodDIR: ~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser


construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.id
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.id
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.email
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.email
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.password
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.password
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.username
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.username
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.name
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.name
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.lastName
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.lastName
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.active
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.active
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.roles
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.roles
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.posts
construct/Utils.java: parseObjectInvoke(): get(): val = optionalUser.posts
construct/Utils.java: parseObjectInvoke(): get done
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.Object
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {optionalUser=com.reljicd.model.User}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): leftType : com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: constructDIR(): left type = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): method sig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): get invoked
DIRRegionAnalyzer.java: constructDIR(): base = optionalUser
DIRRegionAnalyzer.java: constructDIR(): typemap = {optionalUser=com.reljicd.model.User}
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username

, com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: get
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.Optional: java.lang.Object get()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.util.Optional: java.lang.Object get(), com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String name> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: int active> = int
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection roles> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
Flatten.java: getNestedFields(): check *ToMany sf: roles , type = java.util.Collection
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection posts> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: posts , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Role
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Role
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): key= return.roles
 value= optionalUser.roles
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=com.reljicd.model.User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Post
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): key= return.posts
 value= optionalUser.posts
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): key = return.posts
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.posts
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.username
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.email
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.password
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.lastName
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.id
DIRRegionAnalyzer.java: constructDIR(): key = return.name
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.name
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.active
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser
DIRRegionAnalyzer.java: constructDIR(): key = return.roles
DIRRegionAnalyzer.java: constructDIR(): val = optionalUser.roles
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.util.Optional: java.lang.Object get() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.name
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.name
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.name
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.active
DIRRegionAnalyzer.java: constructDIR(): key = $r1.roles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.roles
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.roles
DIRRegionAnalyzer.java: constructDIR(): key = $r1.posts
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalUser.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalUser.posts
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalUser.posts
DIRRegionAnalyzer.java: constructDIR(): curUnit = user = (com.reljicd.model.User) $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.reljicd.model.User) $r1
DIRRegionAnalyzer.java: constructDIR(): v2: $r1
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r1.password=optionalUser.password, $r1.lastName=optionalUser.lastName, $r1.roles=optionalUser.roles, $r1=optionalUser, $r1.active=optionalUser.active, $r1.username=optionalUser.username, $r1.email=optionalUser.email, $r1.posts=optionalUser.posts, $r1.id=optionalUser.id, $r1.name=optionalUser.name}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.reljicd.model.User
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.lang.Object
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: user
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
AccessPath.java: replaceBase(): input access path: user.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.email
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.password
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.username
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.name
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.lastName
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.active
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.roles
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: user.posts
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new com.reljicd.service.impl.PostServiceImp
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUserOrderedByDatePageable
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUserOrderedByDatePageable
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
Utils.java: getRelExpForMethod(): actualargs = [user, page]
Utils.java: getRelExpForMethod(): methodInvoked = <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/reljicd/model/User;I)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r2
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.service.PostService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.service.PostService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findByUserOrderedByDatePageable
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, user := @parameter0: com.reljicd.model.User, page := @parameter1: int, $r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>, $r0 = new org.springframework.data.domain.PageRequest, $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page), specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5), $r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0), return $r2]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.service.impl.PostServiceImp
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = user := @parameter0: com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): curUnit = page := @parameter1: int
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.postRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new org.springframework.data.domain.PageRequest
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JSpecialInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = subtractPageByOne
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
construct/Utils.java: parseObjectInvoke(): specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
construct/Utils.java: parseObjectInvoke(): methodName = subtractPageByOne
construct/Utils.java: parseObjectInvoke(): invokeExpr = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2
, | BasicBlock3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenElseRegion
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: subtractPageByOne
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.service.impl.PostServiceImp
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = page := @parameter0: int
DIRRegionAnalyzer.java: constructDIR(): curUnit = if page >= 1 goto $i0 = page - 1
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()page >= 1
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: condition=<
| page
| 1
DIR.java: updateRegion(): update region entry: this=Self
~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: subtractPageByOne
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $i0
break point
Utils.java: getVarNode(): LinkedVariableBox($i0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= return $i0]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
0


DIR.java: updateRegion(): update region entry: $i0=0
~~~ $i0 ~~~
0


ARegion.java: analyze(): set cur method of analyzer to: subtractPageByOne
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = page - 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JSubExpr
Utils.java: getVarNode(): $i0
break point
Utils.java: getVarNode(): LinkedVariableBox($i0)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
-
| page
| 1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
-
| page
| 1


DIR.java: updateRegion(): update region entry: $i0=-
| page
| 1
~~~ $i0 ~~~
-
| page
| 1


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: <
| page
| 1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: MoreThanEqual
| page
| 1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$i0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$i0=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1}
analysis/Utils.java: mergeSeqDirs(): key: $i0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThanEqual
| page
| 1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:-
| page
| 1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: -
| page
| 1
analysis/Utils.java: resolveTree(): i = 0 child of top:page
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: page
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThanEqual
| page
| 1
analysis/Utils.java: resolveTree(): i = 0 child of top:page
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: page
analysis/Utils.java: resolveTree(): out: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: condition=<
| page
| 1
DIR.java: updateRegion(): update region entry: $i0=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, condition, $i0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, condition=<
| page
| 1, $i0=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: <
| page
| 1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: <
| page
| 1
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: <
| page
| 1
analysis/Utils.java: resolveTree(): i = 0 child of top:page
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: page
analysis/Utils.java: resolveTree(): out: <
| page
| 1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: <
| page
| 1
analysis/Utils.java: mergeSeqDirs(): key: $i0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThanEqual
| page
| 1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:-
| page
| 1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: -
| page
| 1
analysis/Utils.java: resolveTree(): i = 0 child of top:page
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: page
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThanEqual
| page
| 1
analysis/Utils.java: resolveTree(): i = 0 child of top:page
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: page
analysis/Utils.java: resolveTree(): out: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: subtractPageByOne
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, page := @parameter0: int, if page >= 1 goto $i0 = page - 1, $i0 = 0, goto [?= return $i0], $i0 = page - 1, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $i0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$i0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$i0


DIR.java: updateRegion(): update region entry: return=$i0
~~~ return ~~~
$i0


analysis/Utils.java: mergeSeqDirs(): following dir domain: [return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ return ~~~
$i0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {return=$i0}
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: $i0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: $i0
analysis/Utils.java: resolveTree(): dir: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): out: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock3
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$i0


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


{$r1.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName, $r1.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, $r1.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active, return.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email, return.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName, $i0=0, $r1.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id, optionalUser.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active, optionalUser.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name, optionalUser.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email, optionalUser=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, $r1.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username, return.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password, optionalUser.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password, return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id, $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet, $r1.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp, return.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp, optionalUser.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id, $r0=this.userRepository, $r1=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, this=Self, $r1.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email, return.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active, return.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, $r1.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password, condition=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0, return.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username, optionalUser.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp, optionalUser.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName, optionalUser.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, optionalret=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, return.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name, return=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, return=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username, $r1.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name, optionalUser.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: condition=<
| page
| 1
DIR.java: updateRegion(): update region entry: $i0=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIR.java: updateRegion(): update region entry: return=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = int
DIRRegionAnalyzer.java: constructDIR(): leftType : int
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $i0
DIRRegionAnalyzer.java: constructDIR(): foo: <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: subtractPageByOne
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [page, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [page, this]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: page
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: int
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: page
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.service.impl.PostServiceImp
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: this
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.postRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.postRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, condition, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = subtractPageByOne, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: page
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: page
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: page
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): page
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): page
DIRRegionAnalyzer.java: handleSideEffects(): formal = page, actual = page
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: page
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: this
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username

, com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self

, com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = specialinvoke this.<com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>(page)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [page, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [page, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = page, actual = page
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<org.springframework.data.domain.PageRequest: void <init>(int,int)>($i0, 5)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.data.domain.PageRequest: void <init>(int,int)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUserOrderByCreateDateDesc
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUserOrderByCreateDateDesc
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
Utils.java: getRelExpForMethod(): actualargs = [user, $r0]
Utils.java: getRelExpForMethod(): methodInvoked = <com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/reljicd/model/User;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r1
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.repository.PostRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.repository.PostRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): retTypeStr: org.springframework.data.domain.Page
construct/Utils.java: parseObjectInvoke(): retType = org.springframework.data.domain.Page
construct/Utils.java: parseObjectInvoke(): entityClass = org.springframework.data.domain.Page
construct/Utils.java: parseObjectInvoke(): table = com.reljicd.repository.PostRepository
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :org.springframework.data.domain.Page
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/reljicd/model/User;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: isReturnTypeEntity(): method retType = com.reljicd.model.Post
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
AccessPath.java: getCollectionEntityType(): [Signature: (Lcom/reljicd/model/User;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: getCollectionEntityType(): com/reljicd/model/Post
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): leftType : com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r2
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
AccessPath.java: isReturnTypeEntity(): check :org.springframework.data.domain.Page
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/reljicd/model/User;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: isReturnTypeEntity(): method retType = com.reljicd.model.Post
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
AccessPath.java: getCollectionEntityType(): [Signature: (Lcom/reljicd/model/User;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: getCollectionEntityType(): com/reljicd/model/Post
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): left type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): org.springframework.data.domain.Page
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: org.springframework.data.domain.Page
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username

, com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self

, com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)=~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUserOrderByCreateDateDesc
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r2, com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r2.id, $r2.title, $r2.body, $r2.user, $r2.user.id, $r2.user.email, $r2.user.password, $r2.user.username, $r2.user.name, $r2.user.lastName, $r2.user.active, $r2.user.roles, $r2.user.posts, $r2.comments]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.util.Optional: java.lang.Object get(), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String), com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r1.<com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)>(user, $r0)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1=this.postRepository
DIR.java: updateRegion(): update region entry: $r2=Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $i0=?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIR.java: updateRegion(): update region entry: return=Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :org.springframework.data.domain.Page
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/reljicd/model/User;I)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: isReturnTypeEntity(): method retType = com.reljicd.model.Post
AccessPath.java: getCollectionEntityType(): virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
AccessPath.java: getCollectionEntityType(): [Signature: (Lcom/reljicd/model/User;I)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: getCollectionEntityType(): com/reljicd/model/Post
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): leftType : com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: posts
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
AccessPath.java: isReturnTypeEntity(): check :org.springframework.data.domain.Page
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/reljicd/model/User;I)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: isReturnTypeEntity(): method retType = com.reljicd.model.Post
AccessPath.java: getCollectionEntityType(): virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
AccessPath.java: getCollectionEntityType(): [Signature: (Lcom/reljicd/model/User;I)Lorg/springframework/data/domain/Page<Lcom/reljicd/model/Post;>;]
AccessPath.java: getCollectionEntityType(): com/reljicd/model/Post
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): left type = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): org.springframework.data.domain.Page
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: org.springframework.data.domain.Page
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username

, com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self

, com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self

, com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)=~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [user, page, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user, page, $r2]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [user.id, user.email, user.password, user.username, user.name, user.lastName, user.active, user.roles, user.posts]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = page, actual = page
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUserOrderedByDatePageable
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [user, page, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [user, page, $r2]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: user
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: user
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: user
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [user.id, user.email, user.password, user.username, user.name, user.lastName, user.active, user.roles, user.posts]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.email
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.password
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.username
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.active
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.roles
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: user.posts
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: page
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: int
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: page
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.service.impl.PostServiceImp
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r2
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.postRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.postRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1, $r2, this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findByUserOrderedByDatePageable, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: user
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: user
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [user.id, user.email, user.password, user.username, user.name, user.lastName, user.active, user.roles, user.posts]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: page
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: page
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: page
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): page
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): page
DIRRegionAnalyzer.java: handleSideEffects(): formal = page, actual = page
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: page
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r2
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = posts, com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [posts.id, posts.title, posts.body, posts.user, posts.user.id, posts.user.email, posts.user.password, posts.user.username, posts.user.name, posts.user.lastName, posts.user.active, posts.user.roles, posts.user.posts, posts.comments]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.util.Optional: java.lang.Object get(), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String), com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = this.postRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r2
DIRRegionAnalyzer.java: constructDIR(): val = Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = $i0
DIRRegionAnalyzer.java: constructDIR(): val = ?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.postServiceImpl.postRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r2
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.postServiceImpl.postRepository
AccessPath.java: replaceBase(): replacement of base: $r2
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = new com.reljicd.util.Pager
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [posts, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [posts, $r3]
ARegion.java: analyze(): set cur method of analyzer to: <init>
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.util.Pager, posts := @parameter0: org.springframework.data.domain.Page, specialinvoke this.<java.lang.Object: void <init>()>(), this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.util.Pager
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = posts := @parameter0: org.springframework.data.domain.Page
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke this.<java.lang.Object: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke this.<java.lang.Object: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.lang.Object: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.reljicd.util.Pager: org.springframework.data.domain.Page posts> = posts
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.posts -> posts
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.posts ~~~
posts


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.posts ~~~
posts


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.posts=posts
~~~ this ~~~
Self

~~~ this.posts ~~~
posts


DIRRegionAnalyzer.java: handleSideEffects(): ith formal: posts
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.data.domain.Page
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: posts
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.util.Pager
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r3
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.posts]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.posts
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, this.posts]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page), com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int), com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int), com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [posts, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [posts, $r3]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = posts, actual = posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.posts]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: posts
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = <init>, [$r3.posts]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: posts
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: posts
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: posts
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): posts
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): posts
DIRRegionAnalyzer.java: handleSideEffects(): formal = posts, actual = posts
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.posts
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive, Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r3
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.posts]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
optionalUser

~~~ $r1.active ~~~
optionalUser.active

~~~ $r1.email ~~~
optionalUser.email

~~~ $r1.id ~~~
optionalUser.id

~~~ $r1.lastName ~~~
optionalUser.lastName

~~~ $r1.name ~~~
optionalUser.name

~~~ $r1.password ~~~
optionalUser.password

~~~ $r1.posts ~~~
optionalUser.posts

~~~ $r1.roles ~~~
optionalUser.roles

~~~ $r1.username ~~~
optionalUser.username

~~~ $r3.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ user ~~~
optionalUser

~~~ user.active ~~~
optionalUser.active

~~~ user.email ~~~
optionalUser.email

~~~ user.id ~~~
optionalUser.id

~~~ user.lastName ~~~
optionalUser.lastName

~~~ user.name ~~~
optionalUser.name

~~~ user.password ~~~
optionalUser.password

~~~ user.posts ~~~
optionalUser.posts

~~~ user.roles ~~~
optionalUser.roles

~~~ user.username ~~~
optionalUser.username


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.posts
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): curUnit = pager = $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: pager
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r3
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Pager.java]
AccessPath.java: replaceBase(): input access path: pager.posts
AccessPath.java: replaceBase(): replacement of base: $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__pager
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r3
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Pager.java]
AccessPath.java: replaceBase(): input access path: __modelattribute__pager.posts
AccessPath.java: replaceBase(): replacement of base: $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__user
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: user
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
AccessPath.java: replaceBase(): input access path: __modelattribute__user.id
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.email
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.password
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.username
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.name
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.lastName
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.active
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.roles
AccessPath.java: replaceBase(): replacement of base: user
AccessPath.java: replaceBase(): input access path: __modelattribute__user.posts
AccessPath.java: replaceBase(): replacement of base: user
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "/posts"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
optionalUser

~~~ $r1.active ~~~
optionalUser.active

~~~ $r1.email ~~~
optionalUser.email

~~~ $r1.id ~~~
optionalUser.id

~~~ $r1.lastName ~~~
optionalUser.lastName

~~~ $r1.name ~~~
optionalUser.name

~~~ $r1.password ~~~
optionalUser.password

~~~ $r1.posts ~~~
optionalUser.posts

~~~ $r1.roles ~~~
optionalUser.roles

~~~ $r1.username ~~~
optionalUser.username

~~~ $r3.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__user ~~~
optionalUser

~~~ __modelattribute__user.active ~~~
optionalUser.active

~~~ __modelattribute__user.email ~~~
optionalUser.email

~~~ __modelattribute__user.id ~~~
optionalUser.id

~~~ __modelattribute__user.lastName ~~~
optionalUser.lastName

~~~ __modelattribute__user.name ~~~
optionalUser.name

~~~ __modelattribute__user.password ~~~
optionalUser.password

~~~ __modelattribute__user.posts ~~~
optionalUser.posts

~~~ __modelattribute__user.roles ~~~
optionalUser.roles

~~~ __modelattribute__user.username ~~~
optionalUser.username

~~~ pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
"/posts"

~~~ user ~~~
optionalUser

~~~ user.active ~~~
optionalUser.active

~~~ user.email ~~~
optionalUser.email

~~~ user.id ~~~
optionalUser.id

~~~ user.lastName ~~~
optionalUser.lastName

~~~ user.name ~~~
optionalUser.name

~~~ user.password ~~~
optionalUser.password

~~~ user.posts ~~~
optionalUser.posts

~~~ user.roles ~~~
optionalUser.roles

~~~ user.username ~~~
optionalUser.username


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
optionalUser

~~~ $r1.active ~~~
optionalUser.active

~~~ $r1.email ~~~
optionalUser.email

~~~ $r1.id ~~~
optionalUser.id

~~~ $r1.lastName ~~~
optionalUser.lastName

~~~ $r1.name ~~~
optionalUser.name

~~~ $r1.password ~~~
optionalUser.password

~~~ $r1.posts ~~~
optionalUser.posts

~~~ $r1.roles ~~~
optionalUser.roles

~~~ $r1.username ~~~
optionalUser.username

~~~ $r3.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__user ~~~
optionalUser

~~~ __modelattribute__user.active ~~~
optionalUser.active

~~~ __modelattribute__user.email ~~~
optionalUser.email

~~~ __modelattribute__user.id ~~~
optionalUser.id

~~~ __modelattribute__user.lastName ~~~
optionalUser.lastName

~~~ __modelattribute__user.name ~~~
optionalUser.name

~~~ __modelattribute__user.password ~~~
optionalUser.password

~~~ __modelattribute__user.posts ~~~
optionalUser.posts

~~~ __modelattribute__user.roles ~~~
optionalUser.roles

~~~ __modelattribute__user.username ~~~
optionalUser.username

~~~ pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
"/posts"

~~~ user ~~~
optionalUser

~~~ user.active ~~~
optionalUser.active

~~~ user.email ~~~
optionalUser.email

~~~ user.id ~~~
optionalUser.id

~~~ user.lastName ~~~
optionalUser.lastName

~~~ user.name ~~~
optionalUser.name

~~~ user.password ~~~
optionalUser.password

~~~ user.posts ~~~
optionalUser.posts

~~~ user.roles ~~~
optionalUser.roles

~~~ user.username ~~~
optionalUser.username


DIR.java: updateRegion(): update region entry: $r1.lastName=optionalUser.lastName
DIR.java: updateRegion(): update region entry: $r1.roles=optionalUser.roles
DIR.java: updateRegion(): update region entry: $r1.active=optionalUser.active
DIR.java: updateRegion(): update region entry: __modelattribute__pager.posts=Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIR.java: updateRegion(): update region entry: user.name=optionalUser.name
DIR.java: updateRegion(): update region entry: user.username=optionalUser.username
DIR.java: updateRegion(): update region entry: $r1.id=optionalUser.id
DIR.java: updateRegion(): update region entry: posts=Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIR.java: updateRegion(): update region entry: pager.posts=Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIR.java: updateRegion(): update region entry: __modelattribute__user.lastName=optionalUser.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__user.password=optionalUser.password
DIR.java: updateRegion(): update region entry: user.email=optionalUser.email
DIR.java: updateRegion(): update region entry: __modelattribute__user.id=optionalUser.id
DIR.java: updateRegion(): update region entry: $r1.username=optionalUser.username
DIR.java: updateRegion(): update region entry: $r1.posts=optionalUser.posts
DIR.java: updateRegion(): update region entry: user.active=optionalUser.active
DIR.java: updateRegion(): update region entry: $r1=optionalUser
DIR.java: updateRegion(): update region entry: __modelattribute__user.username=optionalUser.username
DIR.java: updateRegion(): update region entry: user.id=optionalUser.id
DIR.java: updateRegion(): update region entry: $r1.email=optionalUser.email
DIR.java: updateRegion(): update region entry: $r3.posts=Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
DIR.java: updateRegion(): update region entry: __modelattribute__user.email=optionalUser.email
DIR.java: updateRegion(): update region entry: user.password=optionalUser.password
DIR.java: updateRegion(): update region entry: user.lastName=optionalUser.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__user=optionalUser
DIR.java: updateRegion(): update region entry: __modelattribute__user.name=optionalUser.name
DIR.java: updateRegion(): update region entry: $r1.password=optionalUser.password
DIR.java: updateRegion(): update region entry: __modelattribute__user.active=optionalUser.active
DIR.java: updateRegion(): update region entry: __modelattribute__user.roles=optionalUser.roles
DIR.java: updateRegion(): update region entry: user.posts=optionalUser.posts
DIR.java: updateRegion(): update region entry: user=optionalUser
DIR.java: updateRegion(): update region entry: __modelattribute__user.posts=optionalUser.posts
DIR.java: updateRegion(): update region entry: return="/posts"
DIR.java: updateRegion(): update region entry: $r1.name=optionalUser.name
DIR.java: updateRegion(): update region entry: user.roles=optionalUser.roles
~~~ $r1 ~~~
optionalUser

~~~ $r1.active ~~~
optionalUser.active

~~~ $r1.email ~~~
optionalUser.email

~~~ $r1.id ~~~
optionalUser.id

~~~ $r1.lastName ~~~
optionalUser.lastName

~~~ $r1.name ~~~
optionalUser.name

~~~ $r1.password ~~~
optionalUser.password

~~~ $r1.posts ~~~
optionalUser.posts

~~~ $r1.roles ~~~
optionalUser.roles

~~~ $r1.username ~~~
optionalUser.username

~~~ $r3.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ __modelattribute__user ~~~
optionalUser

~~~ __modelattribute__user.active ~~~
optionalUser.active

~~~ __modelattribute__user.email ~~~
optionalUser.email

~~~ __modelattribute__user.id ~~~
optionalUser.id

~~~ __modelattribute__user.lastName ~~~
optionalUser.lastName

~~~ __modelattribute__user.name ~~~
optionalUser.name

~~~ __modelattribute__user.password ~~~
optionalUser.password

~~~ __modelattribute__user.posts ~~~
optionalUser.posts

~~~ __modelattribute__user.roles ~~~
optionalUser.roles

~~~ __modelattribute__user.username ~~~
optionalUser.username

~~~ pager.posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ posts ~~~
Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
"/posts"

~~~ user ~~~
optionalUser

~~~ user.active ~~~
optionalUser.active

~~~ user.email ~~~
optionalUser.email

~~~ user.id ~~~
optionalUser.id

~~~ user.lastName ~~~
optionalUser.lastName

~~~ user.name ~~~
optionalUser.name

~~~ user.password ~~~
optionalUser.password

~~~ user.posts ~~~
optionalUser.posts

~~~ user.roles ~~~
optionalUser.roles

~~~ user.username ~~~
optionalUser.username


ARegion.java: analyze(): set cur method of analyzer to: blogForUsername
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.BlogController, username := @parameter0: java.lang.String, page := @parameter1: int, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.UserServiceImp, optionalUser = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>(username), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0, $z0 = virtualinvoke optionalUser.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalUser.<java.util.Optional: java.lang.Object get()>(), user = (com.reljicd.model.User) $r1, $r2 = new com.reljicd.service.impl.PostServiceImp, posts = virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)>(user, page), this.<com.reljicd.controller.BlogController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2, $r3 = new com.reljicd.util.Pager, specialinvoke $r3.<com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)>(posts), pager = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("pager", $r3), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("user", user), return "/posts", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "/error"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
"/error"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
"/error"


DIR.java: updateRegion(): update region entry: return="/error"
~~~ return ~~~
"/error"


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$r1.lastName, $r1.roles, $r1.active, __modelattribute__pager.posts, user.name, user.username, $r1.id, posts, pager.posts, __modelattribute__user.lastName, __modelattribute__user.password, user.email, __modelattribute__user.id, $r1.username, $r1.posts, user.active, $r1, __modelattribute__user.username, user.id, $r1.email, $r3.posts, __modelattribute__user.email, user.password, user.lastName, __modelattribute__user, __modelattribute__user.name, $r1.password, __modelattribute__user.active, __modelattribute__user.roles, user.posts, user, __modelattribute__user.posts, return, $r1.name, user.roles]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$r1.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName, $r1.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles, $r1.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active, __modelattribute__pager.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts, user.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name, user.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username, $r1.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id, posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts, pager.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts, __modelattribute__user.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName, __modelattribute__user.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password, user.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email, __modelattribute__user.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id, $r1.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username, $r1.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts, user.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active, $r1=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1, __modelattribute__user.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username, user.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id, $r1.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email, $r3.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts, __modelattribute__user.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email, user.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password, user.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName, __modelattribute__user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user, __modelattribute__user.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name, $r1.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password, __modelattribute__user.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active, __modelattribute__user.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles, user.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts, user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user, __modelattribute__user.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts, return=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error", $r1.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name, user.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles}
analysis/Utils.java: mergeSeqDirs(): key: $r1.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.lastName
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName
analysis/Utils.java: mergeSeqDirs(): key: $r1.roles
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.roles
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| $r1.roles
analysis/Utils.java: resolveTree(): resolvedValChild: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles
analysis/Utils.java: mergeSeqDirs(): key: $r1.active
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.active
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| $r1.active
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pager.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | optionalUser
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pager.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pager.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:optionalUser
analysis/Utils.java: resolveTree(): top: Join
| optionalUser
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): new top: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
analysis/Utils.java: mergeSeqDirs(): key: user.name
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.name
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| user.name
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name
analysis/Utils.java: resolveTree(): i = 2 child of top:user.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name
analysis/Utils.java: mergeSeqDirs(): key: user.username
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.username
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| user.username
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username
analysis/Utils.java: resolveTree(): i = 2 child of top:user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username
analysis/Utils.java: mergeSeqDirs(): key: $r1.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| $r1.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id
analysis/Utils.java: mergeSeqDirs(): key: posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
analysis/Utils.java: mergeSeqDirs(): key: pager.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pager.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pager.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.lastName
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.password
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.password
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| __modelattribute__user.password
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password
analysis/Utils.java: mergeSeqDirs(): key: user.email
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.email
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| user.email
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email
analysis/Utils.java: resolveTree(): i = 2 child of top:user.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| __modelattribute__user.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id
analysis/Utils.java: mergeSeqDirs(): key: $r1.username
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.username
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| $r1.username
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username
analysis/Utils.java: mergeSeqDirs(): key: $r1.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.posts
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| $r1.posts
analysis/Utils.java: resolveTree(): resolvedValChild: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts
analysis/Utils.java: mergeSeqDirs(): key: user.active
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.active
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| user.active
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active
analysis/Utils.java: resolveTree(): i = 2 child of top:user.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active
analysis/Utils.java: mergeSeqDirs(): key: $r1
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| $r1
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.username
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.username
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.username
| __modelattribute__user.username
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username
analysis/Utils.java: mergeSeqDirs(): key: user.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.id
| user.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id
analysis/Utils.java: resolveTree(): i = 2 child of top:user.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id
analysis/Utils.java: mergeSeqDirs(): key: $r1.email
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.email
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| $r1.email
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email
analysis/Utils.java: mergeSeqDirs(): key: $r3.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r3.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r3.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.repository.PostRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.email
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.email
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.email
| __modelattribute__user.email
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email
analysis/Utils.java: mergeSeqDirs(): key: user.password
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.password
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| user.password
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password
analysis/Utils.java: resolveTree(): i = 2 child of top:user.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password
analysis/Utils.java: mergeSeqDirs(): key: user.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.lastName
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.lastName
| user.lastName
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName
analysis/Utils.java: resolveTree(): i = 2 child of top:user.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| __modelattribute__user
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.name
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.name
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| __modelattribute__user.name
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name
analysis/Utils.java: mergeSeqDirs(): key: $r1.password
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.password
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.password
| $r1.password
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.active
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.active
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.active
| __modelattribute__user.active
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.roles
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.roles
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| __modelattribute__user.roles
analysis/Utils.java: resolveTree(): resolvedValChild: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles
analysis/Utils.java: mergeSeqDirs(): key: user.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.posts
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| user.posts
analysis/Utils.java: resolveTree(): resolvedValChild: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts
analysis/Utils.java: resolveTree(): i = 2 child of top:user.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts
analysis/Utils.java: mergeSeqDirs(): key: user
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser
| user
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user
analysis/Utils.java: resolveTree(): i = 2 child of top:user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__user.posts
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.posts
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.posts
| __modelattribute__user.posts
analysis/Utils.java: resolveTree(): resolvedValChild: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__user.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__user.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:"/posts"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:"/error"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/error"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/posts"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
analysis/Utils.java: mergeSeqDirs(): key: $r1.name
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.name
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.name
| $r1.name
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name
analysis/Utils.java: mergeSeqDirs(): key: user.roles
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalUser.roles
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| optionalUser.roles
| user.roles
analysis/Utils.java: resolveTree(): resolvedValChild: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles
analysis/Utils.java: resolveTree(): i = 2 child of top:user.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: user.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.User.Username)
| username
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.User.Username)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.User)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ this ~~~
Self

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ this ~~~
Self

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ this ~~~
Self

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username


DIR.java: updateRegion(): update region entry: $r1.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName
DIR.java: updateRegion(): update region entry: $r1.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles
DIR.java: updateRegion(): update region entry: $r1.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active
DIR.java: updateRegion(): update region entry: __modelattribute__pager.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
DIR.java: updateRegion(): update region entry: user.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name
DIR.java: updateRegion(): update region entry: user.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username
DIR.java: updateRegion(): update region entry: $r1.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id
DIR.java: updateRegion(): update region entry: posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
DIR.java: updateRegion(): update region entry: pager.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
DIR.java: updateRegion(): update region entry: __modelattribute__user.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName
DIR.java: updateRegion(): update region entry: optionalUser.active=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
DIR.java: updateRegion(): update region entry: __modelattribute__user.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password
DIR.java: updateRegion(): update region entry: optionalUser.name=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
DIR.java: updateRegion(): update region entry: optionalUser.email=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: user.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email
DIR.java: updateRegion(): update region entry: optionalUser=Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
DIR.java: updateRegion(): update region entry: __modelattribute__user.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id
DIR.java: updateRegion(): update region entry: $r1.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username
DIR.java: updateRegion(): update region entry: optionalUser.password=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
DIR.java: updateRegion(): update region entry: $r1.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts
DIR.java: updateRegion(): update region entry: user.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active
DIR.java: updateRegion(): update region entry: optionalUser.id=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1
DIR.java: updateRegion(): update region entry: __modelattribute__user.username=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username
DIR.java: updateRegion(): update region entry: user.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r1.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email
DIR.java: updateRegion(): update region entry: $r3.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
DIR.java: updateRegion(): update region entry: __modelattribute__user.email=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email
DIR.java: updateRegion(): update region entry: user.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password
DIR.java: updateRegion(): update region entry: user.lastName=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user
DIR.java: updateRegion(): update region entry: __modelattribute__user.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name
DIR.java: updateRegion(): update region entry: $r1.password=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password
DIR.java: updateRegion(): update region entry: condition=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
DIR.java: updateRegion(): update region entry: __modelattribute__user.active=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active
DIR.java: updateRegion(): update region entry: __modelattribute__user.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles
DIR.java: updateRegion(): update region entry: optionalUser.posts=User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: optionalUser.lastName=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: optionalUser.roles=User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: user.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts
DIR.java: updateRegion(): update region entry: user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user
DIR.java: updateRegion(): update region entry: __modelattribute__user.posts=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts
DIR.java: updateRegion(): update region entry: return=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
DIR.java: updateRegion(): update region entry: optionalUser.username=Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
DIR.java: updateRegion(): update region entry: $r1.name=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name
DIR.java: updateRegion(): update region entry: user.roles=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles
~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ this ~~~
Self

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username


Resultant dag : ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

~~~ $r3.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

~~~ __modelattribute__pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

~~~ __modelattribute__user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

~~~ __modelattribute__user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

~~~ __modelattribute__user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

~~~ __modelattribute__user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

~~~ __modelattribute__user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

~~~ __modelattribute__user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

~~~ __modelattribute__user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

~~~ __modelattribute__user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

~~~ __modelattribute__user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

~~~ __modelattribute__user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

~~~ optionalUser ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ optionalUser.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ optionalUser.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ optionalUser.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ optionalUser.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ optionalUser.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ optionalUser.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ optionalUser.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalUser.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ pager.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

~~~ posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

~~~ this ~~~
Self

~~~ user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

~~~ user.active ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

~~~ user.email ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

~~~ user.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

~~~ user.lastName ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

~~~ user.name ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

~~~ user.password ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

~~~ user.posts ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

~~~ user.roles ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles

~~~ user.username ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username


final FuncStackAnalyzer3 = 
{com.reljicd.util.Pager: void <init>(org.springframework.data.domain.Page)=~~~ this ~~~
Self

~~~ this.posts ~~~
posts

, java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalUser

~~~ return ~~~
optionalUser

~~~ return.active ~~~
optionalUser.active

~~~ return.email ~~~
optionalUser.email

~~~ return.id ~~~
optionalUser.id

~~~ return.lastName ~~~
optionalUser.lastName

~~~ return.name ~~~
optionalUser.name

~~~ return.password ~~~
optionalUser.password

~~~ return.posts ~~~
optionalUser.posts

~~~ return.roles ~~~
optionalUser.roles

~~~ return.username ~~~
optionalUser.username

, com.reljicd.service.impl.PostServiceImp: org.springframework.data.domain.Page findByUserOrderedByDatePageable(com.reljicd.model.User,int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ $r1 ~~~
this.postRepository

~~~ $r2 ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

~~~ this ~~~
Self

, com.reljicd.service.impl.PostServiceImp: int subtractPageByOne(int)=~~~ $i0 ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ condition ~~~
<
| page
| 1

~~~ return ~~~
?
| MoreThanEqual
| | page
| | 1
| 0
| -
| | page
| | 1

~~~ this ~~~
Self

, com.reljicd.repository.UserRepository: java.util.Optional findByUsername(java.lang.String)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

, com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ $r1.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ $r1.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ $r1.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

~~~ return.active ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

~~~ return.name ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

~~~ return.posts ~~~
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

~~~ return.roles ~~~
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: org.springframework.data.domain.Page findByUserOrderByCreateDateDesc(com.reljicd.model.User,org.springframework.data.domain.Pageable)=~~~ return ~~~
Join
| user
| ClassRef(com.reljicd.repository.PostRepository)
| NullOp

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.reljicd.controller.BlogController: java.lang.String blogForUsername(java.lang.String,int,org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 48
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r1.lastName, $r1.roles, $r1.active, __modelattribute__pager.posts, user.name, user.username, $r1.id, posts, pager.posts, __modelattribute__user.lastName, optionalUser.active, __modelattribute__user.password, optionalUser.name, optionalUser.email, user.email, optionalUser, __modelattribute__user.id, $r1.username, optionalUser.password, $z0, $r1.posts, user.active, optionalUser.id, $r1, __modelattribute__user.username, user.id, this, $r1.email, $r3.posts, __modelattribute__user.email, user.password, user.lastName, __modelattribute__user, __modelattribute__user.name, $r1.password, condition, __modelattribute__user.active, __modelattribute__user.roles, optionalUser.posts, optionalUser.lastName, optionalUser.roles, user.posts, user, __modelattribute__user.posts, return, optionalUser.username, $r1.name, user.roles]
Final veMap of $r1.lastName = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.roles = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.roles
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.active = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.active
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pager.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pager.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.name = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name
SavePostProcess.java: SavePostProcess(): repo varnode: user.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.username = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username
SavePostProcess.java: SavePostProcess(): repo varnode: user.username
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts
SavePostProcess.java: SavePostProcess(): repo varnode: posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pager.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts
SavePostProcess.java: SavePostProcess(): repo varnode: pager.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.lastName = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.active = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.active
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.password = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.password
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.name = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.email = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.email
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.email = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email
SavePostProcess.java: SavePostProcess(): repo varnode: user.email
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser = 
Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.username = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.username
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.password = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.password
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $z0 = 
NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet
SavePostProcess.java: SavePostProcess(): repo varnode: $z0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.active = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active
SavePostProcess.java: SavePostProcess(): repo varnode: user.active
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.id = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.username = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.username
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id
SavePostProcess.java: SavePostProcess(): repo varnode: user.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.email = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.email
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts
SavePostProcess.java: SavePostProcess(): repo varnode: $r3.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.email = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.email
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.password = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password
SavePostProcess.java: SavePostProcess(): repo varnode: user.password
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.lastName = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName
SavePostProcess.java: SavePostProcess(): repo varnode: user.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.name = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.password = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.password
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of condition = 
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0
SavePostProcess.java: SavePostProcess(): repo varnode: condition
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.active = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.active
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.roles = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.roles
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.posts = 
User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.lastName = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.roles = 
User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.roles
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts
SavePostProcess.java: SavePostProcess(): repo varnode: user.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user
SavePostProcess.java: SavePostProcess(): repo varnode: user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__user.posts = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__user.posts
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalUser.username = 
Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username
SavePostProcess.java: SavePostProcess(): repo varnode: optionalUser.username
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.name = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of user.roles = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles
SavePostProcess.java: SavePostProcess(): repo varnode: user.roles
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r1.lastName
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| $r1.lastName

key: $r1.roles
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.roles

key: $r1.active
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| $r1.active

key: __modelattribute__pager.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| __modelattribute__pager.posts

key: user.name
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| user.name

key: user.username
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| user.username

key: $r1.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| $r1.id

key: posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| posts

key: pager.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| pager.posts

key: __modelattribute__user.lastName
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| __modelattribute__user.lastName

key: optionalUser.active
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| active

key: __modelattribute__user.password
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| __modelattribute__user.password

key: optionalUser.name
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| name

key: optionalUser.email
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| email

key: user.email
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| user.email

key: optionalUser
value: Sel
| ClassRef(com.reljicd.model.User)
| Equals
| | FieldRef(com.reljicd.model.User.Username)
| | username

key: __modelattribute__user.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| __modelattribute__user.id

key: $r1.username
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| $r1.username

key: optionalUser.password
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| password

key: $z0
value: NotEq
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| EmptySet

key: $r1.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.posts

key: user.active
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| user.active

key: optionalUser.id
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| id

key: $r1
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| $r1

key: __modelattribute__user.username
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | username
| __modelattribute__user.username

key: user.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | id
| user.id

key: this
value: Self

key: $r1.email
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| $r1.email

key: $r3.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.repository.PostRepository)
| | NullOp
| $r3.posts

key: __modelattribute__user.email
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | email
| __modelattribute__user.email

key: user.password
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| user.password

key: user.lastName
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | lastName
| user.lastName

key: __modelattribute__user
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| __modelattribute__user

key: __modelattribute__user.name
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| __modelattribute__user.name

key: $r1.password
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | password
| $r1.password

key: condition
value: Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | EmptySet
| 0

key: __modelattribute__user.active
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | active
| __modelattribute__user.active

key: __modelattribute__user.roles
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.roles

key: optionalUser.posts
value: User.posts=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp

key: optionalUser.lastName
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| lastName

key: optionalUser.roles
value: User.roles=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | ClassRef(com.reljicd.model.Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

key: user.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| user.posts

key: user
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| user

key: __modelattribute__user.posts
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.posts=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | Alpha.id
| | | | Post.user_id
| | List
| | | id
| | | title
| | | body
| | | createDate
| | | Post.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Post.comments=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.Comment)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Comment.post_id
| | | | List
| | | | | id
| | | | | body
| | | | | createDate
| | | | | Comment.post=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.post_id
| | | | | | | | Post.id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Comment.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__user.posts

key: return
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| "/posts"
| "/error"

key: optionalUser.username
value: Pi
| Sel
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | FieldRef(com.reljicd.model.User.Username)
| | | username
| username

key: $r1.name
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | FieldRef(com.reljicd.model.User.Username)
| | | | username
| | name
| $r1.name

key: user.roles
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | EmptySet
| | 0
| User.roles=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.User.Username)
| | | | | username
| | | ClassRef(com.reljicd.model.Role)
| | | Equals
| | | | Alpha.role_id
| | | | Role.user_id
| | List
| | | id
| | | role
| | | Role.users=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(com.reljicd.model.User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.role_id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(com.reljicd.model.Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| user.roles





























Tables and Fields :

Role fields = 
{role=FieldData, user_id=FieldData, role_id=FieldData, id=FieldData, users=User}

Comment fields = 
{post=Post, post_id=FieldData, user_id=FieldData, id=FieldData, body=FieldData, user=User, createDate=Date}

User fields = 
{lastName=FieldData, password=FieldData, user_id=FieldData, role_id=FieldData, roles=Role, name=FieldData, active=FieldData, id=FieldData, posts=Post, email=FieldData, username=FieldData}

Post fields = 
{comments=Comment, post_id=FieldData, user_id=FieldData, id=FieldData, title=FieldData, body=FieldData, user=User, createDate=Date}

{}
{}
 Node contains nested fields
u_idu_user_id
fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : u_com_reljicd_model_Post | v0.u_id = v1.u_user_id <=> v1 in v0.u_posts }u_Sel___ClassRef_com_r31.u_posts[fact { u_____NotEq_____NotEq_10 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe12.u_email) else (u___modelattribute__user_email)) }, sig u_Pi___Sel_____ClassRe21 in u_com_reljicd_model_User {}
, sig u_Join___Sel_____Class3 in u_com_reljicd_repository_PostRepository {}
fact { u_Join___Sel_____Class3 = u_Sel___ClassRef_com_r4.u_com_reljicd_repository_PostRepository_c }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : u_com_reljicd_model_Post | v0.u_id = v1.u_user_id <=> v1 in v0.u_posts }, fact { u_Pi___Sel_____ClassRe18 = u_Sel___ClassRef_com_r17 }, fact { u_____NotEq_____NotEq_16 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe18.u_lastName) else (u___modelattribute__user_lastName)) }, fact { u_____NotEq_____NotEq_19 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe21.u_name) else (u___modelattribute__user_name)) }, fact { u_Pi___Sel_____ClassRe12 = u_Sel___ClassRef_com_r11 }, sig u_____NotEq_____NotEq_25 in univ {}, sig u_Pi___Sel_____ClassRe9 in u_com_reljicd_model_User {}
, sig u_____NotEq_____NotEq_19 in univ {}, fact { u_____NotEq_____NotEq_13 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe15.u_id) else (u___modelattribute__user_id)) }, fact { u_____NotEq_____NotEq_1 = ((u_Sel___ClassRef_com_r2 != none) => (u_Join___Sel_____Class3) else (u___modelattribute__pager_posts)) }, fact { u_Pi___Sel_____ClassRe21 = u_Sel___ClassRef_com_r20 }, sig u_____NotEq_____NotEq_7 in univ {}, sig u_Pi___Sel_____ClassRe24 in u_com_reljicd_model_User {}
, fact { u_____NotEq_____NotEq_7 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe9.u_active) else (u___modelattribute__user_active)) }, sig u_____NotEq_____NotEq_16 in univ {}, sig u_Pi___Sel_____ClassRe15 in u_com_reljicd_model_User {}
, sig u_____NotEq_____NotEq_22 in univ {}, fact { u_Pi___Sel_____ClassRe9 = u_Sel___ClassRef_com_r8 }, fact { u_Pi___Sel_____ClassRe15 = u_Sel___ClassRef_com_r14 }, sig u_Pi___Sel_____ClassRe12 in u_com_reljicd_model_User {}
, fact { u_____NotEq_____NotEq_5 = ((u_Sel___ClassRef_com_r2 != none) => (u_Sel___ClassRef_com_r6) else (u___modelattribute__user)) }, sig u_____NotEq_____NotEq_10 in univ {}, fact { u_____NotEq_____NotEq_22 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe24.u_password) else (u___modelattribute__user_password)) }, sig u_____NotEq_____NotEq_13 in univ {}, fact { u_Pi___Sel_____ClassRe24 = u_Sel___ClassRef_com_r23 }, sig u_____NotEq_____NotEq_1 in univ {}, sig u_Pi___Sel_____ClassRe18 in u_com_reljicd_model_User {}
, sig u_____NotEq_____NotEq_5 in univ {}]
u_user_idu_id
u_com_reljicd_model_Postu_com_reljicd_model_UserEquals
| Alpha.user_id
| User.id
u_role_idu_user_id
u_com_reljicd_model_Useru_com_reljicd_model_RoleEquals
| Alpha.role_id
| Role.user_id
u_idu_user_id
u_com_reljicd_model_Useru_com_reljicd_model_PostEquals
| Alpha.id
| Post.user_id
u_idu_post_id
u_com_reljicd_model_Postu_com_reljicd_model_CommentEquals
| Alpha.id
| Comment.post_id
u_post_idu_id
u_com_reljicd_model_Commentu_com_reljicd_model_PostEquals
| Alpha.post_id
| Post.id
u_user_idu_id
u_com_reljicd_model_Commentu_com_reljicd_model_UserEquals
| Alpha.user_id
| User.id
 Node contains nested fields
u_role_idu_user_id
fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_Sel___ClassRef_com_r48 |  all v3 : u_com_reljicd_model_Role | v2.u_role_id = v3.u_user_id <=> v3 in v2.u_roles }u_Sel___ClassRef_com_r48.u_roles[fact { u_____NotEq_____NotEq_10 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe12.u_email) else (u___modelattribute__user_email)) }, sig u_Pi___Sel_____ClassRe21 in u_com_reljicd_model_User {}
, sig u_Join___Sel_____Class3 in u_com_reljicd_repository_PostRepository {}
fact { u_Join___Sel_____Class3 = u_Sel___ClassRef_com_r4.u_com_reljicd_repository_PostRepository_c }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : u_com_reljicd_model_User | v1.u_user_id = v2.u_id <=> v2 in v1.u_user }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : u_com_reljicd_model_Post | v0.u_id = v1.u_user_id <=> v1 in v0.u_posts }, fact { u_Pi___Sel_____ClassRe18 = u_Sel___ClassRef_com_r17 }, fact { u_____NotEq_____NotEq_16 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe18.u_lastName) else (u___modelattribute__user_lastName)) }, fact { u_____NotEq_____NotEq_19 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe21.u_name) else (u___modelattribute__user_name)) }, fact { u_Pi___Sel_____ClassRe12 = u_Sel___ClassRef_com_r11 }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_comments |  all v3 : u_com_reljicd_model_Post | v2.u_post_id = v3.u_id <=> v3 in v2.u_post }, sig u_____NotEq_____NotEq_25 in univ {}, sig u_Pi___Sel_____ClassRe9 in u_com_reljicd_model_User {}
, sig u_____NotEq_____NotEq_19 in univ {}, fact { u_____NotEq_____NotEq_13 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe15.u_id) else (u___modelattribute__user_id)) }, fact { u_____NotEq_____NotEq_1 = ((u_Sel___ClassRef_com_r2 != none) => (u_Join___Sel_____Class3) else (u___modelattribute__pager_posts)) }, fact { u_Pi___Sel_____ClassRe21 = u_Sel___ClassRef_com_r20 }, sig u_____NotEq_____NotEq_7 in univ {}, sig u_Pi___Sel_____ClassRe24 in u_com_reljicd_model_User {}
, fact { u_____NotEq_____NotEq_25 = ((u_Sel___ClassRef_com_r2 != none) => (u_Sel___ClassRef_com_r31.u_posts) else (u___modelattribute__user_posts)) }, fact { u_____NotEq_____NotEq_7 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe9.u_active) else (u___modelattribute__user_active)) }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_Sel___ClassRef_com_r48 |  all v3 : u_com_reljicd_model_Role | v2.u_role_id = v3.u_user_id <=> v3 in v2.u_roles }, sig u_____NotEq_____NotEq_16 in univ {}, sig u_Pi___Sel_____ClassRe15 in u_com_reljicd_model_User {}
, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_user |  all v3 : u_com_reljicd_model_Role | v2.u_role_id = v3.u_user_id <=> v3 in v2.u_roles }, sig u_____NotEq_____NotEq_46 in univ {}, sig u_____NotEq_____NotEq_22 in univ {}, fact { u_Pi___Sel_____ClassRe9 = u_Sel___ClassRef_com_r8 }, fact { u_Pi___Sel_____ClassRe15 = u_Sel___ClassRef_com_r14 }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_user |  all v3 : u_com_reljicd_model_Post | v2.u_id = v3.u_user_id <=> v3 in v2.u_posts }, sig u_Pi___Sel_____ClassRe12 in u_com_reljicd_model_User {}
, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : v1.u_comments |  all v3 : u_com_reljicd_model_User | v2.u_user_id = v3.u_id <=> v3 in v2.u_user }, fact {  all v0 : u_Sel___ClassRef_com_r31 |  all v1 : v0.u_posts |  all v2 : u_com_reljicd_model_Comment | v1.u_id = v2.u_post_id <=> v2 in v1.u_comments }, fact { u_____NotEq_____NotEq_5 = ((u_Sel___ClassRef_com_r2 != none) => (u_Sel___ClassRef_com_r6) else (u___modelattribute__user)) }, sig u_____NotEq_____NotEq_10 in univ {}, fact { u_____NotEq_____NotEq_22 = ((u_Sel___ClassRef_com_r2 != none) => (u_Pi___Sel_____ClassRe24.u_password) else (u___modelattribute__user_password)) }, sig u_____NotEq_____NotEq_13 in univ {}, fact { u_Pi___Sel_____ClassRe24 = u_Sel___ClassRef_com_r23 }, sig u_____NotEq_____NotEq_1 in univ {}, sig u_Pi___Sel_____ClassRe18 in u_com_reljicd_model_User {}
, sig u_____NotEq_____NotEq_5 in univ {}]
u_user_idu_role_id
u_com_reljicd_model_Roleu_com_reljicd_model_UserEquals
| Alpha.user_id
| User.role_id
u_role_idu_user_id
u_com_reljicd_model_Useru_com_reljicd_model_RoleEquals
| Alpha.role_id
| Role.user_id
u_idu_user_id
u_com_reljicd_model_Useru_com_reljicd_model_PostEquals
| Alpha.id
| Post.user_id
Time elapsed: 2.384 seconds
