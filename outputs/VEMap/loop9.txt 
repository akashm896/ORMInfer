EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Desktop/current/dbridge_loop
starttime, test: 1678989542369
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.validation.Validator is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.ui.ModelMap is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: org.springframework.web.bind.annotation.ModelAttribute is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: java.util.Iterator is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: java.util.List is a phantom class!
Warning: org.springframework.web.bind.WebDataBinder is a phantom class!
Warning: org.springframework.web.bind.annotation.InitBinder is a phantom class!
Warning: org.springframework.util.StringUtils is a phantom class!
Warning: org.springframework.format.annotation.DateTimeFormat is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: org.springframework.beans.support.PropertyComparator is a phantom class!
Warning: java.util.LinkedHashSet is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: org.springframework.beans.support.MutableSortDefinition is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: org.springframework.beans.support.SortDefinition is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: java.time.LocalDate is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.validation.Errors is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: org.springframework.data.repository.Repository is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
Warning: javax.validation.constraints.NotEmpty is a phantom class!
Warning: javax.validation.constraints.Digits is a phantom class!
Warning: org.springframework.core.style.ToStringCreator is a phantom class!
Warning: javax.persistence.MappedSuperclass is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <more_than> (save (join <next> <class> <nop>) <list1>) <coll1>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <init_val> <more_than>) <list1>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Join
| | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:11
| | | Id:3
| | Id:9
| Id:11

{<coll1>=10, <class>=7, <more_than>=3, <list1>=9, <nop>=8, <init_val>=11, <itr>=13, <next>=6, <coll>=12}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (more_than <col1> <col2>) (+ <col3> <col4>) <col3>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (? (more_than <col1> <col2>) (+ <init_val> <col4>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | MoreThan
| | | | Any
| | | | Any
| | | ArithAdd
| | | | Any
| | | | Any
| | | Any
| Any
| Any
| Any


Ternary
| MoreThan
| | Id:18
| | Id:19
| ArithAdd
| | Id:24
| | Id:22
| Id:24

{<coll1>=10, <col3>=23, <class>=7, <col4>=22, <nop>=8, <init_val>=24, <itr>=26, <next>=6, <col1>=18, <more_than>=3, <list1>=9, <col2>=19, <coll>=25}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:40
| Eq
| | Id:32
| | Id:33

{<coll1>=10, <col3>=23, <class>=7, <col4>=22, <nop>=8, <init_val>=39, <itr>=41, <next>=6, <col1>=32, <more_than>=3, <list1>=9, <col2>=33, <coll>=40}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (= (? (= <col1> <col2>) (1Node) (0Node)) <col3>) (? (Neq (= <col4> <col5>) <col6>) (col7) (? (= (? (= <col8> <col9>) (1Node) (0Node)) <col10>) (? (Neq (= <col4> <col5>) <col6>) (col7) (col11)) (col11))) (col11))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (AND (OR (= <col1> <col2>) (Neq <col8> <col9>)) (= <col4> <col5>)))
Fold
| FuncExpr
| | Ternary
| | | Eq
| | | | Ternary
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Ternary
| | | | NotEq
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | Any
| | | | Ternary
| | | | | Eq
| | | | | | Ternary
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | Ternary
| | | | | | NotEq
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | Any
| Any
| Any
| Any


Select
| Id:80
| And
| | Or
| | | Eq
| | | | Id:48
| | | | Id:49
| | | NotEq
| | | | Id:64
| | | | Id:65
| | Eq
| | | Id:72
| | | Id:73

{<col9>=65, <coll1>=10, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <nop>=8, <init_val>=79, <itr>=81, <next>=6, <col1>=48, <more_than>=3, <list1>=9, <col2>=49, <coll>=80}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:92
| | Id:93
| Union
| | Project
| | | Select
| | | | Id:93
| | | | Id:85
| | | Id:88
| | Project
| | | Select
| | | | Id:93
| | | | Eq
| | | | | Id:85
| | | | | Zero
| | | Id:91

{<col9>=65, <coll1>=10, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=90, <cond>=85, <nop>=8, <init_val>=92, <itr>=94, <next>=6, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=93}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:103
| | | Id:98
| | Id:100
| Id:102

{<col9>=65, <coll1>=10, <list>=100, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=90, <cond>=98, <nop>=8, <init_val>=102, <itr>=104, <next>=6, <elseval>=101, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=103}
patternMatch.java: getUserInputRules: i=12
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:108
| | Select
| | | Id:108
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:116
| | | | | | Id:112
| | | | | Id
| Project
| | Id:114
| | Join
| | | Id:116
| | | Id:112

{<col9>=65, <coll1>=10, <list>=114, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=108, <cond>=98, <nop>=113, <init_val>=115, <join_right>=112, <itr>=117, <next>=6, <elseval>=101, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=116}
patternMatch.java: getUserInputRules: i=14
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:128
| | Select
| | | Id:124
| | | In
| | | | Id:126
| | | | Id:130
| Id:129

{<col8>=64, <rel>=124, <col6>=74, <class>=7, <col4>=72, <col10>=68, <repo>=108, <nop>=113, <init_val>=129, <itr>=131, <next>=6, <receiver>=121, <list2>=91, <more_than>=3, <col2>=49, <coll>=130, <col9>=65, <coll1>=10, <list>=128, <col5>=73, <col3>=52, <cond>=98, <clm>=126, <join_right>=112, <elseval>=101, <col1>=48, <list1>=88}
patternMatch.java: getUserInputRules: i=16
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:138
| | | In
| | | | Id:140
| | | | Id:144
| | Id:142
| Id:143

{<col8>=64, <rel>=138, <col6>=74, <class>=7, <col4>=72, <col10>=68, <repo>=108, <nop>=113, <init_val>=143, <itr>=145, <clmagg>=142, <next>=6, <receiver>=121, <aggvar>=135, <list2>=91, <more_than>=3, <col2>=49, <coll>=144, <col9>=65, <coll1>=10, <list>=128, <col5>=73, <col3>=52, <cond>=98, <clm>=140, <join_right>=112, <elseval>=101, <col1>=48, <list1>=88}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Desktop/current/dbridge_loop/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Desktop/current/dbridge_loop/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;
        java.util.Set $r4;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;
        java.util.Set $r4;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local: result
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: result
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: processCreationForm is Block 0:
[preds: ] [succs: 1 4 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;
result := @parameter2: org.springframework.validation.BindingResult;
model := @parameter3: org.springframework.ui.ModelMap;
$r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);
if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 1:
[preds: 0 ] [succs: 2 4 ]
$z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
$r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);
if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 3:
[preds: 2 ] [succs: 4 ]
interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

Block 4:
[preds: 0 1 2 3 ] [succs: 5 6 ]
virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);
$z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();
if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

Block 5:
[preds: 4 ] [succs: ]
virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);
return "pets/createOrUpdatePetForm";

Block 6:
[preds: 4 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);
return "redirect:/owners/{ownerId}";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
2 -> 4
4 -> 6
1 -> 4
0 -> 4
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
dfsVisit: start = 4
dfsVisit: start = 5
dfsVisit: start = 6
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [5, 6, 4, 3, 2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 5
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [5]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [5]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 5
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [5]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 6
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [6]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 6
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 6
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 6
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [6]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 6
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [6]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 4
StructuralAnalysis.java: replace(): v: 5
StructuralAnalysis.java: replace(): v: 6
StructuralAnalyis.java: compact(): compact: vset = [4, 5, 6]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 5, 6, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [5, 6, 4, 3, 2, 1, 0]
removeVertices: vset = [4, 5, 6]
removeVertices: v = 4
removeVertex: adj = {1=[2, 4], 2=[3, 4], 3=[4], 4=[5, 6], 5=[], 6=[], 0=[1, 4]}
removeVertex: incoming = {1=[0], 2=[1], 3=[2], 4=[0, 1, 2, 3], 5=[4], 6=[4], 0=[]}
removeVertex: v = 4
removeVertex: v2 = 0
removeVertex: v2 = 1
removeVertex: v2 = 2
removeVertex: v2 = 3
removeVertices: v = 5
removeVertex: adj = {1=[2], 2=[3], 3=[], 5=[], 6=[], 0=[1]}
removeVertex: incoming = {1=[0], 2=[1], 3=[2], 5=[], 6=[], 0=[]}
removeVertex: v = 5
removeVertices: v = 6
removeVertex: adj = {1=[2], 2=[3], 3=[], 6=[], 0=[1]}
removeVertex: incoming = {1=[0], 2=[1], 3=[2], 6=[], 0=[]}
removeVertex: v = 6
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 2, 3, R_IfThenElse0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0, 3, 2, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse0]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_IfThenElse0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_IfThenElse0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_IfThenElse0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_IfThenElse0]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_IfThenElse0
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_IfThenElse0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [2, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, R_IfThenElse0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_IfThenElse0, 3, 2, 1, 0]
removeVertices: vset = [2, 3]
removeVertices: v = 2
removeVertex: adj = {1=[2, R_IfThenElse0], 2=[3, R_IfThenElse0], 3=[R_IfThenElse0], R_IfThenElse0=[], 0=[1, R_IfThenElse0]}
removeVertex: incoming = {1=[0], 2=[1], 3=[2], R_IfThenElse0=[1, 2, 3, 0], 0=[]}
removeVertex: v = 2
removeVertex: v2 = 1
removeVertices: v = 3
removeVertex: adj = {1=[R_IfThenElse0], 3=[R_IfThenElse0], R_IfThenElse0=[], 0=[1, R_IfThenElse0]}
removeVertex: incoming = {1=[0], 3=[], R_IfThenElse0=[1, 3, 0], 0=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, R_IfThenElse0, R_IfThen1, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0, R_IfThen1, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_IfThen1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_IfThen1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_IfThen1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_IfThen1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_IfThen1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_IfThen1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen2
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: R_IfThen1
StructuralAnalyis.java: compact(): compact: vset = [1, R_IfThen1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, R_IfThenElse0, R_IfThen1, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_IfThenElse0, R_IfThen1, 1, 0]
removeVertices: vset = [1, R_IfThen1]
removeVertices: v = 1
removeVertex: adj = {1=[R_IfThenElse0, R_IfThen1], R_IfThenElse0=[], R_IfThen1=[R_IfThenElse0], 0=[1, R_IfThenElse0]}
removeVertex: incoming = {1=[0], R_IfThenElse0=[1, 0, R_IfThen1], R_IfThen1=[1], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertices: v = R_IfThen1
removeVertex: adj = {R_IfThenElse0=[], R_IfThen1=[R_IfThenElse0], 0=[R_IfThenElse0]}
removeVertex: incoming = {R_IfThenElse0=[0, R_IfThen1], R_IfThen1=[], 0=[]}
removeVertex: v = R_IfThen1
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_IfThenElse0, R_IfThen2, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0, R_IfThen2, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_IfThen2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_IfThen2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_IfThen2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_IfThen2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_IfThen2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_IfThen2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen3
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: R_IfThen2
StructuralAnalyis.java: compact(): compact: vset = [0, R_IfThen2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [R_IfThenElse0, R_IfThen2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_IfThenElse0, R_IfThen2, 0]
removeVertices: vset = [0, R_IfThen2]
removeVertices: v = 0
removeVertex: adj = {R_IfThenElse0=[], R_IfThen2=[R_IfThenElse0], 0=[R_IfThenElse0, R_IfThen2]}
removeVertex: incoming = {R_IfThenElse0=[0, R_IfThen2], R_IfThen2=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = R_IfThen2
removeVertex: adj = {R_IfThenElse0=[], R_IfThen2=[R_IfThenElse0]}
removeVertex: incoming = {R_IfThenElse0=[R_IfThen2], R_IfThen2=[]}
removeVertex: v = R_IfThen2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_IfThenElse0, R_IfThen3]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0, R_IfThen3]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen3, R_IfThenElse0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential4
StructuralAnalysis.java: replace(): v: R_IfThen3
StructuralAnalysis.java: replace(): v: R_IfThenElse0
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: g.vertices before: [R_IfThenElse0, R_IfThen3]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_IfThenElse0, R_IfThen3]
removeVertices: vset = [R_IfThen3, R_IfThenElse0]
removeVertices: v = R_IfThen3
removeVertex: adj = {R_IfThenElse0=[], R_IfThen3=[R_IfThenElse0]}
removeVertex: incoming = {R_IfThenElse0=[R_IfThen3], R_IfThen3=[]}
removeVertex: v = R_IfThen3
removeVertices: v = R_IfThenElse0
removeVertex: adj = {R_IfThenElse0=[]}
removeVertex: incoming = {R_IfThenElse0=[]}
removeVertex: v = R_IfThenElse0
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential4]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential4]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential4=[R_IfThen3, R_IfThenElse0], R_IfThenElse0=[4, 5, 6], R_IfThen1=[2, 3], R_IfThen2=[1, R_IfThen1], R_IfThen3=[0, R_IfThen2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen2, 2=R_IfThen1, 3=R_IfThen1, 4=R_IfThenElse0, 5=R_IfThenElse0, 6=R_IfThenElse0, R_IfThenElse0=R_Sequential4, R_IfThen1=R_IfThen2, R_IfThen2=R_IfThen3, R_IfThen3=R_Sequential4, 0=R_IfThen3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential4
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential4
|  +- R_IfThen3
|  |  +- 0
|  |  +- R_IfThen2
|  |  |  +- 1
|  |  |  +- R_IfThen1
|  |  |  |  +- 2
|  |  |  |  +- 3
|  +- R_IfThenElse0
|  |  +- 4
|  |  +- 5
|  |  +- 6

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 4 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;
result := @parameter2: org.springframework.validation.BindingResult;
model := @parameter3: org.springframework.ui.ModelMap;
$r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
$z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);
if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 1:
[preds: 0 ] [succs: 2 4 ]
$z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
$r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);
if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 3:
[preds: 2 ] [succs: 4 ]
interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

Block 4:
[preds: 0 1 2 3 ] [succs: 5 6 ]
virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);
$z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();
if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

Block 5:
[preds: 4 ] [succs: ]
virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);
return "pets/createOrUpdatePetForm";

Block 6:
[preds: 4 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);
return "redirect:/owners/{ownerId}";


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential4=[R_IfThen3, R_IfThenElse0], R_IfThenElse0=[4, 5, 6], R_IfThen1=[2, 3], R_IfThen2=[1, R_IfThen1], R_IfThen3=[0, R_IfThen2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen2, 2=R_IfThen1, 3=R_IfThen1, 4=R_IfThenElse0, 5=R_IfThenElse0, 6=R_IfThenElse0, R_IfThenElse0=R_Sequential4, R_IfThen1=R_IfThen2, R_IfThen2=R_IfThen3, R_IfThen3=R_Sequential4, 0=R_IfThen3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential4
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 5
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 5
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 5
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 6
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 6
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 6
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, 6=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock4, | BasicBlock5, | BasicBlock6]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, 6=BasicBlock, R_Sequential4=Sequential, R_IfThenElse0=IfThenElse, R_IfThen1=IfThen, R_IfThen2=IfThen, R_IfThen3=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential4
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | IfThen
| | | | BasicBlock1
| | | | IfThen
| | | | | BasicBlock2
| | | | | BasicBlock3
| | IfThenElse
| | | BasicBlock4
| | | BasicBlock5
| | | BasicBlock6

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| Sequential
| | IfThen
| | | BasicBlock0
| | | IfThen
| | | | BasicBlock1
| | | | IfThen
| | | | | BasicBlock2
| | | | | BasicBlock3
| | IfThenElse
| | | BasicBlock4
| | | BasicBlock5
| | | BasicBlock6

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
STATIC edge: $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0) in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>() in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
VIRTUAL edge: $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>() in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
VIRTUAL edge: $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>() in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1) in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>
VIRTUAL edge: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet) in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)> ==> <java.util.HashSet: void <init>()>
VIRTUAL edge: pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)> ==> <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
VIRTUAL edge: $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)> ==> <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
VIRTUAL edge: compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)> ==> <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>() in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
VIRTUAL edge: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this) in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
VIRTUAL edge: $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>() in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()> ==> <java.util.HashSet: void <init>()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.util.StringUtils: boolean hasLength(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: addPet
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Owner
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void addPet(org.springframework.samples.petclinic.owner.Pet)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        org.springframework.samples.petclinic.owner.Pet pet;
        boolean $z0;
        java.util.Set $r0;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label1:
        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: addPet is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
$z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

Block 1:
[preds: 0 ] [succs: 2 ]
$r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0, 1], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2], 2=[]}
removeVertex: incoming = {1=[], 2=[1]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [2, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 2]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[], R_IfThen0=[2]}
removeVertex: incoming = {2=[R_IfThen0], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThen0
|  |  +- 0
|  |  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
$z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

Block 1:
[preds: 0 ] [succs: 2 ]
$r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getPetUpdated
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Owner
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Set getPetUpdated(java.lang.String, boolean)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.lang.String nameParam, compName;
        boolean ignoreNew, $z0, $z1, $z3;
        java.util.HashSet 'ret', $r0;
        java.util.Set pets;
        java.util.Iterator l5;
        org.springframework.samples.petclinic.owner.Pet pet;
        java.lang.Object $r1;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        nameParam := @parameter0: java.lang.String;

        ignoreNew := @parameter1: boolean;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        'ret' = $r0;

        pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        pet = (org.springframework.samples.petclinic.owner.Pet) $r1;

        if ignoreNew == 0 goto label2;

        $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z3 != 0 goto label3;

     label2:
        compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam);

        if $z1 == 0 goto label3;

        interfaceinvoke 'ret'.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label3:
        goto label1;

     label4:
        return 'ret';
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: nameParam
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: nameParam
FuncStackInfoBuilder.java: regionTreeForBody(): local: ignoreNew
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: ignoreNew
FuncStackInfoBuilder.java: regionTreeForBody(): local: ret
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: ret
FuncStackInfoBuilder.java: regionTreeForBody(): local: pets
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pets
FuncStackInfoBuilder.java: regionTreeForBody(): local: l5
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l5
FuncStackInfoBuilder.java: regionTreeForBody(): local: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z3
FuncStackInfoBuilder.java: regionTreeForBody(): local: compName
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: compName
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getPetUpdated is Block 0:
[preds: ] [succs: 1 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
nameParam := @parameter0: java.lang.String;
ignoreNew := @parameter1: boolean;
$r0 = new java.util.HashSet;
specialinvoke $r0.<java.util.HashSet: void <init>()>();
ret = $r0;
pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>();

Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return ret;

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();
pet = (org.springframework.samples.petclinic.owner.Pet) $r1;
if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

Block 3:
[preds: 2 ] [succs: 4 6 ]
$z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z3 != 0 goto (branch);

Block 4:
[preds: 2 3 ] [succs: 5 6 ]
compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>();
$z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam);
if $z1 == 0 goto (branch);

Block 5:
[preds: 4 ] [succs: 6 ]
interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()];

Block 7:
[preds: 1 ] [succs: ]
return ret;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
2 -> 4
4 -> 6
3 -> 6
1 -> 7
6 -> 1
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
dfsVisit: start = 4
dfsVisit: start = 5
dfsVisit: start = 6
dfsVisit: start = 7
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [6, 5, 4, 3, 2, 7, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 6
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 6
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [6]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 6
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 6
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 6
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [6]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 6
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [6]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 5
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 5
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [5]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [5]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 5
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [5]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 4
StructuralAnalysis.java: replace(): v: 5
StructuralAnalyis.java: compact(): compact: vset = [4, 5]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 5, 6, 7, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [6, 5, 4, 3, 2, 7, 1, 0]
removeVertices: vset = [4, 5]
removeVertices: v = 4
removeVertex: adj = {1=[2, 7], 2=[3, 4], 3=[4, 6], 4=[5, 6], 5=[6], 6=[1], 7=[], 0=[1]}
removeVertex: incoming = {1=[0, 6], 2=[1], 3=[2], 4=[2, 3], 5=[4], 6=[3, 4, 5], 7=[1], 0=[]}
removeVertex: v = 4
removeVertex: v2 = 2
removeVertex: v2 = 3
removeVertices: v = 5
removeVertex: adj = {1=[2, 7], 2=[3], 3=[6], 5=[6], 6=[1], 7=[], 0=[1]}
removeVertex: incoming = {1=[0, 6], 2=[1], 3=[2], 5=[], 6=[3, 5], 7=[1], 0=[]}
removeVertex: v = 5
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 2, 3, 6, 7, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [6, R_IfThen0, 3, 2, 7, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_IfThen0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_IfThen0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_IfThen0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_IfThen0]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_IfThen0
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_IfThen0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen1
StructuralAnalysis.java: replace(): v: 3
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalyis.java: compact(): compact: vset = [3, R_IfThen0]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 6, 7, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [6, R_IfThen0, 3, 2, 7, 1, 0]
removeVertices: vset = [3, R_IfThen0]
removeVertices: v = 3
removeVertex: adj = {1=[2, 7], 2=[3, R_IfThen0], 3=[6, R_IfThen0], 6=[1], 7=[], R_IfThen0=[6], 0=[1]}
removeVertex: incoming = {1=[0, 6], 2=[1], 3=[2], 6=[3, R_IfThen0], 7=[1], R_IfThen0=[2, 3], 0=[]}
removeVertex: v = 3
removeVertex: v2 = 2
removeVertices: v = R_IfThen0
removeVertex: adj = {1=[2, 7], 2=[R_IfThen0], 6=[1], 7=[], R_IfThen0=[6], 0=[1]}
removeVertex: incoming = {1=[0, 6], 2=[1], 6=[R_IfThen0], 7=[1], R_IfThen0=[2], 0=[]}
removeVertex: v = R_IfThen0
removeVertex: v2 = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 2, 6, 7, R_IfThen1, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [6, R_IfThen1, 2, 7, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen, R_IfThen1=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen1
StructuralAnalysis.java: acyclicRegionType(): currVer = 6
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2, R_IfThen1, 6]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential2
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: R_IfThen1
StructuralAnalysis.java: replace(): v: 6
StructuralAnalyis.java: compact(): compact: vset = [2, R_IfThen1, 6]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 6, 7, R_IfThen1, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [6, R_IfThen1, 2, 7, 1, 0]
removeVertices: vset = [2, R_IfThen1, 6]
removeVertices: v = 2
removeVertex: adj = {1=[2, 7], 2=[R_IfThen1], 6=[1], 7=[], R_IfThen1=[6], 0=[1]}
removeVertex: incoming = {1=[0, 6], 2=[1], 6=[R_IfThen1], 7=[1], R_IfThen1=[2], 0=[]}
removeVertex: v = 2
removeVertex: v2 = 1
removeVertices: v = R_IfThen1
removeVertex: adj = {1=[7], 6=[1], 7=[], R_IfThen1=[6], 0=[1]}
removeVertex: incoming = {1=[0, 6], 6=[R_IfThen1], 7=[1], R_IfThen1=[], 0=[]}
removeVertex: v = R_IfThen1
removeVertices: v = 6
removeVertex: adj = {1=[7], 6=[1], 7=[], 0=[1]}
removeVertex: incoming = {1=[0, 6], 6=[], 7=[1], 0=[]}
removeVertex: v = 6
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, R_Sequential2, 7, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential2, 7, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen, R_IfThen1=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential2=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_Sequential2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_Sequential2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_Sequential2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_Sequential2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_Sequential2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_Sequential2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_Sequential2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_Sequential2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_Sequential2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 7
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [7]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 7
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 7
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 7
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [7]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 7
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [7]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: [R_Sequential2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1, R_Sequential2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1, R_Sequential2]
dfsVisit: start = 1
dfsVisit: start = 7
dfsVisit: start = R_Sequential2
StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_WhileLoop3
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: R_Sequential2
StructuralAnalyis.java: compact(): compact: vset = [1, R_Sequential2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, R_Sequential2, 7, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_Sequential2, 7, 1, 0]
removeVertices: vset = [1, R_Sequential2]
removeVertices: v = 1
removeVertex: adj = {1=[7, R_Sequential2], R_Sequential2=[1], 7=[], 0=[1]}
removeVertex: incoming = {1=[0, R_Sequential2], R_Sequential2=[1], 7=[1], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertex: v2 = R_Sequential2
removeVertices: v = R_Sequential2
removeVertex: adj = {R_Sequential2=[], 7=[], 0=[]}
removeVertex: incoming = {R_Sequential2=[], 7=[], 0=[]}
removeVertex: v = R_Sequential2
StructuralAnalyis.java: compact(): compact: g.vertices after: [7, R_WhileLoop3, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [7, R_WhileLoop3, 0]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential2=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential2=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_WhileLoop3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_WhileLoop3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0, R_WhileLoop3, 7]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential4
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: R_WhileLoop3
StructuralAnalysis.java: replace(): v: 7
StructuralAnalyis.java: compact(): compact: vset = [0, R_WhileLoop3, 7]
StructuralAnalyis.java: compact(): compact: g.vertices before: [7, R_WhileLoop3, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [7, R_WhileLoop3, 0]
removeVertices: vset = [0, R_WhileLoop3, 7]
removeVertices: v = 0
removeVertex: adj = {7=[], R_WhileLoop3=[7], 0=[R_WhileLoop3]}
removeVertex: incoming = {7=[R_WhileLoop3], R_WhileLoop3=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = R_WhileLoop3
removeVertex: adj = {7=[], R_WhileLoop3=[7]}
removeVertex: incoming = {7=[R_WhileLoop3], R_WhileLoop3=[]}
removeVertex: v = R_WhileLoop3
removeVertices: v = 7
removeVertex: adj = {7=[]}
removeVertex: incoming = {7=[]}
removeVertex: v = 7
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential4]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential4]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential2=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential2=[2, R_IfThen1, 6], R_Sequential4=[0, R_WhileLoop3, 7], R_IfThen0=[4, 5], R_IfThen1=[3, R_IfThen0], R_WhileLoop3=[1, R_Sequential2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop3, 2=R_Sequential2, 3=R_IfThen1, 4=R_IfThen0, 5=R_IfThen0, 6=R_Sequential2, R_Sequential2=R_WhileLoop3, 7=R_Sequential4, R_IfThen0=R_IfThen1, R_IfThen1=R_Sequential2, R_WhileLoop3=R_Sequential4, 0=R_Sequential4}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential4
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential4
|  +- 0
|  +- R_WhileLoop3
|  |  +- 1
|  |  +- R_Sequential2
|  |  |  +- 2
|  |  |  +- R_IfThen1
|  |  |  |  +- 3
|  |  |  |  +- R_IfThen0
|  |  |  |  |  +- 4
|  |  |  |  |  +- 5
|  |  |  +- 6
|  +- 7

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
nameParam := @parameter0: java.lang.String;
ignoreNew := @parameter1: boolean;
$r0 = new java.util.HashSet;
specialinvoke $r0.<java.util.HashSet: void <init>()>();
ret = $r0;
pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>();

Block 1:
[preds: 0 6 ] [succs: 2 7 ]
$z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return ret;

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();
pet = (org.springframework.samples.petclinic.owner.Pet) $r1;
if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

Block 3:
[preds: 2 ] [succs: 4 6 ]
$z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z3 != 0 goto (branch);

Block 4:
[preds: 2 3 ] [succs: 5 6 ]
compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();
compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>();
$z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam);
if $z1 == 0 goto (branch);

Block 5:
[preds: 4 ] [succs: 6 ]
interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 6:
[preds: 3 4 5 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()];

Block 7:
[preds: 1 ] [succs: ]
return ret;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential2=[2, R_IfThen1, 6], R_Sequential4=[0, R_WhileLoop3, 7], R_IfThen0=[4, 5], R_IfThen1=[3, R_IfThen0], R_WhileLoop3=[1, R_Sequential2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop3, 2=R_Sequential2, 3=R_IfThen1, 4=R_IfThen0, 5=R_IfThen0, 6=R_Sequential2, R_Sequential2=R_WhileLoop3, 7=R_Sequential4, R_IfThen0=R_IfThen1, R_IfThen1=R_Sequential2, R_WhileLoop3=R_Sequential4, 0=R_Sequential4}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential4
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 5
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 5
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 5
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 6
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 6
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 6
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, 6=BasicBlock, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, 6=BasicBlock, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_WhileLoop3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
LoopRegion created
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, R_Sequential2=Sequential, 6=BasicBlock, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 7
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 7
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 7
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential2=Sequential, R_Sequential4=Sequential, R_IfThen0=IfThen, R_IfThen1=IfThen, R_WhileLoop3=WhileLoop, 0=BasicBlock, 1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, 5=BasicBlock, 6=BasicBlock, 7=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential4
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | Sequential
| | | | BasicBlock2
| | | | IfThen
| | | | | BasicBlock3
| | | | | IfThen
| | | | | | BasicBlock4
| | | | | | BasicBlock5
| | | | BasicBlock6
| | BasicBlock7

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getName
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.model.NamedEntity
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String getName()
    {
        org.springframework.samples.petclinic.model.NamedEntity this;
        java.lang.String $r0;

        this := @this: org.springframework.samples.petclinic.model.NamedEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getName is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.model.NamedEntity;
$r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.model.NamedEntity;
$r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: isNew
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.model.BaseEntity
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public boolean isNew()
    {
        org.springframework.samples.petclinic.model.BaseEntity this;
        java.lang.Integer $r0;
        boolean $z0;

        this := @this: org.springframework.samples.petclinic.model.BaseEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: isNew is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.model.BaseEntity;
$r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;
if $r0 != null goto $z0 = 0;

Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= return $z0];

Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;

Block 3:
[preds: 1 2 ] [succs: ]
return $z0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
2 -> 3
0 -> 2
1 -> 3
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 3
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [3, 1, 2, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [0, 1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 3
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, 1, 2, 0]
removeVertices: vset = [0, 1, 2]
removeVertices: v = 0
removeVertex: adj = {1=[3], 2=[3], 3=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0], 3=[1, 2], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[3], 2=[3], 3=[]}
removeVertex: incoming = {1=[], 2=[], 3=[1, 2]}
removeVertex: v = 1
removeVertices: v = 2
removeVertex: adj = {2=[3], 3=[]}
removeVertex: incoming = {2=[], 3=[2]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [3, R_IfThenElse0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse0, 3]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [R_IfThenElse0, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, R_IfThenElse0]
removeVertices: vset = [R_IfThenElse0, 3]
removeVertices: v = R_IfThenElse0
removeVertex: adj = {3=[], R_IfThenElse0=[3]}
removeVertex: incoming = {3=[R_IfThenElse0], R_IfThenElse0=[]}
removeVertex: v = R_IfThenElse0
removeVertices: v = 3
removeVertex: adj = {3=[]}
removeVertex: incoming = {3=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThenElse0
|  |  +- 0
|  |  +- 1
|  |  +- 2
|  +- 3

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.model.BaseEntity;
$r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;
if $r0 != null goto $z0 = 0;

Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= return $z0];

Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;

Block 3:
[preds: 1 2 ] [succs: ]
return $z0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock1, | BasicBlock2]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThenElse
| | | BasicBlock0
| | | BasicBlock1
| | | BasicBlock2
| | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getPetsInternal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Owner
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    protected java.util.Set getPetsInternal()
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.util.Set $r0, $r1;
        java.util.HashSet $r2;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        if $r0 != null goto label1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getPetsInternal is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
$r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.HashSet;
specialinvoke $r2.<java.util.HashSet: void <init>()>();
this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0, 1], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2], 2=[]}
removeVertex: incoming = {1=[], 2=[1]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [2, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 2]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[], R_IfThen0=[2]}
removeVertex: incoming = {2=[R_IfThen0], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThen0
|  |  +- 0
|  |  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
$r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.HashSet;
specialinvoke $r2.<java.util.HashSet: void <init>()>();
this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Pet
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    protected void setOwner(org.springframework.samples.petclinic.owner.Owner)
    {
        org.springframework.samples.petclinic.owner.Pet this;
        org.springframework.samples.petclinic.owner.Owner owner;

        this := @this: org.springframework.samples.petclinic.owner.Pet;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: owner
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setOwner is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.Pet;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.Pet;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Pet, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.HashSet: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.HashSet: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
FuncStackInfoBuilder.java: internalTransformHelper(): {org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=    protected java.util.Set getPetsInternal()
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.util.Set $r0, $r1;
        java.util.HashSet $r2;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        if $r0 != null goto label1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        return $r1;
    }
, org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)=    protected void setOwner(org.springframework.samples.petclinic.owner.Owner)
    {
        org.springframework.samples.petclinic.owner.Pet this;
        org.springframework.samples.petclinic.owner.Owner owner;

        this := @this: org.springframework.samples.petclinic.owner.Pet;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;

        return;
    }
, org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)=    public void addPet(org.springframework.samples.petclinic.owner.Pet)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        org.springframework.samples.petclinic.owner.Pet pet;
        boolean $z0;
        java.util.Set $r0;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label1:
        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

        return;
    }
, org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)=    public java.util.Set getPetUpdated(java.lang.String, boolean)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.lang.String nameParam, compName;
        boolean ignoreNew, $z0, $z1, $z3;
        java.util.HashSet 'ret', $r0;
        java.util.Set pets;
        java.util.Iterator l5;
        org.springframework.samples.petclinic.owner.Pet pet;
        java.lang.Object $r1;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        nameParam := @parameter0: java.lang.String;

        ignoreNew := @parameter1: boolean;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        'ret' = $r0;

        pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        pet = (org.springframework.samples.petclinic.owner.Pet) $r1;

        if ignoreNew == 0 goto label2;

        $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z3 != 0 goto label3;

     label2:
        compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam);

        if $z1 == 0 goto label3;

        interfaceinvoke 'ret'.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label3:
        goto label1;

     label4:
        return 'ret';
    }
, org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)=    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;
        java.util.Set $r4;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }
, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=    public boolean isNew()
    {
        org.springframework.samples.petclinic.model.BaseEntity this;
        java.lang.Integer $r0;
        boolean $z0;

        this := @this: org.springframework.samples.petclinic.model.BaseEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=    public java.lang.String getName()
    {
        org.springframework.samples.petclinic.model.NamedEntity this;
        java.lang.String $r0;

        this := @this: org.springframework.samples.petclinic.model.NamedEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;

        return $r0;
    }
}

Decompiling org.springframework.samples.petclinic.owner.PetController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void <init>(org.springframework.samples.petclinic.owner.PetRepository,org.springframework.samples.petclinic.owner.OwnerRepository)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.samples.petclinic.owner.PetRepository, org.springframework.samples.petclinic.owner.OwnerRepository)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository pets;
        org.springframework.samples.petclinic.owner.OwnerRepository owners;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pets := @parameter0: org.springframework.samples.petclinic.owner.PetRepository;

        owners := @parameter1: org.springframework.samples.petclinic.owner.OwnerRepository;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets> = pets;

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners> = owners;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.Collection populatePetTypes()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: populatePetTypes
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Collection populatePetTypes()
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.util.List $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.Owner findOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.samples.petclinic.owner.Owner findOwner(int)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int ownerId;
        org.springframework.samples.petclinic.owner.OwnerRepository $r0;
        java.lang.Integer $r1;
        org.springframework.samples.petclinic.owner.Owner $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        ownerId := @parameter0: int;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        $r2 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r1);

        return $r2;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initOwnerBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initOwnerBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initOwnerBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        java.lang.String[] $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "id";

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setDisallowedFields(java.lang.String[])>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initPetBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initPetBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initPetBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        org.springframework.samples.petclinic.owner.PetValidator $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = new org.springframework.samples.petclinic.owner.PetValidator;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.PetValidator: void <init>()>();

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setValidator(org.springframework.validation.Validator)>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet, $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = new org.springframework.samples.petclinic.owner.Pet;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.Pet: void <init>()>();

        pet = $r0;

        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>($r0);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", $r0);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;
        java.util.Set $r4;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initUpdateForm(int,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initUpdateForm(int, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int petId;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.lang.Integer $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        petId := @parameter0: int;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(petId);

        pet = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: org.springframework.samples.petclinic.owner.Pet findById(java.lang.Integer)>($r1);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: loop10
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator var4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        var4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke var4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke var4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName(), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)has typemap: {}
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock0
| | IfThen
| | | BasicBlock1
| | | IfThen
| | | | BasicBlock2
| | | | BasicBlock3
, | IfThenElse
| | BasicBlock4
| | BasicBlock5
| | BasicBlock6
]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | IfThen
| | BasicBlock1
| | IfThen
| | | BasicBlock2
| | | BasicBlock3

ARegion.java: analyze(): set cur method of analyzer to: processCreationForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.PetController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = owner := @parameter0: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): curUnit = pet := @parameter1: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): curUnit = result := @parameter2: org.springframework.validation.BindingResult
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter3: org.springframework.ui.ModelMap
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.NamedEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.name
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.name
~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.String
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.String
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $r0
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.NamedEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getName, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.name
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: pet.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JStaticInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = hasLength
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.util.StringUtils: boolean hasLength(java.lang.String)
construct/Utils.java: parseInvokeExpr(): JstaticInvokeExpr
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>
Utils.java: parseStaticInvoke(): parseStaticInvoke: name: hasLength
Utils.java: parseStaticInvoke(): FuncStackAnalyzer.funcRegionMap.domain: 
Utils.java: parseStaticInvoke(): [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
Utils.java: parseStaticInvoke(): method wont handle 2
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
pet.name

~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
pet.name

~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=pet.name
DIR.java: updateRegion(): update region entry: condition=Equals
| MethodWontHandleOp
| 0
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=MethodWontHandleOp
~~~ $r0 ~~~
pet.name

~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock1
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | IfThen
| | BasicBlock2
| | BasicBlock3

ARegion.java: analyze(): set cur method of analyzer to: processCreationForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isNew
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: boolean isNew()>
construct/Utils.java: parseObjectInvoke(): methodName = isNew
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2
, | BasicBlock3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenElseRegion
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.BaseEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $z0 = 0
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= return $z0]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
1


DIR.java: updateRegion(): update region entry: $z0=1
~~~ $z0 ~~~
1


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
0


DIR.java: updateRegion(): update region entry: $z0=0
~~~ $z0 ~~~
0


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, $r0, condition, $z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, $r0=this.id, condition=NotEq
| this.id
| NullOp, $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: this.id
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: this.id
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $z0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$z0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$z0


DIR.java: updateRegion(): update region entry: return=$z0
~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir domain: [return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {return=$z0}
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: $z0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: $z0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock3
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$z0


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


{$r0=this.name, condition=Equals
| MethodWontHandleOp
| 0, this=Self, $z0=MethodWontHandleOp, return=this.name}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = boolean
DIRRegionAnalyzer.java: constructDIR(): leftType : boolean
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $z1
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: isNew
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.BaseEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $r0, condition, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = isNew, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z1 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z1 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: $z1=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
~~~ $z1 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock2
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock3
ARegion.java: analyze(): set cur method of analyzer to: processCreationForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, pet := @parameter1: org.springframework.samples.petclinic.owner.Pet, result := @parameter2: org.springframework.validation.BindingResult, model := @parameter3: org.springframework.ui.ModelMap, $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z1 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1), if $r4 == null goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists"), virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z2 == 0 goto $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.NamedEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.name
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.name
~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.String
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.String
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $r3
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.NamedEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getName, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.name
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: pet.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getPetUpdated
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)
construct/Utils.java: parseObjectInvoke(): virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>
construct/Utils.java: parseObjectInvoke(): methodName = getPetUpdated
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1)
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| BasicBlock0, | WhileLoop
| | BasicBlock1
| | Sequential
| | | BasicBlock2
| | | IfThen
| | | | BasicBlock3
| | | | IfThen
| | | | | BasicBlock4
| | | | | BasicBlock5
| | | BasicBlock6
, | BasicBlock7]
DIRSequentialRegionAnalyzerN.java: constructDIR(): Break point!
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.Owner
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = nameParam := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = ignoreNew := @parameter1: boolean
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new java.util.HashSet
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.HashSet: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = ret = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: ret
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): curUnit = pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getPetsInternal
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
construct/Utils.java: parseObjectInvoke(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
construct/Utils.java: parseObjectInvoke(): methodName = getPetsInternal
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock0
| | BasicBlock1
, | BasicBlock2]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock1
ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.Owner
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new java.util.HashSet
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r2.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r2.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.HashSet: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.pets -> BottomNode
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


DIR.java: updateRegion(): update region entry: this.pets=BottomNode
DIR.java: updateRegion(): update region entry: $r2=BottomNode
~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.pets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.pets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [this.pets, $r2]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2}
analysis/Utils.java: mergeSeqDirs(): key: this.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: $r2
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, this.pets, $r0, condition, $r2]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, $r0=this.pets, condition=NotEq
| this.pets
| NullOp, $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: this.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): after resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.pets
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.pets
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: $r2
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


DIR.java: updateRegion(): update region entry: $r1=this.pets
DIR.java: updateRegion(): update region entry: return=this.pets
~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [$r1, return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$r1=this.pets, return=this.pets}
analysis/Utils.java: mergeSeqDirs(): key: $r1
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock2
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


{this.pets=BottomNode, $r0=this.name, condition=Equals
| MethodWontHandleOp
| 0, $r1=this.pets, $r2=BottomNode, this=Self, $z0=MethodWontHandleOp, $z1=?
| Equals
| | pet.id
| | NullOp
| 1
| 0, return=this.name}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: $r1=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.Set
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Pet
AccessPath.java: getCollectionEntityType(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Pet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: pets
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: isReturnTypeEntity(): check :java.util.Set
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Pet
AccessPath.java: getCollectionEntityType(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Pet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): java.util.Set
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Set
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Pet.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: pets

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getPetsInternal
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: this
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getPetsInternal, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: this
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: typeId]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: ownerId]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= petId
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = pets, org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [pets.birthDate, pets.type, pets.type.name, pets.type.id, pets.owner, pets.owner.address, pets.owner.city, pets.owner.telephone, pets.owner.pets, pets.owner.firstName, pets.owner.lastName, pets.owner.id, pets.visits, pets.name, pets.id]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): key = this.pets
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.pets
DIRRegionAnalyzer.java: constructDIR(): key = condition
DIRRegionAnalyzer.java: constructDIR(): val = NotEq
| this.pets
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): key = $r2
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = $z0
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal() END
DIRRegionAnalyzer.java: constructDIR(): curUnit = l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Set: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Set: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Set: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Set: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): l5
Utils.java: getVarNode(): LinkedVariableBox(l5)
JAssignStmtCons.java: construct(): interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Set: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Set: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Set: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Set: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
BottomNode

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ ret ~~~
$r0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
BottomNode

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ ret ~~~
$r0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: ret=$r0
DIR.java: updateRegion(): update region entry: pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=BottomNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: l5=InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()
~~~ $r0 ~~~
BottomNode

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ ret ~~~
$r0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [ret, pets, $r0, this, l5]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
BottomNode

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ ret ~~~
$r0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {ret=$r0, pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, $r0=BottomNode, this=Self, l5=InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator()}
analysis/Utils.java: mergeSeqDirs(): key: ret
analysis/Utils.java: mergeSeqDirs(): before resolution: $r0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: $r0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): key: pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): top: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: Equals
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: BottomNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: BottomNode
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: l5
analysis/Utils.java: mergeSeqDirs(): before resolution: InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| Iterator()
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| Iterator()
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| Iterator()
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Iterator()
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:FuncParams
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FuncParams
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Iterator()
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): top: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: Equals
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): top: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): new top: Equals
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): out: InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock0
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
BottomNode

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
$r0

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.LoopRegion
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop head
ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto return ret
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
InvokeMethod
| l5
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l5
| | HasNext()
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
InvokeMethod
| l5
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l5
| | HasNext()
| 0


DIR.java: updateRegion(): update region entry: condition=Equals
| InvokeMethod
| | l5
| | HasNext()
| 0
DIR.java: updateRegion(): update region entry: $z0=InvokeMethod
| l5
| HasNext()
~~~ $z0 ~~~
InvokeMethod
| l5
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l5
| | HasNext()
| 0


DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop body
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| BasicBlock2, | IfThen
| | BasicBlock3
| | IfThen
| | | BasicBlock4
| | | BasicBlock5
, | BasicBlock6]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $r1
Utils.java: getVarNode(): LinkedVariableBox($r1)
JAssignStmtCons.java: construct(): interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): curUnit = pet = (org.springframework.samples.petclinic.owner.Pet) $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): castExpr: (org.springframework.samples.petclinic.owner.Pet) $r1
DIRRegionAnalyzer.java: constructDIR(): v2: $r1
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r1=NextOp}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
DIRRegionAnalyzer.java: constructDIR(): CASE: actual_iterator = (type1) it
DIRRegionAnalyzer.java: constructDIR(): rightVar's value in dir: NextOp
DIRRegionAnalyzer.java: constructDIR(): check : Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): check : Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): flattenedIterator = [pet.birthDate, pet.name, pet.id]
DIRRegionAnalyzer.java: constructDIR(): dir: {pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp, pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), $r1=NextOp, pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id), pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address), pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp, pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id), pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city), pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name)}
DIRRegionAnalyzer.java: constructDIR(): curUnit = if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()ignoreNew == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
NextOp

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
NextOp

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIR.java: updateRegion(): update region entry: pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
DIR.java: updateRegion(): update region entry: pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
DIR.java: updateRegion(): update region entry: $r1=NextOp
DIR.java: updateRegion(): update region entry: pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
DIR.java: updateRegion(): update region entry: pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
DIR.java: updateRegion(): update region entry: pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
DIR.java: updateRegion(): update region entry: pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
DIR.java: updateRegion(): update region entry: pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
DIR.java: updateRegion(): update region entry: pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
DIR.java: updateRegion(): update region entry: pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: condition=Equals
| ignoreNew
| 0
DIR.java: updateRegion(): update region entry: pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
DIR.java: updateRegion(): update region entry: pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
DIR.java: updateRegion(): update region entry: pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
~~~ $r1 ~~~
NextOp

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: mergeSeqDirs(): following dir domain: [pet.type, pet.birthDate, $r1, pet.owner.id, pet.owner.telephone, pet.type.id, pet.owner.address, pet.owner, pet.id, pet.owner.firstName, pet.type.name, condition, pet.owner.lastName, pet.owner.city, pet.name]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r1 ~~~
NextOp

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp, pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), $r1=NextOp, pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id), pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address), pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp, pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id), pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), condition=Equals
| ignoreNew
| 0, pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city), pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name)}
analysis/Utils.java: mergeSeqDirs(): key: pet.type
analysis/Utils.java: mergeSeqDirs(): before resolution: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(org.springframework.samples.petclinic.owner.PetType)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(org.springframework.samples.petclinic.owner.PetType)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): out: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: pet.birthDate
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
analysis/Utils.java: mergeSeqDirs(): key: $r1
analysis/Utils.java: mergeSeqDirs(): before resolution: NextOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: NextOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: NextOp
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.id
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
analysis/Utils.java: mergeSeqDirs(): key: pet.type.id
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.address
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
analysis/Utils.java: mergeSeqDirs(): key: pet.owner
analysis/Utils.java: mergeSeqDirs(): before resolution: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(org.springframework.samples.petclinic.owner.Owner)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(org.springframework.samples.petclinic.owner.Owner)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): out: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: pet.id
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
analysis/Utils.java: mergeSeqDirs(): key: pet.type.name
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: Equals
| ignoreNew
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Equals
| ignoreNew
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ignoreNew
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:ignoreNew
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ignoreNew
analysis/Utils.java: resolveTree(): out: Equals
| ignoreNew
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: Equals
| ignoreNew
| 0
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.city
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
analysis/Utils.java: mergeSeqDirs(): key: pet.name
analysis/Utils.java: mergeSeqDirs(): before resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock2
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r1 ~~~
NextOp

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock3
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | IfThen
| | BasicBlock4
| | BasicBlock5

ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isNew
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: boolean isNew()>
construct/Utils.java: parseObjectInvoke(): methodName = isNew
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2
, | BasicBlock3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenElseRegion
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.BaseEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $z0 = 0
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= return $z0]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
1


DIR.java: updateRegion(): update region entry: $z0=1
~~~ $z0 ~~~
1


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
0


DIR.java: updateRegion(): update region entry: $z0=0
~~~ $z0 ~~~
0


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, $r0, condition, $z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, $r0=this.id, condition=NotEq
| this.id
| NullOp, $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.id
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.id
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ignoreNew
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $z0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$z0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$z0


DIR.java: updateRegion(): update region entry: return=$z0
~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir domain: [return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {return=$z0}
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: $z0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: $z0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock3
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$z0


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


{pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id), pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp, l5=InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator(), pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), $z0=MethodWontHandleOp, $z1=?
| Equals
| | pet.id
| | NullOp
| 1
| 0, this.pets=BottomNode, ret=$r0, pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp, $r0=this.name, pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), $r1=this.pets, $r2=BottomNode, pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address), this=Self, pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id), condition=Equals
| MethodWontHandleOp
| 0, pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city), pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name), return=this.name}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: pets=?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
DIR.java: updateRegion(): update region entry: pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
DIR.java: updateRegion(): update region entry: pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
DIR.java: updateRegion(): update region entry: l5=InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()
DIR.java: updateRegion(): update region entry: pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
DIR.java: updateRegion(): update region entry: pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: ret=this.pets
DIR.java: updateRegion(): update region entry: pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
DIR.java: updateRegion(): update region entry: $r1=NextOp
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIR.java: updateRegion(): update region entry: pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
DIR.java: updateRegion(): update region entry: pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
DIR.java: updateRegion(): update region entry: pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
DIR.java: updateRegion(): update region entry: pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = boolean
DIRRegionAnalyzer.java: constructDIR(): leftType : boolean
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $z3
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: isNew
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.BaseEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [pets, pet.owner.id, pet.owner, l5, pet.owner.firstName, pet.type.name, $z0, this.pets, ret, pet.type, $r0, pet.birthDate, $r1, $r2, pet.owner.telephone, pet.type.id, pet.owner.address, this, pet.id, condition, pet.owner.lastName, pet.owner.city, pet.name, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = isNew, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z3 != 0 goto (branch)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z3 != 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIR.java: updateRegion(): update region entry: condition=NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: $z3=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock4
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock5
ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 4
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.NamedEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.name
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.name
~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.String
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.String
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: compName
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.NamedEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getName, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.name
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: pet.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = toLowerCase
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: java.lang.String toLowerCase()
construct/Utils.java: parseObjectInvoke(): virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: java.lang.String toLowerCase()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: java.lang.String toLowerCase()>
construct/Utils.java: parseObjectInvoke(): methodName = toLowerCase
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: java.lang.String toLowerCase()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean), org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): method wont handle 4
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z1
Utils.java: getVarNode(): LinkedVariableBox($z1)
JAssignStmtCons.java: construct(): virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z1 == 0 goto (branch)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z1 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
DIR.java: updateRegion(): update region entry: $z1=Equals
| MethodWontHandleOp
| nameParam
DIR.java: updateRegion(): update region entry: compName=MethodWontHandleOp
~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock5
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 5
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock5
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ ret ~~~
UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ ret ~~~
UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id


DIR.java: updateRegion(): update region entry: ret=UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
~~~ ret ~~~
UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ ret ~~~
UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [ret]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {ret=?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret}
analysis/Utils.java: mergeSeqDirs(): key: ret
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): dir: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ret
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ret
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0

~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock4
| | BasicBlock5

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0

~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0

~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


DIR.java: updateRegion(): update region entry: ret=?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
DIR.java: updateRegion(): update region entry: $z1=Equals
| MethodWontHandleOp
| nameParam
DIR.java: updateRegion(): update region entry: compName=MethodWontHandleOp
~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0

~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $z1 ~~~
Equals
| MethodWontHandleOp
| nameParam

~~~ compName ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0

~~~ ret ~~~
?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [ret, condition, $z1, compName]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {ret=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret, condition=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition, $z1=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1, compName=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName}
analysis/Utils.java: mergeSeqDirs(): key: ret
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): dir: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ret
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ret
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ret
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition
analysis/Utils.java: resolveTree(): dir: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:condition
analysis/Utils.java: resolveTree(): top: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| condition
analysis/Utils.java: resolveTree(): resolvedValChild: NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): new top: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
analysis/Utils.java: mergeSeqDirs(): key: $z1
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): dir: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$z1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $z1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: mergeSeqDirs(): key: compName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): dir: ~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:compName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: compName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock3
| | IfThen
| | | BasicBlock4
| | | BasicBlock5

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


DIR.java: updateRegion(): update region entry: ret=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
DIR.java: updateRegion(): update region entry: condition=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
DIR.java: updateRegion(): update region entry: $z1=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
DIR.java: updateRegion(): update region entry: $z3=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: compName=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


analysis/Utils.java: mergeSeqDirs(): following dir domain: [ret, condition, $z1, $z3, compName]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {ret=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret, condition=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0, $z1=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1, $z3=?
| Equals
| | pet.id
| | NullOp
| 1
| 0, compName=?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName}
analysis/Utils.java: mergeSeqDirs(): key: ret
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:ret
analysis/Utils.java: resolveTree(): top: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| ret
analysis/Utils.java: resolveTree(): resolvedValChild: this.pets
analysis/Utils.java: resolveTree(): new top: ?
| Equals
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | ret
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | ret
| this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:ret
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| ret
analysis/Utils.java: resolveTree(): resolvedValChild: this.pets
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| UnionOp
| | ret
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:ret
analysis/Utils.java: resolveTree(): top: UnionOp
| ret
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): resolvedValChild: this.pets
analysis/Utils.java: resolveTree(): new top: UnionOp
| this.pets
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): top: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): top: List
| FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| pet.id
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): top: List
| FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| pet.id
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): newChildValueList.size(): 3
analysis/Utils.java: resolveTree(): newChildValueList: [0=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), 1=FieldRef(org.springframework.samples.petclinic.owner.Pet.name), 2=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): top: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): new top: Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | nameParam
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
analysis/Utils.java: mergeSeqDirs(): key: $z1
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$z1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $z1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| nameParam
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:nameParam
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: nameParam
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
analysis/Utils.java: mergeSeqDirs(): key: $z3
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): top: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): new top: Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): key: compName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:compName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: compName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock3
| | IfThen
| | | BasicBlock4
| | | BasicBlock5

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getPetUpdated
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock6
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 6
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, nameParam := @parameter0: java.lang.String, ignoreNew := @parameter1: boolean, $r0 = new java.util.HashSet, specialinvoke $r0.<java.util.HashSet: void <init>()>(), ret = $r0, pets = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), l5 = interfaceinvoke pets.<java.util.Set: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), pet = (org.springframework.samples.petclinic.owner.Pet) $r1, if ignoreNew == 0 goto compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), $z3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z3 != 0 goto (branch), compName = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>(), compName = virtualinvoke compName.<java.lang.String: java.lang.String toLowerCase()>(), $z1 = virtualinvoke compName.<java.lang.String: boolean equals(java.lang.Object)>(nameParam), if $z1 == 0 goto (branch), interfaceinvoke ret.<java.util.Set: boolean add(java.lang.Object)>(pet), goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()], return ret]
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>()]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock6
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: 
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: 

analysis/Utils.java: mergeSeqDirs(): following dir domain: []
analysis/Utils.java: mergeSeqDirs(): following dir: 
analysis/Utils.java: mergeSeqDirs(): following dir vemap: {}
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock6
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


{pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id), pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp, l5=InvokeMethod
| ?
| | Equals
| | | this.pets
| | | NullOp
| | BottomNode
| | this.pets
| Iterator(), pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), compName=MethodWontHandleOp, $z0=MethodWontHandleOp, $z1=?
| Equals
| | pet.id
| | NullOp
| 1
| 0, $z3=?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0, this.pets=BottomNode, ret=$r0, pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp, $r0=this.name, pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), $r1=this.pets, $r2=BottomNode, pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address), this=Self, pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id), condition=Equals
| MethodWontHandleOp
| 0, pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city), pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name), return=this.name}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: pets=?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
DIR.java: updateRegion(): update region entry: pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
DIR.java: updateRegion(): update region entry: pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
DIR.java: updateRegion(): update region entry: l5=InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()
DIR.java: updateRegion(): update region entry: pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
DIR.java: updateRegion(): update region entry: pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: compName=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: $z1=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1
DIR.java: updateRegion(): update region entry: $z3=?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: ret=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | this.pets
| this.pets
DIR.java: updateRegion(): update region entry: pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
DIR.java: updateRegion(): update region entry: $r1=NextOp
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIR.java: updateRegion(): update region entry: pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
DIR.java: updateRegion(): update region entry: pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
DIR.java: updateRegion(): update region entry: condition=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
DIR.java: updateRegion(): update region entry: pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
DIR.java: updateRegion(): update region entry: pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
DIR.java: updateRegion(): update region entry: pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRLoopRegionAnalyzer.java: constructDIR(): Done with analyzing loop body
DIRLoopRegionAnalyzer.java: constructDIR(): bodyVEMap: {pets=?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets, pet.owner.id=FieldRef(org.springframework.samples.petclinic.owner.Owner.id), pet.owner=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp, l5=InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator(), pet.owner.firstName=FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), pet.type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), compName=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| compName, $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0, $z1=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| $z1, $z3=?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0, this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, ret=?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets, pet.type=Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp, $r0=this.id, pet.birthDate=FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), $r1=NextOp, $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2, pet.owner.telephone=FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), pet.type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), pet.owner.address=FieldRef(org.springframework.samples.petclinic.owner.Owner.address), this=Self, pet.id=FieldRef(org.springframework.samples.petclinic.owner.Pet.id), condition=?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0, pet.owner.lastName=FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), pet.owner.city=FieldRef(org.springframework.samples.petclinic.owner.Owner.city), pet.name=FieldRef(org.springframework.samples.petclinic.owner.Pet.name), return=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
DIRLoopRegionAnalyzer.java: constructDIR(): headVEMap: {condition=Equals
| InvokeMethod
| | l5
| | HasNext()
| 0, $z0=InvokeMethod
| l5
| HasNext()}
DIRLoopRegionAnalyzer.java: constructDIR(): headR: | BasicBlock1
{org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ l5 ~~~
InvokeMethod
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | ?
| | | | | | Equals
| | | | | | | this.pets
| | | | | | | NullOp
| | | | | | BottomNode
| | | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| Iterator()

~~~ pet.birthDate ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRLoopRegionAnalyzer.java: getLoopingCol(): headDIR: ~~~ $z0 ~~~
InvokeMethod
| l5
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l5
| | HasNext()
| 0


DIRLoopRegionAnalyzer.java: constructDIR(): loopingVar: l5
DIRLoopRegionAnalyzer.java: constructDIR(): foldVars: [pets, pet.owner.id, pet.owner, l5, pet.owner.firstName, pet.type.name, compName, $z0, $z1, $z3, this.pets, ret, pet.type, $r0, pet.birthDate, $r1, $r2, pet.owner.telephone, pet.type.id, pet.owner.address, this, pet.id, condition, pet.owner.lastName, pet.owner.city, pet.name, return]
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pets
[$r0, $r2]
Body_Expr:
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.id
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner
[$r0, $r2]
Body_Expr:
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: l5
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.firstName
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.type.name
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: compName
[$r0, $r2]
Body_Expr:
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $z0
[$r0, $r2]
Body_Expr:
?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $z1
[$r0, $r2]
Body_Expr:
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $z3
[$r0, $r2]
Body_Expr:
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: this.pets
[$r0, $r2]
Body_Expr:
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: ret
[$r0, $r2]
Breakpoint
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.type
[$r0, $r2]
Body_Expr:
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r0
[$r0, $r2]
Body_Expr:
this.id
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.birthDate
[$r0, $r2]
Body_Expr:
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r1
[$r0, $r2]
Body_Expr:
NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r2
[$r0, $r2]
Body_Expr:
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.telephone
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.type.id
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.address
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: this
[$r0, $r2]
Body_Expr:
Self
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.id
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: condition
[$r0, $r2]
Body_Expr:
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.lastName
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.owner.city
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: pet.name
[$r0, $r2]
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: return
[$r0, $r2]
Body_Expr:
?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): loopDIR: {pets=UnknownNode, pet.owner.id=UnknownNode, pet.owner=UnknownNode, pet.owner.firstName=UnknownNode, pet.type.name=UnknownNode, compName=UnknownNode, $z0=UnknownNode, $z1=UnknownNode, $z3=UnknownNode, this.pets=UnknownNode, ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam, pet.type=UnknownNode, $r0=UnknownNode, pet.birthDate=UnknownNode, $r1=UnknownNode, $r2=UnknownNode, pet.owner.telephone=UnknownNode, pet.type.id=UnknownNode, pet.owner.address=UnknownNode, this=UnknownNode, pet.id=UnknownNode, condition=UnknownNode, pet.owner.lastName=UnknownNode, pet.owner.city=UnknownNode, pet.name=UnknownNode, return=UnknownNode}
{}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
UnknownNode

~~~ $r2 ~~~
UnknownNode

~~~ $z0 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ $z3 ~~~
UnknownNode

~~~ compName ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ pet.birthDate ~~~
UnknownNode

~~~ pet.id ~~~
UnknownNode

~~~ pet.name ~~~
UnknownNode

~~~ pet.owner ~~~
UnknownNode

~~~ pet.owner.address ~~~
UnknownNode

~~~ pet.owner.city ~~~
UnknownNode

~~~ pet.owner.firstName ~~~
UnknownNode

~~~ pet.owner.id ~~~
UnknownNode

~~~ pet.owner.lastName ~~~
UnknownNode

~~~ pet.owner.telephone ~~~
UnknownNode

~~~ pet.type ~~~
UnknownNode

~~~ pet.type.id ~~~
UnknownNode

~~~ pet.type.name ~~~
UnknownNode

~~~ pets ~~~
UnknownNode

~~~ ret ~~~
Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam

~~~ return ~~~
UnknownNode

~~~ this ~~~
UnknownNode

~~~ this.pets ~~~
UnknownNode


DIR.java: updateRegion(): update region entry: pets=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.id=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.firstName=UnknownNode
DIR.java: updateRegion(): update region entry: pet.type.name=UnknownNode
DIR.java: updateRegion(): update region entry: compName=UnknownNode
DIR.java: updateRegion(): update region entry: $z0=UnknownNode
DIR.java: updateRegion(): update region entry: $z1=UnknownNode
DIR.java: updateRegion(): update region entry: $z3=UnknownNode
DIR.java: updateRegion(): update region entry: this.pets=UnknownNode
DIR.java: updateRegion(): update region entry: ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam
DIR.java: updateRegion(): update region entry: pet.type=UnknownNode
DIR.java: updateRegion(): update region entry: $r0=UnknownNode
DIR.java: updateRegion(): update region entry: pet.birthDate=UnknownNode
DIR.java: updateRegion(): update region entry: $r1=UnknownNode
DIR.java: updateRegion(): update region entry: $r2=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.telephone=UnknownNode
DIR.java: updateRegion(): update region entry: pet.type.id=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.address=UnknownNode
DIR.java: updateRegion(): update region entry: this=UnknownNode
DIR.java: updateRegion(): update region entry: pet.id=UnknownNode
DIR.java: updateRegion(): update region entry: condition=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.lastName=UnknownNode
DIR.java: updateRegion(): update region entry: pet.owner.city=UnknownNode
DIR.java: updateRegion(): update region entry: pet.name=UnknownNode
DIR.java: updateRegion(): update region entry: return=UnknownNode
~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
UnknownNode

~~~ $r2 ~~~
UnknownNode

~~~ $z0 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ $z3 ~~~
UnknownNode

~~~ compName ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ pet.birthDate ~~~
UnknownNode

~~~ pet.id ~~~
UnknownNode

~~~ pet.name ~~~
UnknownNode

~~~ pet.owner ~~~
UnknownNode

~~~ pet.owner.address ~~~
UnknownNode

~~~ pet.owner.city ~~~
UnknownNode

~~~ pet.owner.firstName ~~~
UnknownNode

~~~ pet.owner.id ~~~
UnknownNode

~~~ pet.owner.lastName ~~~
UnknownNode

~~~ pet.owner.telephone ~~~
UnknownNode

~~~ pet.type ~~~
UnknownNode

~~~ pet.type.id ~~~
UnknownNode

~~~ pet.type.name ~~~
UnknownNode

~~~ pets ~~~
UnknownNode

~~~ ret ~~~
Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam

~~~ return ~~~
UnknownNode

~~~ this ~~~
UnknownNode

~~~ this.pets ~~~
UnknownNode


{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
{ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam}
analysis/Utils.java: mergeSeqDirs(): following dir domain: [pets, pet.owner.id, pet.owner, pet.owner.firstName, pet.type.name, compName, $z0, $z1, $z3, this.pets, ret, pet.type, $r0, pet.birthDate, $r1, $r2, pet.owner.telephone, pet.type.id, pet.owner.address, this, pet.id, condition, pet.owner.lastName, pet.owner.city, pet.name, return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
UnknownNode

~~~ $r2 ~~~
UnknownNode

~~~ $z0 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ $z3 ~~~
UnknownNode

~~~ compName ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ pet.birthDate ~~~
UnknownNode

~~~ pet.id ~~~
UnknownNode

~~~ pet.name ~~~
UnknownNode

~~~ pet.owner ~~~
UnknownNode

~~~ pet.owner.address ~~~
UnknownNode

~~~ pet.owner.city ~~~
UnknownNode

~~~ pet.owner.firstName ~~~
UnknownNode

~~~ pet.owner.id ~~~
UnknownNode

~~~ pet.owner.lastName ~~~
UnknownNode

~~~ pet.owner.telephone ~~~
UnknownNode

~~~ pet.type ~~~
UnknownNode

~~~ pet.type.id ~~~
UnknownNode

~~~ pet.type.name ~~~
UnknownNode

~~~ pets ~~~
UnknownNode

~~~ ret ~~~
Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam

~~~ return ~~~
UnknownNode

~~~ this ~~~
UnknownNode

~~~ this.pets ~~~
UnknownNode


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {pets=UnknownNode, pet.owner.id=UnknownNode, pet.owner=UnknownNode, pet.owner.firstName=UnknownNode, pet.type.name=UnknownNode, compName=UnknownNode, $z0=UnknownNode, $z1=UnknownNode, $z3=UnknownNode, this.pets=UnknownNode, ret=Sel
| l5
| And
| | Or
| | | Equals
| | | | ignoreNew
| | | | 0
| | | NotEq
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | Equals
| | | MethodWontHandleOp
| | | nameParam, pet.type=UnknownNode, $r0=UnknownNode, pet.birthDate=UnknownNode, $r1=UnknownNode, $r2=UnknownNode, pet.owner.telephone=UnknownNode, pet.type.id=UnknownNode, pet.owner.address=UnknownNode, this=UnknownNode, pet.id=UnknownNode, condition=UnknownNode, pet.owner.lastName=UnknownNode, pet.owner.city=UnknownNode, pet.name=UnknownNode, return=UnknownNode}
analysis/Utils.java: mergeSeqDirs(): key: pets
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.id
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: pet.owner
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: pet.type.name
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: compName
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: mergeSeqDirs(): after resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: UnknownNode
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $r1 ~~~
NextOp

~~~ $r2 ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v16>

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ $z1 ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| Equals
| | MethodWontHandleOp
| | nameParam
| <v8>

~~~ $z3 ~~~
?
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | NullOp
| 1
| 0

~~~ compName ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| MethodWontHandleOp
| <v6>

~~~ condition ~~~
?
| Equals
| | ?
| | | Equals
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | NullOp
| | | 1
| | | 0
| | 0
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | nameParam
| | 0
| 0

~~~ l5 ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ pet.birthDate ~~~
birthDate(org.springframework.samples.petclinic.owner.Pet.birthDate)

~~~ pet.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.id)

~~~ pet.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.Pet.name)

~~~ pet.owner ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.Owner)
| NullOp

~~~ pet.owner.address ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.address)

~~~ pet.owner.city ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.city)

~~~ pet.owner.firstName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName)

~~~ pet.owner.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.id)

~~~ pet.owner.lastName ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName)

~~~ pet.owner.telephone ~~~
FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone)

~~~ pet.type ~~~
Join
| NextOp
| ClassRef(org.springframework.samples.petclinic.owner.PetType)
| NullOp

~~~ pet.type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ pet.type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ pets ~~~
?
| Equals
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | this.pets
| | | | | | NullOp
| | | | | BottomNode
| | | | | this.pets
| | | | NullOp
| | | BottomNode
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | NullOp
| BottomNode
| ?
| | Equals
| | | ?
| | | | Equals
| | | | | this.pets
| | | | | NullOp
| | | | BottomNode
| | | | this.pets
| | | NullOp
| | BottomNode
| | ?
| | | Equals
| | | | this.pets
| | | | NullOp
| | | BottomNode
| | | this.pets

~~~ ret ~~~
?
| Equals
| | ?
| | | Equals
| | | | ignoreNew
| | | | 0
| | | 1
| | | 0
| | 1
| ?
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | nameParam
| | | 0
| | UnionOp
| | | this.pets
| | | List
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | ?
| | | Equals
| | | | ?
| | | | | Equals
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | | | NullOp
| | | | | 1
| | | | | 0
| | | | 0
| | | ?
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | nameParam
| | | | | 0
| | | | UnionOp
| | | | | this.pets
| | | | | List
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.name)
| | | | | | FieldRef(org.springframework.samples.petclinic.owner.Pet.id)
| | | | this.pets
| | | NullOp
| this.pets

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | <v10>
| | NullOp
| BottomNode
| <v10>


analysis/Utils.java: resolveTree(): in: UnknownNode
