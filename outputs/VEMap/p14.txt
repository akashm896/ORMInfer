EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Project/current use/NRAandLoops
starttime, test: 1681562593654
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: org.springframework.web.bind.annotation.ResponseBody is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: org.springframework.data.jpa.repository.JpaRepository is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:25
| | Id:26
| Union
| | Project
| | | Select
| | | | Id:26
| | | | Id:18
| | | Id:21
| | Project
| | | Select
| | | | Id:26
| | | | Eq
| | | | | Id:18
| | | | | Zero
| | | Id:24

{<col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=18, <list1>=21, <init_val>=25, <itr>=27, <coll>=26}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:36
| | | Id:31
| | Id:33
| Id:35

{<list>=33, <elseval>=34, <col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=31, <list1>=21, <init_val>=35, <itr>=37, <coll>=36}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:41
| | Select
| | | Id:41
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:49
| | | | | | Id:45
| | | | | Id
| Project
| | Id:47
| | Join
| | | Id:49
| | | Id:45

{<list>=47, <repo>=41, <cond>=31, <nop>=46, <init_val>=48, <join_right>=45, <itr>=50, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=49}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:61
| | Select
| | | Id:57
| | | In
| | | | Id:59
| | | | Id:63
| Id:62

{<list>=61, <rel>=57, <repo>=41, <cond>=31, <nop>=46, <clm>=59, <init_val>=62, <join_right>=45, <itr>=64, <receiver>=54, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=63}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:71
| | | In
| | | | Id:73
| | | | Id:77
| | Id:75
| Id:76

{<list>=61, <rel>=71, <repo>=41, <cond>=31, <nop>=46, <clm>=73, <init_val>=76, <join_right>=45, <itr>=78, <clmagg>=75, <receiver>=54, <aggvar>=68, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=77}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: productsList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.ProductsController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String productsList(org.springframework.ui.Model)
    {
        com.shakeel.controller.ProductsController this;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.util.List $r1;

        this := @this: com.shakeel.controller.ProductsController;

        model := @parameter0: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);

        return "products";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String productsList(org.springframework.ui.Model)
    {
        com.shakeel.controller.ProductsController this;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.util.List $r1;

        this := @this: com.shakeel.controller.ProductsController;

        model := @parameter0: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);

        return "products";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: productsList is Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.controller.ProductsController;
model := @parameter0: org.springframework.ui.Model;
$r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;
$r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);
return "products";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.controller.ProductsController;
model := @parameter0: org.springframework.ui.Model;
$r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;
$r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);
return "products";


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.controller.ProductsController, model := @parameter0: org.springframework.ui.Model, $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>, $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>(), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1), return "products"]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
FuncStackInfoBuilder.java: internalTransformHelper(): {com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)=    public java.lang.String productsList(org.springframework.ui.Model)
    {
        com.shakeel.controller.ProductsController this;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.util.List $r1;

        this := @this: com.shakeel.controller.ProductsController;

        model := @parameter0: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);

        return "products";
    }
}

Decompiling com.shakeel.controller.ProductsController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.ProductsController: void <init>()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.ProductsController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>()
    {
        com.shakeel.controller.ProductsController this;

        this := @this: com.shakeel.controller.ProductsController;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.ProductsController: java.lang.String product(java.lang.Long,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: product
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.ProductsController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String product(java.lang.Long, org.springframework.ui.Model)
    {
        com.shakeel.controller.ProductsController this;
        java.lang.Long id;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.lang.Object $r1;

        this := @this: com.shakeel.controller.ProductsController;

        id := @parameter0: java.lang.Long;

        model := @parameter1: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(id);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("product", $r1);

        return "product";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: productsList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.ProductsController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String productsList(org.springframework.ui.Model)
    {
        com.shakeel.controller.ProductsController this;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.util.List $r1;

        this := @this: com.shakeel.controller.ProductsController;

        model := @parameter0: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);

        return "products";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.ProductsController: java.lang.String saveProduct(com.shakeel.model.Product)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: saveProduct
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.ProductsController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String saveProduct(com.shakeel.model.Product)
    {
        com.shakeel.controller.ProductsController this;
        com.shakeel.model.Product product;
        com.shakeel.repository.ProductRepository $r0;
        java.lang.Long $r2;
        java.lang.String $r3;

        this := @this: com.shakeel.controller.ProductsController;

        product := @parameter0: com.shakeel.model.Product;

        $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>;

        interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.lang.Object save(java.lang.Object)>(product);

        $r2 = virtualinvoke product.<com.shakeel.model.Product: java.lang.Long getProductId()>();

        $r3 = virtualinvoke $r2.<java.lang.Long: java.lang.String toString()>();

        return $r3;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.shakeel.controller.ProductsController, model := @parameter0: org.springframework.ui.Model, $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>, $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>(), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1), return "products"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)has typemap: {}
ARegion.java: analyze(): set cur method of analyzer to: productsList
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.controller.ProductsController, model := @parameter0: org.springframework.ui.Model, $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>, $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>(), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1), return "products"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.controller.ProductsController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter0: org.springframework.ui.Model
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.shakeel.controller.ProductsController: com.shakeel.repository.ProductRepository productRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.productRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findAll
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Object: java.util.List findAll()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Object: java.util.List findAll()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.shakeel.repository.ProductRepository: java.util.List findAll()>
construct/Utils.java: parseObjectInvoke(): methodName = findAll
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.shakeel.repository.ProductRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.shakeel.repository.ProductRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): Case : findAll
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
Utils.java: getRelExpForMethod(): actualargs = []
Utils.java: getRelExpForMethod(): methodInvoked = <java.lang.Object: java.util.List findAll()>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpAndJoinedField = null
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
AccessPath.java: getCollectionEntityType(): []
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.shakeel.model.Product
com.shakeel.repository.ProductRepository
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = []
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
AccessPath.java: getCollectionEntityType(): []
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): leftType = com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): leftType : com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = []
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
AccessPath.java: getCollectionEntityType(): []
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): left type = com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.lang.Object: java.util.List findAll()=~~~ return ~~~
Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Product.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.shakeel.model.Product
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findAll
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.lang.Object: java.util.List findAll()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.shakeel.model.Product fields = [<com.shakeel.model.Product: java.lang.Long productId>, <com.shakeel.model.Product: java.lang.String productName>, <com.shakeel.model.Product: java.lang.Double productPrice>, <com.shakeel.model.Product: java.lang.Long orderId>]
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Long productId>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.String productName>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Double productPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Long orderId>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.productId, $r1.productName, $r1.productPrice, $r1.orderId]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.lang.Object: java.util.List findAll()]
DIRRegionAnalyzer.java: constructDIR(): callee = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.util.List findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): key= return
 value= Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.shakeel.model.Product
NRA.java: genExprNra(): nested Entity = com.shakeel.model.Product
NRA.java: processTableandFields: com.shakeel.model.Product fields = [<com.shakeel.model.Product: java.lang.Long productId>, <com.shakeel.model.Product: java.lang.String productName>, <com.shakeel.model.Product: java.lang.Double productPrice>, <com.shakeel.model.Product: java.lang.Long orderId>]
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Long productId>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.String productName>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Double productPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Long orderId>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= com.shakeel.model.Product
NRA.java: genExprNra(): com.shakeel.model.Product fields= [<com.shakeel.model.Product: java.lang.Long productId>, <com.shakeel.model.Product: java.lang.String productName>, <com.shakeel.model.Product: java.lang.Double productPrice>, <com.shakeel.model.Product: java.lang.Long orderId>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= []
NRA.java: genExprNra(): field =<com.shakeel.model.Product: java.lang.Long productId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: productId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= []
NRA.java: genExprNra(): field =<com.shakeel.model.Product: java.lang.String productName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: productName

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= []
NRA.java: genExprNra(): field =<com.shakeel.model.Product: java.lang.Double productPrice>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: productPrice

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= []
NRA.java: genExprNra(): field =<com.shakeel.model.Product: java.lang.Long orderId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.shakeel.model.Product.productId), FieldRef(com.shakeel.model.Product.productName), FieldRef(com.shakeel.model.Product.productPrice), FieldRef(com.shakeel.model.Product.orderId)]
NRA.java: genExprNra(): projectNode name: Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return
 value : 
 Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId
DIRRegionAnalyzer.java: constructDIR(): leftval = $r1
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.util.List findAll()
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.util.List findAll() END
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
Utils.java: getVarNode(): __modelattribute__products
Utils.java: getVarNode(): LinkedVariableBox(__modelattribute__products)
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "products"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.productRepository

~~~ $r1 ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ __modelattribute__products ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ return ~~~
"products"

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.productRepository

~~~ $r1 ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ __modelattribute__products ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ return ~~~
"products"

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.productRepository
DIR.java: updateRegion(): update region entry: $r1=Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId
DIR.java: updateRegion(): update region entry: __modelattribute__products=Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return="products"
~~~ $r0 ~~~
this.productRepository

~~~ $r1 ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ __modelattribute__products ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ return ~~~
"products"

~~~ this ~~~
Self


Resultant dag : ~~~ $r0 ~~~
this.productRepository

~~~ $r1 ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ __modelattribute__products ~~~
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

~~~ return ~~~
"products"

~~~ this ~~~
Self


final FuncStackAnalyzer3 = 
{java.lang.Object: java.util.List findAll()=~~~ return ~~~
Sel
| ClassRef(com.shakeel.repository.ProductRepository)
| NullOp

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.shakeel.controller.ProductsController: java.lang.String productsList(org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 5
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r0, $r1, __modelattribute__products, this, return]
Final veMap of $r0 = 
this.productRepository
SavePostProcess.java: SavePostProcess(): repo varnode: $r0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__products = 
Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__products
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
"products"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r0
value: this.productRepository

key: $r1
value: Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

key: __modelattribute__products
value: Pi
| Sel
| | ClassRef(com.shakeel.repository.ProductRepository)
| | NullOp
| List
| | productId
| | productName
| | productPrice
| | orderId

key: this
value: Self

key: return
value: "products"





























Tables and Fields :

Product fields = 
{productId=FieldData, orderId=FieldData, productName=FieldData, productPrice=FieldData}

{}
{}
Time elapsed: 1.023 seconds
