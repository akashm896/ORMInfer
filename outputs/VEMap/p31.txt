EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
EqSQLDriverTest.java: main(): Got the repo option value: this.visits
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Project/current use/NRAandLoops
starttime, test: 1680151598321
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.validation.Validator is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.ui.ModelMap is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: org.springframework.web.bind.annotation.ModelAttribute is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: java.util.Iterator is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: java.util.List is a phantom class!
Warning: org.springframework.web.bind.WebDataBinder is a phantom class!
Warning: org.springframework.web.bind.annotation.InitBinder is a phantom class!
Warning: org.springframework.util.StringUtils is a phantom class!
Warning: org.springframework.format.annotation.DateTimeFormat is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: org.springframework.beans.support.PropertyComparator is a phantom class!
Warning: java.util.LinkedHashSet is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: org.springframework.beans.support.MutableSortDefinition is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: org.springframework.beans.support.SortDefinition is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: java.time.LocalDate is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.validation.Errors is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: org.springframework.data.repository.Repository is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
Warning: javax.validation.constraints.NotEmpty is a phantom class!
Warning: javax.validation.constraints.Digits is a phantom class!
Warning: org.springframework.core.style.ToStringCreator is a phantom class!
Warning: javax.persistence.MappedSuperclass is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:25
| | Id:26
| Union
| | Project
| | | Select
| | | | Id:26
| | | | Id:18
| | | Id:21
| | Project
| | | Select
| | | | Id:26
| | | | Eq
| | | | | Id:18
| | | | | Zero
| | | Id:24

{<col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=18, <list1>=21, <init_val>=25, <itr>=27, <coll>=26}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:36
| | | Id:31
| | Id:33
| Id:35

{<list>=33, <elseval>=34, <col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=31, <list1>=21, <init_val>=35, <itr>=37, <coll>=36}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:41
| | Select
| | | Id:41
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:49
| | | | | | Id:45
| | | | | Id
| Project
| | Id:47
| | Join
| | | Id:49
| | | Id:45

{<list>=47, <repo>=41, <cond>=31, <nop>=46, <init_val>=48, <join_right>=45, <itr>=50, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=49}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:61
| | Select
| | | Id:57
| | | In
| | | | Id:59
| | | | Id:63
| Id:62

{<list>=61, <rel>=57, <repo>=41, <cond>=31, <nop>=46, <clm>=59, <init_val>=62, <join_right>=45, <itr>=64, <receiver>=54, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=63}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:71
| | | In
| | | | Id:73
| | | | Id:77
| | Id:75
| Id:76

{<list>=61, <rel>=71, <repo>=41, <cond>=31, <nop>=46, <clm>=73, <init_val>=76, <join_right>=45, <itr>=78, <clmagg>=75, <receiver>=54, <aggvar>=68, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=77}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local: result
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: result
FuncStackInfoBuilder.java: regionTreeForBody(): local: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: processUpdateForm is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
result := @parameter1: org.springframework.validation.BindingResult;
owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;
model := @parameter3: org.springframework.ui.ModelMap;
$z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();
if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 1:
[preds: 0 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);
virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);
return "pets/createOrUpdatePetForm";

Block 2:
[preds: 0 ] [succs: ]
virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);
$r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);
return "redirect:/owners/{ownerId}";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [1, 2, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [0, 1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [1, 2, 0]
removeVertices: vset = [0, 1, 2]
removeVertices: v = 0
removeVertex: adj = {1=[], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[], 2=[]}
removeVertex: incoming = {1=[], 2=[]}
removeVertex: v = 1
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_IfThenElse0
|  +- 0
|  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
result := @parameter1: org.springframework.validation.BindingResult;
owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;
model := @parameter3: org.springframework.ui.ModelMap;
$z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();
if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

Block 1:
[preds: 0 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);
virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);
return "pets/createOrUpdatePetForm";

Block 2:
[preds: 0 ] [succs: ]
virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);
$r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);
return "redirect:/owners/{ownerId}";


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock1, | BasicBlock2]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_IfThenElse0
FuncStackInfoBuilder.java: regionTreeForBody(): | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
VIRTUAL edge: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner) in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
VIRTUAL edge: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet) in <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)> ==> <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
VIRTUAL edge: $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>() in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
VIRTUAL edge: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this) in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
VIRTUAL edge: $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>() in <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)> ==> <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()> ==> <java.util.HashSet: void <init>()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Pet
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    protected void setOwner(org.springframework.samples.petclinic.owner.Owner)
    {
        org.springframework.samples.petclinic.owner.Pet this;
        org.springframework.samples.petclinic.owner.Owner owner;

        this := @this: org.springframework.samples.petclinic.owner.Pet;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: owner
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setOwner is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.Pet;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.Pet;
owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;
this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Pet, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: addPet
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Owner
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void addPet(org.springframework.samples.petclinic.owner.Pet)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        org.springframework.samples.petclinic.owner.Pet pet;
        boolean $z0;
        java.util.Set $r0;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label1:
        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: pet
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: addPet is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
$z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

Block 1:
[preds: 0 ] [succs: 2 ]
$r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0, 1], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2], 2=[]}
removeVertex: incoming = {1=[], 2=[1]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [2, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 2]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[], R_IfThen0=[2]}
removeVertex: incoming = {2=[R_IfThen0], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThen0
|  |  +- 0
|  |  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;
$z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();
if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

Block 1:
[preds: 0 ] [succs: 2 ]
$r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();
interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

Block 2:
[preds: 0 1 ] [succs: ]
virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: isNew
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.model.BaseEntity
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public boolean isNew()
    {
        org.springframework.samples.petclinic.model.BaseEntity this;
        java.lang.Integer $r0;
        boolean $z0;

        this := @this: org.springframework.samples.petclinic.model.BaseEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: isNew is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.model.BaseEntity;
$r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;
if $r0 != null goto $z0 = 0;

Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= return $z0];

Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;

Block 3:
[preds: 1 2 ] [succs: ]
return $z0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
2 -> 3
0 -> 2
1 -> 3
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 3
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [3, 1, 2, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [0, 1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 3
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, 1, 2, 0]
removeVertices: vset = [0, 1, 2]
removeVertices: v = 0
removeVertex: adj = {1=[3], 2=[3], 3=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0], 3=[1, 2], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[3], 2=[3], 3=[]}
removeVertex: incoming = {1=[], 2=[], 3=[1, 2]}
removeVertex: v = 1
removeVertices: v = 2
removeVertex: adj = {2=[3], 3=[]}
removeVertex: incoming = {2=[], 3=[2]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [3, R_IfThenElse0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse0, 3]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [R_IfThenElse0, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [3, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, R_IfThenElse0]
removeVertices: vset = [R_IfThenElse0, 3]
removeVertices: v = R_IfThenElse0
removeVertex: adj = {3=[], R_IfThenElse0=[3]}
removeVertex: incoming = {3=[R_IfThenElse0], R_IfThenElse0=[]}
removeVertex: v = R_IfThenElse0
removeVertices: v = 3
removeVertex: adj = {3=[]}
removeVertex: incoming = {3=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThenElse0
|  |  +- 0
|  |  +- 1
|  |  +- 2
|  +- 3

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.model.BaseEntity;
$r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;
if $r0 != null goto $z0 = 0;

Block 1:
[preds: 0 ] [succs: 3 ]
$z0 = 1;
goto [?= return $z0];

Block 2:
[preds: 0 ] [succs: 3 ]
$z0 = 0;

Block 3:
[preds: 1 2 ] [succs: ]
return $z0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThenElse0, 3], R_IfThenElse0=[0, 1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_Sequential1, R_IfThenElse0=R_Sequential1, 0=R_IfThenElse0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock1, | BasicBlock2]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThenElse
| | | BasicBlock0
| | | BasicBlock1
| | | BasicBlock2
| | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getPetsInternal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.Owner
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    protected java.util.Set getPetsInternal()
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.util.Set $r0, $r1;
        java.util.HashSet $r2;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        if $r0 != null goto label1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getPetsInternal is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
$r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.HashSet;
specialinvoke $r2.<java.util.HashSet: void <init>()>();
this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0, 1], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2], 2=[]}
removeVertex: incoming = {1=[], 2=[1]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [2, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 2]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[], R_IfThen0=[2]}
removeVertex: incoming = {2=[R_IfThen0], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThen0
|  |  +- 0
|  |  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.owner.Owner;
$r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.HashSet;
specialinvoke $r2.<java.util.HashSet: void <init>()>();
this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.HashSet: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
FuncStackInfoBuilder.java: internalTransformHelper(): {org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)=    protected void setOwner(org.springframework.samples.petclinic.owner.Owner)
    {
        org.springframework.samples.petclinic.owner.Pet this;
        org.springframework.samples.petclinic.owner.Owner owner;

        this := @this: org.springframework.samples.petclinic.owner.Pet;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner;

        return;
    }
, org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=    protected java.util.Set getPetsInternal()
    {
        org.springframework.samples.petclinic.owner.Owner this;
        java.util.Set $r0, $r1;
        java.util.HashSet $r2;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        if $r0 != null goto label1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>;

        return $r1;
    }
, org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)=    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }
, org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)=    public void addPet(org.springframework.samples.petclinic.owner.Pet)
    {
        org.springframework.samples.petclinic.owner.Owner this;
        org.springframework.samples.petclinic.owner.Pet pet;
        boolean $z0;
        java.util.Set $r0;

        this := @this: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet);

     label1:
        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this);

        return;
    }
, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=    public boolean isNew()
    {
        org.springframework.samples.petclinic.model.BaseEntity this;
        java.lang.Integer $r0;
        boolean $z0;

        this := @this: org.springframework.samples.petclinic.model.BaseEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>;

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}

Decompiling org.springframework.samples.petclinic.owner.PetController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void <init>(org.springframework.samples.petclinic.owner.PetRepository,org.springframework.samples.petclinic.owner.OwnerRepository)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.samples.petclinic.owner.PetRepository, org.springframework.samples.petclinic.owner.OwnerRepository)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository pets;
        org.springframework.samples.petclinic.owner.OwnerRepository owners;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pets := @parameter0: org.springframework.samples.petclinic.owner.PetRepository;

        owners := @parameter1: org.springframework.samples.petclinic.owner.OwnerRepository;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets> = pets;

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners> = owners;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.Collection populatePetTypes()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: populatePetTypes
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Collection populatePetTypes()
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.util.List $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.Owner findOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.samples.petclinic.owner.Owner findOwner(int)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int ownerId;
        org.springframework.samples.petclinic.owner.OwnerRepository $r0;
        java.lang.Integer $r1;
        org.springframework.samples.petclinic.owner.Owner $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        ownerId := @parameter0: int;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        $r2 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r1);

        return $r2;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initOwnerBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initOwnerBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initOwnerBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        java.lang.String[] $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "id";

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setDisallowedFields(java.lang.String[])>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initPetBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initPetBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initPetBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        org.springframework.samples.petclinic.owner.PetValidator $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = new org.springframework.samples.petclinic.owner.PetValidator;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.PetValidator: void <init>()>();

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setValidator(org.springframework.validation.Validator)>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet, $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = new org.springframework.samples.petclinic.owner.Pet;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.Pet: void <init>()>();

        pet = $r0;

        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>($r0);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", $r0);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;
        java.util.Set $r4;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initUpdateForm(int,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initUpdateForm(int, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int petId;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.lang.Integer $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        petId := @parameter0: int;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(petId);

        pet = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: org.springframework.samples.petclinic.owner.Pet findById(java.lang.Integer)>($r1);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: loop10
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator var4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        var4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke var4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke var4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew(), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)has typemap: {}
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: processUpdateForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.PetController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = pet := @parameter0: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): curUnit = result := @parameter1: org.springframework.validation.BindingResult
DIRRegionAnalyzer.java: constructDIR(): curUnit = owner := @parameter2: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter3: org.springframework.ui.ModelMap
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = hasErrors
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.validation.BindingResult: boolean hasErrors()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.validation.BindingResult: boolean hasErrors()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.validation.BindingResult: boolean hasErrors()>
construct/Utils.java: parseObjectInvoke(): methodName = hasErrors
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.validation.BindingResult: boolean hasErrors()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
construct/Utils.java: parseObjectInvoke(): method wont handle 4
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: condition=Equals
| MethodWontHandleOp
| 0
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=MethodWontHandleOp
~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: processUpdateForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setOwner
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [owner, pet]
ARegion.java: analyze(): set cur method of analyzer to: setOwner
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Pet, owner := @parameter0: org.springframework.samples.petclinic.owner.Owner, this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.Pet
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = owner := @parameter0: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner> = owner
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id]
DIRRegionAnalyzer.java: constructDIR(): right val = owner
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.owner.address
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.address -> owner.address
AccessPath.java: replaceBase(): input access path: this.owner.city
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.city -> owner.city
AccessPath.java: replaceBase(): input access path: this.owner.telephone
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.telephone -> owner.telephone
AccessPath.java: replaceBase(): input access path: this.owner.pets
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.pets -> owner.pets
AccessPath.java: replaceBase(): input access path: this.owner.firstName
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.firstName -> owner.firstName
AccessPath.java: replaceBase(): input access path: this.owner.lastName
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.lastName -> owner.lastName
AccessPath.java: replaceBase(): input access path: this.owner.id
AccessPath.java: replaceBase(): replacement of base: owner
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.owner.id -> owner.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone


DIR.java: updateRegion(): update region entry: this.owner.city=owner.city
DIR.java: updateRegion(): update region entry: this.owner.pets=owner.pets
DIR.java: updateRegion(): update region entry: this.owner.id=owner.id
DIR.java: updateRegion(): update region entry: this.owner.lastName=owner.lastName
DIR.java: updateRegion(): update region entry: this.owner.telephone=owner.telephone
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.owner.firstName=owner.firstName
DIR.java: updateRegion(): update region entry: this.owner.address=owner.address
~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): ith formal: owner
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: owner
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: owner
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.birthDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.address
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.address
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.city
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.city
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.telephone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [owner, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.id
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.visits
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setOwner, [pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: owner
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: owner
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__pet
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: pet
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Pet.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: pets

]
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.birthDate
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.type
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.type.name
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.type.id
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.address
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.city
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.telephone
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.pets
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.firstName
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.lastName
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.owner.id
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.visits
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.name
AccessPath.java: replaceBase(): replacement of base: pet
AccessPath.java: replaceBase(): input access path: __modelattribute__pet.id
AccessPath.java: replaceBase(): replacement of base: pet
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "pets/createOrUpdatePetForm"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ __modelattribute__pet ~~~
pet

~~~ __modelattribute__pet.birthDate ~~~
pet.birthDate

~~~ __modelattribute__pet.id ~~~
pet.id

~~~ __modelattribute__pet.name ~~~
pet.name

~~~ __modelattribute__pet.owner ~~~
pet.owner

~~~ __modelattribute__pet.owner.address ~~~
owner.address

~~~ __modelattribute__pet.owner.city ~~~
owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
owner.telephone

~~~ __modelattribute__pet.type ~~~
pet.type

~~~ __modelattribute__pet.type.id ~~~
pet.type.id

~~~ __modelattribute__pet.type.name ~~~
pet.type.name

~~~ __modelattribute__pet.visits ~~~
pet.visits

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"pets/createOrUpdatePetForm"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ __modelattribute__pet ~~~
pet

~~~ __modelattribute__pet.birthDate ~~~
pet.birthDate

~~~ __modelattribute__pet.id ~~~
pet.id

~~~ __modelattribute__pet.name ~~~
pet.name

~~~ __modelattribute__pet.owner ~~~
pet.owner

~~~ __modelattribute__pet.owner.address ~~~
owner.address

~~~ __modelattribute__pet.owner.city ~~~
owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
owner.telephone

~~~ __modelattribute__pet.type ~~~
pet.type

~~~ __modelattribute__pet.type.id ~~~
pet.type.id

~~~ __modelattribute__pet.type.name ~~~
pet.type.name

~~~ __modelattribute__pet.visits ~~~
pet.visits

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"pets/createOrUpdatePetForm"


DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.telephone=owner.telephone
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.id=owner.id
DIR.java: updateRegion(): update region entry: pet.owner.id=owner.id
DIR.java: updateRegion(): update region entry: pet.owner.telephone=owner.telephone
DIR.java: updateRegion(): update region entry: __modelattribute__pet.birthDate=pet.birthDate
DIR.java: updateRegion(): update region entry: pet.owner.address=owner.address
DIR.java: updateRegion(): update region entry: __modelattribute__pet=pet
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.address=owner.address
DIR.java: updateRegion(): update region entry: pet.owner.pets=owner.pets
DIR.java: updateRegion(): update region entry: pet.owner.firstName=owner.firstName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner=pet.owner
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.pets=owner.pets
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type.name=pet.type.name
DIR.java: updateRegion(): update region entry: __modelattribute__pet.name=pet.name
DIR.java: updateRegion(): update region entry: __modelattribute__pet.id=pet.id
DIR.java: updateRegion(): update region entry: pet.owner.lastName=owner.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.lastName=owner.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type.id=pet.type.id
DIR.java: updateRegion(): update region entry: pet.owner.city=owner.city
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type=pet.type
DIR.java: updateRegion(): update region entry: return="pets/createOrUpdatePetForm"
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.city=owner.city
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.firstName=owner.firstName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.visits=pet.visits
~~~ __modelattribute__pet ~~~
pet

~~~ __modelattribute__pet.birthDate ~~~
pet.birthDate

~~~ __modelattribute__pet.id ~~~
pet.id

~~~ __modelattribute__pet.name ~~~
pet.name

~~~ __modelattribute__pet.owner ~~~
pet.owner

~~~ __modelattribute__pet.owner.address ~~~
owner.address

~~~ __modelattribute__pet.owner.city ~~~
owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
owner.telephone

~~~ __modelattribute__pet.type ~~~
pet.type

~~~ __modelattribute__pet.type.id ~~~
pet.type.id

~~~ __modelattribute__pet.type.name ~~~
pet.type.name

~~~ __modelattribute__pet.visits ~~~
pet.visits

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
owner.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.pets ~~~
owner.pets

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"pets/createOrUpdatePetForm"


ARegion.java: analyze(): set cur method of analyzer to: processUpdateForm
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, result := @parameter1: org.springframework.validation.BindingResult, owner := @parameter2: org.springframework.samples.petclinic.owner.Owner, model := @parameter3: org.springframework.ui.ModelMap, $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>(), if $z0 == 0 goto virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner), virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet), return "pets/createOrUpdatePetForm", virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet), $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet), return "redirect:/owners/{ownerId}"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: addPet
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet, owner]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock0
| | BasicBlock1
, | BasicBlock2]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock1
ARegion.java: analyze(): set cur method of analyzer to: addPet
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.Owner
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = pet := @parameter0: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isNew
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Pet: boolean isNew()>
construct/Utils.java: parseObjectInvoke(): methodName = isNew
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2
, | BasicBlock3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenElseRegion
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.BaseEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $z0 = 0
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= return $z0]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
1


DIR.java: updateRegion(): update region entry: $z0=1
~~~ $z0 ~~~
1


ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
0


DIR.java: updateRegion(): update region entry: $z0=0
~~~ $z0 ~~~
0


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.id
| NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, $r0, condition, $z0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, $r0=this.id, condition=NotEq
| this.id
| NullOp, $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: this.id
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: this.id
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: NotEq
| this.id
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.id
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThenElse
| | BasicBlock0
| | BasicBlock1
| | BasicBlock2

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: isNew
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.BaseEntity, $r0 = this.<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>, if $r0 != null goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $z0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$z0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$z0


DIR.java: updateRegion(): update region entry: return=$z0
~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir domain: [return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ return ~~~
$z0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {return=$z0}
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: $z0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: $z0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock3
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$z0


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


{__modelattribute__pet.owner.telephone=owner.telephone, pet.owner.id=owner.id, this.owner.id=owner.id, __modelattribute__pet.birthDate=pet.birthDate, this.owner.telephone=owner.telephone, __modelattribute__pet=pet, __modelattribute__pet.owner.address=owner.address, pet.owner.firstName=owner.firstName, __modelattribute__pet.owner.pets=owner.pets, __modelattribute__pet.type.name=pet.type.name, __modelattribute__pet.name=pet.name, __modelattribute__pet.id=pet.id, __modelattribute__pet.owner.lastName=owner.lastName, this.owner.lastName=owner.lastName, $z0=MethodWontHandleOp, __modelattribute__pet.type=pet.type, __modelattribute__pet.owner.city=owner.city, __modelattribute__pet.owner.firstName=owner.firstName, __modelattribute__pet.visits=pet.visits, __modelattribute__pet.owner.id=owner.id, $r0=this.id, pet.owner.telephone=owner.telephone, pet.owner.address=owner.address, this=Self, this.owner.firstName=owner.firstName, pet.owner.pets=owner.pets, __modelattribute__pet.owner=pet.owner, this.owner.address=owner.address, this.owner.city=owner.city, condition=Equals
| MethodWontHandleOp
| 0, this.owner.pets=owner.pets, pet.owner.lastName=owner.lastName, __modelattribute__pet.type.id=pet.type.id, pet.owner.city=owner.city, return="pets/createOrUpdatePetForm"}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r0=this.id
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.id
| NullOp
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.id
| | NullOp
| 1
| 0
~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = boolean
DIRRegionAnalyzer.java: constructDIR(): leftType : boolean
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $z0
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: isNew
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.BaseEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $r0, condition, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = isNew, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)=~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: addPet
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getPetsInternal
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
construct/Utils.java: parseObjectInvoke(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
construct/Utils.java: parseObjectInvoke(): methodName = getPetsInternal
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock0
| | BasicBlock1
, | BasicBlock2]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock1
ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.Owner
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new java.util.HashSet
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r2.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r2.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.HashSet: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.pets -> BottomNode
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


DIR.java: updateRegion(): update region entry: this.pets=BottomNode
DIR.java: updateRegion(): update region entry: $r2=BottomNode
~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r2 ~~~
BottomNode

~~~ this.pets ~~~
BottomNode


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.pets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.pets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [this.pets, $r2]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2}
analysis/Utils.java: mergeSeqDirs(): key: this.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: $r2
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, this.pets, $r0, condition, $r2]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets, $r0=this.pets, condition=NotEq
| this.pets
| NullOp, $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: this.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): after resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.pets
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: NotEq
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.pets
| NullOp
analysis/Utils.java: mergeSeqDirs(): key: $r2
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.pets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getPetsInternal
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, $r0 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, $r2 = new java.util.HashSet, specialinvoke $r2.<java.util.HashSet: void <init>()>(), this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = $r2, $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


DIR.java: updateRegion(): update region entry: $r1=this.pets
DIR.java: updateRegion(): update region entry: return=this.pets
~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [$r1, return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$r1=this.pets, return=this.pets}
analysis/Utils.java: mergeSeqDirs(): key: $r1
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock2
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r1 ~~~
this.pets

~~~ return ~~~
this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


{__modelattribute__pet.owner.telephone=owner.telephone, pet.owner.id=owner.id, this.owner.id=owner.id, __modelattribute__pet.birthDate=pet.birthDate, this.owner.telephone=owner.telephone, __modelattribute__pet=pet, __modelattribute__pet.owner.address=owner.address, pet.owner.firstName=owner.firstName, __modelattribute__pet.owner.pets=owner.pets, __modelattribute__pet.type.name=pet.type.name, __modelattribute__pet.name=pet.name, __modelattribute__pet.id=pet.id, __modelattribute__pet.owner.lastName=owner.lastName, this.owner.lastName=owner.lastName, $z0=MethodWontHandleOp, __modelattribute__pet.type=pet.type, __modelattribute__pet.owner.city=owner.city, __modelattribute__pet.owner.firstName=owner.firstName, __modelattribute__pet.visits=pet.visits, this.pets=BottomNode, __modelattribute__pet.owner.id=owner.id, $r0=this.id, $r1=this.pets, pet.owner.telephone=owner.telephone, $r2=BottomNode, pet.owner.address=owner.address, this=Self, this.owner.firstName=owner.firstName, pet.owner.pets=owner.pets, __modelattribute__pet.owner=pet.owner, this.owner.address=owner.address, this.owner.city=owner.city, condition=Equals
| MethodWontHandleOp
| 0, this.owner.pets=owner.pets, pet.owner.lastName=owner.lastName, __modelattribute__pet.type.id=pet.type.id, pet.owner.city=owner.city, return="pets/createOrUpdatePetForm"}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.pets
| NullOp
DIR.java: updateRegion(): update region entry: $r1=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.Set
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Pet
AccessPath.java: getCollectionEntityType(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Pet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r0
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: isReturnTypeEntity(): check :java.util.Set
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Pet
AccessPath.java: getCollectionEntityType(): virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Pet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): java.util.Set
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Set
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)=~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone

, org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Pet.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: pets

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getPetsInternal
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: this
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, condition, $r1, $r2, this, $z0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getPetsInternal, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: this
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: typeId]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: ownerId]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= petId
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r0, org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r0.birthDate, $r0.type, $r0.type.name, $r0.type.id, $r0.owner, $r0.owner.address, $r0.owner.city, $r0.owner.telephone, $r0.owner.pets, $r0.owner.firstName, $r0.owner.lastName, $r0.owner.id, $r0.visits, $r0.name, $r0.id]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>()
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()
DIRRegionAnalyzer.java: constructDIR(): key = this.pets
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.pets
DIRRegionAnalyzer.java: constructDIR(): key = condition
DIRRegionAnalyzer.java: constructDIR(): val = NotEq
| this.pets
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): key = $r2
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = $z0
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.id
| | NullOp
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal() END
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


DIR.java: updateRegion(): update region entry: $r0=AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
~~~ $r0 ~~~
AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r0 ~~~
AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [$r0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$r0=?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0}
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, condition, $z0, $r0]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, condition=Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0, $z0=?
| Equals
| | pet.id
| | NullOp
| 1
| 0, $r0=?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: mergeSeqDirs(): key: $z0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r0
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| $r0
analysis/Utils.java: resolveTree(): resolvedValChild: this.pets
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:$r0
analysis/Utils.java: resolveTree(): top: AddWithFieldExprs
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): resolvedValChild: this.pets
analysis/Utils.java: resolveTree(): new top: AddWithFieldExprs
| this.pets
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=this.pets]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | pet.id
| | NullOp
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| pet.id
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: addPet
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.Owner, pet := @parameter0: org.springframework.samples.petclinic.owner.Pet, $z0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>(), if $z0 == 0 goto virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), $r0 = virtualinvoke this.<org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()>(), interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(pet), virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this), return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setOwner
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: owner
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: this
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: owner
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.birthDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.type.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.address
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.address
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.city
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.city
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.telephone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: owner.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(this)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [owner, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [this, pet]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: owner.id
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = pet.id
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.visits
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.owner.city, this.owner.pets, this.owner.id, this.owner.lastName, this.owner.telephone, this, this.owner.firstName, this.owner.address]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setOwner, [pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: owner
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: this
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.birthDate, this.type, this.type.name, this.type.id, this.owner, this.owner.address, this.owner.city, this.owner.telephone, this.owner.pets, this.owner.firstName, this.owner.lastName, this.owner.id, this.visits, this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.address
DIRRegionAnalyzer.java: handleSideEffects(): after: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.city
DIRRegionAnalyzer.java: handleSideEffects(): after: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): after: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIR.java: updateRegion(): update region entry: pet.owner.id=pet.id
DIR.java: updateRegion(): update region entry: pet.owner.telephone=this.telephone
DIR.java: updateRegion(): update region entry: pet.owner.lastName=this.lastName
DIR.java: updateRegion(): update region entry: pet.owner.address=this.address
DIR.java: updateRegion(): update region entry: pet.owner.pets=this.pets
DIR.java: updateRegion(): update region entry: pet.owner.firstName=this.firstName
DIR.java: updateRegion(): update region entry: pet.owner.city=this.city
~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


analysis/Utils.java: mergeSeqDirs(): following dir domain: [pet.owner.id, pet.owner.telephone, pet.owner.lastName, pet.owner.address, pet.owner.pets, pet.owner.firstName, pet.owner.city]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {pet.owner.id=pet.id, pet.owner.telephone=this.telephone, pet.owner.lastName=this.lastName, pet.owner.address=this.address, pet.owner.pets=this.pets, pet.owner.firstName=this.firstName, pet.owner.city=this.city}
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.id
analysis/Utils.java: mergeSeqDirs(): before resolution: pet.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: pet.id
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: pet.id
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): before resolution: this.telephone
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.telephone
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.telephone
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: this.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.lastName
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.address
analysis/Utils.java: mergeSeqDirs(): before resolution: this.address
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.address
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.address
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): before resolution: this.firstName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.firstName
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.firstName
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.city
analysis/Utils.java: mergeSeqDirs(): before resolution: this.city
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: resolveTree(): in: this.city
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): after resolution: this.city
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock2
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
this.pets

~~~ pet.owner.telephone ~~~
this.telephone


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


{__modelattribute__pet.owner.telephone=owner.telephone, pet.owner.id=owner.id, this.owner.id=owner.id, __modelattribute__pet.birthDate=pet.birthDate, this.owner.telephone=owner.telephone, __modelattribute__pet=pet, __modelattribute__pet.owner.address=owner.address, pet.owner.firstName=owner.firstName, __modelattribute__pet.owner.pets=owner.pets, __modelattribute__pet.type.name=pet.type.name, __modelattribute__pet.name=pet.name, __modelattribute__pet.id=pet.id, __modelattribute__pet.owner.lastName=owner.lastName, this.owner.lastName=owner.lastName, $z0=MethodWontHandleOp, __modelattribute__pet.type=pet.type, __modelattribute__pet.owner.city=owner.city, __modelattribute__pet.owner.firstName=owner.firstName, __modelattribute__pet.visits=pet.visits, this.pets=BottomNode, __modelattribute__pet.owner.id=owner.id, $r0=this.id, $r1=this.pets, pet.owner.telephone=owner.telephone, $r2=BottomNode, pet.owner.address=owner.address, this=Self, this.owner.firstName=owner.firstName, pet.owner.pets=owner.pets, __modelattribute__pet.owner=pet.owner, this.owner.address=owner.address, this.owner.city=owner.city, condition=Equals
| MethodWontHandleOp
| 0, this.owner.pets=owner.pets, pet.owner.lastName=owner.lastName, __modelattribute__pet.type.id=pet.type.id, pet.owner.city=owner.city, return="pets/createOrUpdatePetForm"}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIR.java: updateRegion(): update region entry: this.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets
DIR.java: updateRegion(): update region entry: $r1=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: pet.owner.id=pet.id
DIR.java: updateRegion(): update region entry: $r2=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2
DIR.java: updateRegion(): update region entry: pet.owner.telephone=this.telephone
DIR.java: updateRegion(): update region entry: pet.owner.address=this.address
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: pet.owner.pets=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIR.java: updateRegion(): update region entry: pet.owner.firstName=this.firstName
DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: pet.owner.lastName=this.lastName
DIR.java: updateRegion(): update region entry: $z0=?
| Equals
| | pet.id
| | NullOp
| 1
| 0
DIR.java: updateRegion(): update region entry: pet.owner.city=this.city
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets


DIRRegionAnalyzer.java: handleSideEffects(): ith formal: pet
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: pet
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: pet
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.birthDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.type
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.type.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.type.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.address
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.address
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.address
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.city
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.city
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.city
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.telephone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = ?
| Equals
| | owner.pets
| | NullOp
| BottomNode
| owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: pet.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = pet.id
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.visits
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: owner
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.address
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.city
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.pets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner), org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal(), org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap), org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet), org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [pet, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [pet, owner]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = ?
| Equals
| | owner.pets
| | NullOp
| BottomNode
| owner.pets
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.pets, $r0, $r1, pet.owner.id, $r2, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, pet.owner.firstName, condition, pet.owner.lastName, $z0, pet.owner.city, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = addPet, [pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.firstName, pet.owner.lastName, pet.owner.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: pet
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [pet.birthDate, pet.type, pet.type.name, pet.type.id, pet.owner, pet.owner.address, pet.owner.city, pet.owner.telephone, pet.owner.pets, pet.owner.firstName, pet.owner.lastName, pet.owner.id, pet.visits, pet.name, pet.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: owner
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.address, this.city, this.telephone, this.pets, this.firstName, this.lastName, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.address
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.address
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.city
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.city
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.telephone
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: owner.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: handleSideEffects(): for key = pet.owner.id
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: pet.id
DIRRegionAnalyzer.java: handleSideEffects(): after: pet.id
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: constructDIR(): savestmt invoke expr: interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r0
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $r0 ~~~
this.pets

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone


DIRRegionAnalyzer.java: constructDIR(): ve map:{$r0=this.pets, pet.owner.id=pet.id, pet.owner.telephone=owner.telephone, pet.owner.lastName=owner.lastName, pet.owner.address=owner.address, pet.owner.firstName=owner.firstName, pet.owner.city=owner.city}
DIRRegionAnalyzer.java: constructDIR(): repo: this.pets
DIRRegionAnalyzer.java: constructDIR(): argType: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): table: org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): attributes: [birthDate, name, id]
DIRRegionAnalyzer.java: constructDIR(): fieldVarNodes: [pet.birthDate, pet.name, pet.id]
DIRRegionAnalyzer.java: constructDIR(): listNode.columns: [FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
DIRRegionAnalyzer.java: constructDIR(): mapping: this.pets -> Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
DIRRegionAnalyzer.java: constructDIR(): savestmt args: [pet]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "redirect:/owners/{ownerId}"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.pets

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"redirect:/owners/{ownerId}"

~~~ this.pets ~~~
Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"redirect:/owners/{ownerId}"

~~~ this.pets ~~~
Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


DIR.java: updateRegion(): update region entry: this.pets=Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: pet.owner.id=pet.id
DIR.java: updateRegion(): update region entry: pet.owner.telephone=owner.telephone
DIR.java: updateRegion(): update region entry: pet.owner.lastName=owner.lastName
DIR.java: updateRegion(): update region entry: pet.owner.address=owner.address
DIR.java: updateRegion(): update region entry: pet.owner.firstName=owner.firstName
DIR.java: updateRegion(): update region entry: pet.owner.city=owner.city
DIR.java: updateRegion(): update region entry: return="redirect:/owners/{ownerId}"
~~~ $r0 ~~~
this.pets

~~~ pet.owner.address ~~~
owner.address

~~~ pet.owner.city ~~~
owner.city

~~~ pet.owner.firstName ~~~
owner.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
owner.lastName

~~~ pet.owner.telephone ~~~
owner.telephone

~~~ return ~~~
"redirect:/owners/{ownerId}"

~~~ this.pets ~~~
Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: Equals
| MethodWontHandleOp
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| MethodWontHandleOp
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [__modelattribute__pet.owner.telephone, pet.owner.id, __modelattribute__pet.birthDate, __modelattribute__pet, __modelattribute__pet.owner.address, pet.owner.firstName, __modelattribute__pet.owner.pets, __modelattribute__pet.type.name, __modelattribute__pet.name, __modelattribute__pet.id, __modelattribute__pet.owner.lastName, __modelattribute__pet.type, __modelattribute__pet.owner.city, __modelattribute__pet.owner.firstName, __modelattribute__pet.visits, this.pets, __modelattribute__pet.owner.id, $r0, pet.owner.telephone, pet.owner.address, pet.owner.pets, __modelattribute__pet.owner, pet.owner.lastName, __modelattribute__pet.type.id, pet.owner.city, return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {__modelattribute__pet.owner.telephone=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone, pet.owner.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id, __modelattribute__pet.birthDate=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate, __modelattribute__pet=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet, __modelattribute__pet.owner.address=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address, pet.owner.firstName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName, __modelattribute__pet.owner.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets, __modelattribute__pet.type.name=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name, __modelattribute__pet.name=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name, __modelattribute__pet.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id, __modelattribute__pet.owner.lastName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName, __modelattribute__pet.type=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type, __modelattribute__pet.owner.city=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city, __modelattribute__pet.owner.firstName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName, __modelattribute__pet.visits=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits, this.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id, __modelattribute__pet.owner.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id, $r0=?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets, pet.owner.telephone=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone, pet.owner.address=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address, pet.owner.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets, __modelattribute__pet.owner=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner, pet.owner.lastName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName, __modelattribute__pet.type.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id, pet.owner.city=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city, return=?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"}
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.telephone
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.telephone
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.telephone
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.telephone
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.birthDate
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.address
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.address
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.address
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.address
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.address
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:owner.firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.firstName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.firstName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.type.name
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.type.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.type.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.type.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.type.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.name
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.type
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.type
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.type
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.type
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.type
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.city
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.city
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.city
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.city
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.city
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.firstName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.firstName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.visits
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.visits
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.visits
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.visits
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.visits
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
analysis/Utils.java: mergeSeqDirs(): key: this.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| pet
| List
| | pet.birthDate
| | pet.name
| | pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| pet.birthDate
| pet.name
| pet.id
analysis/Utils.java: resolveTree(): i = 0 child of top:pet.birthDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.birthDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.telephone
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.telephone
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:owner.telephone
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.telephone
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.telephone
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.address
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.address
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:owner.address
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.address
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.address
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:pet.owner.pets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.owner.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.pets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.owner
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.owner
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.owner
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.owner
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.owner
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.lastName
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:owner.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
analysis/Utils.java: mergeSeqDirs(): key: __modelattribute__pet.type.id
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:pet.type.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__pet.type.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__pet.type.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: pet.type.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
analysis/Utils.java: mergeSeqDirs(): key: pet.owner.city
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:owner.city
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:owner.city
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.city
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: owner.city
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
MethodWontHandleOp

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:"pets/createOrUpdatePetForm"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:"redirect:/owners/{ownerId}"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "redirect:/owners/{ownerId}"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "pets/createOrUpdatePetForm"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| MethodWontHandleOp
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ $z0 ~~~
MethodWontHandleOp

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ $z0 ~~~
MethodWontHandleOp

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ $z0 ~~~
MethodWontHandleOp

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.telephone=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
DIR.java: updateRegion(): update region entry: pet.owner.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
DIR.java: updateRegion(): update region entry: __modelattribute__pet.birthDate=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
DIR.java: updateRegion(): update region entry: __modelattribute__pet=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.address=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
DIR.java: updateRegion(): update region entry: pet.owner.firstName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type.name=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
DIR.java: updateRegion(): update region entry: __modelattribute__pet.name=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
DIR.java: updateRegion(): update region entry: __modelattribute__pet.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.lastName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
DIR.java: updateRegion(): update region entry: $z0=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.city=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.firstName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.visits=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
DIR.java: updateRegion(): update region entry: this.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
DIR.java: updateRegion(): update region entry: pet.owner.telephone=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
DIR.java: updateRegion(): update region entry: pet.owner.address=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: pet.owner.pets=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
DIR.java: updateRegion(): update region entry: __modelattribute__pet.owner=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
DIR.java: updateRegion(): update region entry: condition=Equals
| MethodWontHandleOp
| 0
DIR.java: updateRegion(): update region entry: pet.owner.lastName=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
DIR.java: updateRegion(): update region entry: __modelattribute__pet.type.id=?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
DIR.java: updateRegion(): update region entry: pet.owner.city=?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
DIR.java: updateRegion(): update region entry: return=?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ $z0 ~~~
MethodWontHandleOp

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


Resultant dag : ~~~ $r0 ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

~~~ $z0 ~~~
MethodWontHandleOp

~~~ __modelattribute__pet ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

~~~ __modelattribute__pet.birthDate ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

~~~ __modelattribute__pet.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

~~~ __modelattribute__pet.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

~~~ __modelattribute__pet.owner ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

~~~ __modelattribute__pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

~~~ __modelattribute__pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

~~~ __modelattribute__pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

~~~ __modelattribute__pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

~~~ __modelattribute__pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

~~~ __modelattribute__pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

~~~ __modelattribute__pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

~~~ __modelattribute__pet.type ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

~~~ __modelattribute__pet.type.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

~~~ __modelattribute__pet.type.name ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

~~~ __modelattribute__pet.visits ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

~~~ condition ~~~
Equals
| MethodWontHandleOp
| 0

~~~ pet.owner.address ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

~~~ pet.owner.city ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

~~~ pet.owner.firstName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

~~~ pet.owner.id ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

~~~ pet.owner.lastName ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

~~~ pet.owner.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

~~~ pet.owner.telephone ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

~~~ return ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id


final FuncStackAnalyzer3 = 
{org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)=~~~ this ~~~
Self

~~~ this.owner.address ~~~
owner.address

~~~ this.owner.city ~~~
owner.city

~~~ this.owner.firstName ~~~
owner.firstName

~~~ this.owner.id ~~~
owner.id

~~~ this.owner.lastName ~~~
owner.lastName

~~~ this.owner.pets ~~~
owner.pets

~~~ this.owner.telephone ~~~
owner.telephone

, org.springframework.samples.petclinic.owner.Owner: java.util.Set getPetsInternal()=~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.pets
| NullOp

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)=~~~ $r0 ~~~
?
| NotEq
| | ?
| | | Equals
| | | | pet.id
| | | | NullOp
| | | 1
| | | 0
| | 0
| AddWithFieldExprs
| | this.pets
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| this.pets

~~~ $r1 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ $r2 ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| $r2

~~~ $z0 ~~~
?
| Equals
| | pet.id
| | NullOp
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | Equals
| | | pet.id
| | | NullOp
| | 1
| | 0
| 0

~~~ pet.owner.address ~~~
this.address

~~~ pet.owner.city ~~~
this.city

~~~ pet.owner.firstName ~~~
this.firstName

~~~ pet.owner.id ~~~
pet.id

~~~ pet.owner.lastName ~~~
this.lastName

~~~ pet.owner.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ pet.owner.telephone ~~~
this.telephone

~~~ return ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

~~~ this ~~~
Self

~~~ this.pets ~~~
?
| Equals
| | this.pets
| | NullOp
| BottomNode
| this.pets

, org.springframework.samples.petclinic.model.BaseEntity: boolean isNew()=~~~ $r0 ~~~
this.id

~~~ $z0 ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ condition ~~~
NotEq
| this.id
| NullOp

~~~ return ~~~
?
| Equals
| | this.id
| | NullOp
| 1
| 0

~~~ this ~~~
Self

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 29
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [__modelattribute__pet.owner.telephone, pet.owner.id, __modelattribute__pet.birthDate, __modelattribute__pet, __modelattribute__pet.owner.address, pet.owner.firstName, __modelattribute__pet.owner.pets, __modelattribute__pet.type.name, __modelattribute__pet.name, __modelattribute__pet.id, __modelattribute__pet.owner.lastName, $z0, __modelattribute__pet.type, __modelattribute__pet.owner.city, __modelattribute__pet.owner.firstName, __modelattribute__pet.visits, this.pets, __modelattribute__pet.owner.id, $r0, pet.owner.telephone, pet.owner.address, this, pet.owner.pets, __modelattribute__pet.owner, condition, pet.owner.lastName, __modelattribute__pet.type.id, pet.owner.city, return]
Final veMap of __modelattribute__pet.owner.telephone = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.telephone
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.id = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.birthDate = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.birthDate
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner.address = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.address
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.firstName = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner.pets = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.pets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.type.name = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.type.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.name = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.id = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner.lastName = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $z0 = 
MethodWontHandleOp
SavePostProcess.java: SavePostProcess(): repo varnode: $z0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.type = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.type
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner.city = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.city
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner.firstName = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.visits = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.visits
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this.pets = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| Save
| | $r0
| | Tuple
| | | pet
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
SavePostProcess.java: SavePostProcess(): repo varnode: this.pets
SavePostProcess.java: SavePostProcess(): repo type = org.springframework.samples.petclinic.owner.PetRepository
entity = org.springframework.samples.petclinic.owner.Pet
entity soot cls: org.springframework.samples.petclinic.owner.Pet
field: <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>
annotation tag: Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

annotation tag: Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
field: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>
annotation tag: Annotation type: Ljavax/persistence/ManyToOne; without elements
annotation tag: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: typeId

field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: typeId

]
field: <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
annotation tag: Annotation type: Ljavax/persistence/ManyToOne; without elements
annotation tag: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: ownerId

field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: ownerId

]
field: <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>
annotation tag: Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

field tags: [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: petId

]
SavePostProcess.java: handleCascading(): accesspathsofarg: [pet.owner.id, pet.owner.telephone, pet.owner.lastName, pet.owner.address, pet.owner.firstName, pet.owner.pets, pet.owner.city]
SavePostProcess.java: handleCascading(): check mapDBFetchAccessGraph in savepostProcess
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= null
SavePostProcess.java: handleCascading(): coll f: visits
SavePostProcess.java: transformSave(): saveNode = Save
| $r0
| Tuple
| | pet
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
SavePostProcess.java: transformSave(): columns: [FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): idInd = 2
SavePostProcess.java: transformSave(): idField: pet.id
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.pets
| | | Equals
| | | | FieldRef(this.pets.id)
| | | | pet.id
| | EmptySet
| UnionOp
| | this.pets
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.pets
| | | Sel
| | | | Cartesian
| | | | | this.pets
| | | | Equals
| | | | | FieldRef(this.pets.id)
| | | | | pet.id
| | List
| | | pet.birthDate
| | | pet.name
| | | pet.id
Final veMap of __modelattribute__pet.owner.id = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r0 = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets
SavePostProcess.java: SavePostProcess(): repo varnode: $r0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.telephone = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.telephone
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.address = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.address
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.pets = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.pets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.owner = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.owner
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of condition = 
Equals
| MethodWontHandleOp
| 0
SavePostProcess.java: SavePostProcess(): repo varnode: condition
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.lastName = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__pet.type.id = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__pet.type.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of pet.owner.city = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city
SavePostProcess.java: SavePostProcess(): repo varnode: pet.owner.city
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: __modelattribute__pet.owner.telephone
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| __modelattribute__pet.owner.telephone

key: pet.owner.id
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| pet.id

key: __modelattribute__pet.birthDate
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.birthDate
| __modelattribute__pet.birthDate

key: __modelattribute__pet
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet
| __modelattribute__pet

key: __modelattribute__pet.owner.address
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| __modelattribute__pet.owner.address

key: pet.owner.firstName
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| owner.firstName

key: __modelattribute__pet.owner.pets
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| __modelattribute__pet.owner.pets

key: __modelattribute__pet.type.name
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.name
| __modelattribute__pet.type.name

key: __modelattribute__pet.name
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.name
| __modelattribute__pet.name

key: __modelattribute__pet.id
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.id
| __modelattribute__pet.id

key: __modelattribute__pet.owner.lastName
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| __modelattribute__pet.owner.lastName

key: $z0
value: MethodWontHandleOp

key: __modelattribute__pet.type
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type
| __modelattribute__pet.type

key: __modelattribute__pet.owner.city
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| __modelattribute__pet.owner.city

key: __modelattribute__pet.owner.firstName
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.firstName
| __modelattribute__pet.owner.firstName

key: __modelattribute__pet.visits
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.visits
| __modelattribute__pet.visits

key: this.pets
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| this.pets
| ?
| | Equals
| | | Sel
| | | | Cartesian
| | | | | this.pets
| | | | Equals
| | | | | FieldRef(this.pets.id)
| | | | | pet.id
| | | EmptySet
| | UnionOp
| | | this.pets
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id
| | UnionOp
| | | RelationalMinus
| | | | Cartesian
| | | | | this.pets
| | | | Sel
| | | | | Cartesian
| | | | | | this.pets
| | | | | Equals
| | | | | | FieldRef(this.pets.id)
| | | | | | pet.id
| | | List
| | | | pet.birthDate
| | | | pet.name
| | | | pet.id

key: __modelattribute__pet.owner.id
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.id
| __modelattribute__pet.owner.id

key: $r0
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| $r0
| this.pets

key: pet.owner.telephone
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.telephone
| owner.telephone

key: pet.owner.address
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.address
| owner.address

key: this
value: Self

key: pet.owner.pets
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.pets
| pet.owner.pets

key: __modelattribute__pet.owner
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.owner
| __modelattribute__pet.owner

key: condition
value: Equals
| MethodWontHandleOp
| 0

key: pet.owner.lastName
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.lastName
| owner.lastName

key: __modelattribute__pet.type.id
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| pet.type.id
| __modelattribute__pet.type.id

key: pet.owner.city
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| owner.city
| owner.city

key: return
value: ?
| NotEq
| | MethodWontHandleOp
| | 0
| "pets/createOrUpdatePetForm"
| "redirect:/owners/{ownerId}"





























Tables and Fields :

Pet fields = 
{owner=Owner, visits=Visit, petId=FieldData, name=FieldData, typeId=FieldData, id=FieldData, type=PetType, ownerId=FieldData, birthDate=FieldData}

{}
{}
Time elapsed: 979.378 seconds
