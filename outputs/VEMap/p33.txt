EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
EqSQLDriverTest.java: main(): Got the repo option value: this.vets
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Desktop/current/dbridge_loop
starttime, test: 1679029345155
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.util.Map is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.ResponseBody is a phantom class!
Warning: javax.xml.bind.annotation.XmlRootElement is a phantom class!
Warning: javax.xml.bind.annotation.XmlElement is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: org.springframework.data.repository.Repository is a phantom class!
Warning: org.springframework.dao.DataAccessException is a phantom class!
Warning: org.springframework.cache.annotation.Cacheable is a phantom class!
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:25
| | Id:26
| Union
| | Project
| | | Select
| | | | Id:26
| | | | Id:18
| | | Id:21
| | Project
| | | Select
| | | | Id:26
| | | | Eq
| | | | | Id:18
| | | | | Zero
| | | Id:24

{<col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=18, <list1>=21, <init_val>=25, <itr>=27, <coll>=26}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:36
| | | Id:31
| | Id:33
| Id:35

{<list>=33, <elseval>=34, <col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=31, <list1>=21, <init_val>=35, <itr>=37, <coll>=36}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:41
| | Select
| | | Id:41
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:49
| | | | | | Id:45
| | | | | Id
| Project
| | Id:47
| | Join
| | | Id:49
| | | Id:45

{<list>=47, <repo>=41, <cond>=31, <nop>=46, <init_val>=48, <join_right>=45, <itr>=50, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=49}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:61
| | Select
| | | Id:57
| | | In
| | | | Id:59
| | | | Id:63
| Id:62

{<list>=61, <rel>=57, <repo>=41, <cond>=31, <nop>=46, <clm>=59, <init_val>=62, <join_right>=45, <itr>=64, <receiver>=54, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=63}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:71
| | | In
| | | | Id:73
| | | | Id:77
| | Id:75
| Id:76

{<list>=61, <rel>=71, <repo>=41, <cond>=31, <nop>=46, <clm>=73, <init_val>=76, <join_right>=45, <itr>=78, <clmagg>=75, <receiver>=54, <aggvar>=68, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=77}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Desktop/current/dbridge_loop/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Desktop/current/dbridge_loop/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: showVetList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.vet.VetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String showVetList(java.util.Map)
    {
        org.springframework.samples.petclinic.vet.VetController this;
        java.util.Map model;
        org.springframework.samples.petclinic.vet.Vets vets, $r0;
        java.util.List $r1;
        org.springframework.samples.petclinic.vet.VetRepository $r2;
        java.util.Collection $r3;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.vet.Vets;

        specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();

        vets = $r0;

        $r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();

        $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;

        $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets);

        return "vets/vetList";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String showVetList(java.util.Map)
    {
        org.springframework.samples.petclinic.vet.VetController this;
        java.util.Map model;
        org.springframework.samples.petclinic.vet.Vets vets, $r0;
        java.util.List $r1;
        org.springframework.samples.petclinic.vet.VetRepository $r2;
        java.util.Collection $r3;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.vet.Vets;

        specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();

        vets = $r0;

        $r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();

        $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;

        $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets);

        return "vets/vetList";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: vets
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: vets
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: showVetList is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.vet.VetController;
model := @parameter0: java.util.Map;
$r0 = new org.springframework.samples.petclinic.vet.Vets;
specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();
vets = $r0;
$r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();
$r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;
$r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();
interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);
interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets);
return "vets/vetList";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.vet.VetController;
model := @parameter0: java.util.Map;
$r0 = new org.springframework.samples.petclinic.vet.Vets;
specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();
vets = $r0;
$r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();
$r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;
$r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();
interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);
interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets);
return "vets/vetList";


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.vet.VetController, model := @parameter0: java.util.Map, $r0 = new org.springframework.samples.petclinic.vet.Vets, specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>(), vets = $r0, $r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>(), $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>, $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>(), interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3), interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets), return "vets/vetList"]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
SPECIAL edge: specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>() in <org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)> ==> <org.springframework.samples.petclinic.vet.Vets: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>() in <org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)> ==> <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>
SPECIAL edge: specialinvoke this.<java.lang.Object: void <init>()>() in <org.springframework.samples.petclinic.vet.Vets: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()> ==> <java.util.ArrayList: void <init>()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.vet.Vets: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getVetList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.vet.Vets
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.List getVetList()
    {
        org.springframework.samples.petclinic.vet.Vets this;
        java.util.List $r0, $r1;
        java.util.ArrayList $r2;

        this := @this: org.springframework.samples.petclinic.vet.Vets;

        $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

        if $r0 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getVetList is Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.vet.Vets;
$r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.ArrayList;
specialinvoke $r2.<java.util.ArrayList: void <init>()>();
this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
0 -> 2
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2], 2=[], 0=[1, 2]}
removeVertex: incoming = {1=[0], 2=[0, 1], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2], 2=[]}
removeVertex: incoming = {1=[], 2=[1]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [2, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 2]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[], R_IfThen0=[2]}
removeVertex: incoming = {2=[R_IfThen0], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[]}
removeVertex: incoming = {2=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- R_IfThen0
|  |  +- 0
|  |  +- 1
|  +- 2

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 2 ]
this := @this: org.springframework.samples.petclinic.vet.Vets;
$r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;
if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

Block 1:
[preds: 0 ] [succs: 2 ]
$r2 = new java.util.ArrayList;
specialinvoke $r2.<java.util.ArrayList: void <init>()>();
this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2;

Block 2:
[preds: 0 1 ] [succs: ]
$r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 2], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_Sequential1, R_IfThen0=R_Sequential1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.ArrayList: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
FuncStackInfoBuilder.java: internalTransformHelper(): {org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()=    public java.util.List getVetList()
    {
        org.springframework.samples.petclinic.vet.Vets this;
        java.util.List $r0, $r1;
        java.util.ArrayList $r2;

        this := @this: org.springframework.samples.petclinic.vet.Vets;

        $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

        if $r0 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2;

     label1:
        $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>;

        return $r1;
    }
, org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)=    public java.lang.String showVetList(java.util.Map)
    {
        org.springframework.samples.petclinic.vet.VetController this;
        java.util.Map model;
        org.springframework.samples.petclinic.vet.Vets vets, $r0;
        java.util.List $r1;
        org.springframework.samples.petclinic.vet.VetRepository $r2;
        java.util.Collection $r3;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.vet.Vets;

        specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();

        vets = $r0;

        $r1 = virtualinvoke vets.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();

        $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;

        $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", vets);

        return "vets/vetList";
    }
}

Decompiling org.springframework.samples.petclinic.vet.VetController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.vet.VetController: void <init>(org.springframework.samples.petclinic.vet.VetRepository)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.vet.VetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.samples.petclinic.vet.VetRepository)
    {
        org.springframework.samples.petclinic.vet.VetController this;
        org.springframework.samples.petclinic.vet.VetRepository clinicService;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        clinicService := @parameter0: org.springframework.samples.petclinic.vet.VetRepository;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets> = clinicService;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: showVetList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.vet.VetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String showVetList(java.util.Map)
    {
        org.springframework.samples.petclinic.vet.VetController this;
        java.util.Map model;
        org.springframework.samples.petclinic.vet.Vets vets, $r0;
        java.util.List $r1;
        org.springframework.samples.petclinic.vet.VetRepository $r2;
        java.util.Collection $r3;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.vet.Vets;

        specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();

        vets = $r0;

        $r1 = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();

        $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;

        $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", $r0);

        return "vets/vetList";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.Vets showResourcesVetList()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: showResourcesVetList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.vet.VetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.samples.petclinic.vet.Vets showResourcesVetList()
    {
        org.springframework.samples.petclinic.vet.VetController this;
        org.springframework.samples.petclinic.vet.Vets vets, $r0;
        java.util.List $r1;
        org.springframework.samples.petclinic.vet.VetRepository $r2;
        java.util.Collection $r3;

        this := @this: org.springframework.samples.petclinic.vet.VetController;

        $r0 = new org.springframework.samples.petclinic.vet.Vets;

        specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>();

        vets = $r0;

        $r1 = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>();

        $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>;

        $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>();

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map), org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: org.springframework.samples.petclinic.vet.VetController, model := @parameter0: java.util.Map, $r0 = new org.springframework.samples.petclinic.vet.Vets, specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>(), vets = $r0, $r1 = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>(), $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>, $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>(), interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3), interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", $r0), return "vets/vetList"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)has typemap: {}
ARegion.java: analyze(): set cur method of analyzer to: showVetList
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.vet.VetController, model := @parameter0: java.util.Map, $r0 = new org.springframework.samples.petclinic.vet.Vets, specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>(), vets = $r0, $r1 = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>(), $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>, $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>(), interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3), interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", $r0), return "vets/vetList"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.vet.VetController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter0: java.util.Map
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new org.springframework.samples.petclinic.vet.Vets
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.vet.Vets: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = vets = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: vets
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Vets.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlRootElement; without elements
]
AccessPath.java: replaceBase(): input access path: vets.vets
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getVetList
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>
construct/Utils.java: parseObjectInvoke(): methodName = getVetList
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList(), org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock0
| | BasicBlock1
, | BasicBlock2]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock1
ARegion.java: analyze(): set cur method of analyzer to: getVetList
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.vet.Vets
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.vets
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$r0 != null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.vets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.vets
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


ARegion.java: analyze(): set cur method of analyzer to: getVetList
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new java.util.ArrayList
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r2.<java.util.ArrayList: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r2.<java.util.ArrayList: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.ArrayList: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.vets -> $r2
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this.vets ~~~
$r2


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this.vets ~~~
$r2


DIR.java: updateRegion(): update region entry: this.vets=$r2
~~~ this.vets ~~~
$r2


DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ this.vets ~~~
$r2


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: NotEq
| this.vets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: Equals
| this.vets
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: mergeSeqDirs(): following dir domain: [this.vets]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this.vets=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets}
analysis/Utils.java: mergeSeqDirs(): key: this.vets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.vets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.vets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.vets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.vets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.vets=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIR.java: updateRegion(): update region entry: $r0=this.vets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.vets
| NullOp
~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [this, this.vets, $r0, condition]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {this=Self, this.vets=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets, $r0=this.vets, condition=NotEq
| this.vets
| NullOp}
analysis/Utils.java: mergeSeqDirs(): key: this
analysis/Utils.java: mergeSeqDirs(): before resolution: Self
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: Self
analysis/Utils.java: mergeSeqDirs(): key: this.vets
analysis/Utils.java: mergeSeqDirs(): before resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.vets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.vets
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.vets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.vets
analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): key: $r0
analysis/Utils.java: mergeSeqDirs(): before resolution: this.vets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: this.vets
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: mergeSeqDirs(): after resolution: this.vets
analysis/Utils.java: mergeSeqDirs(): key: condition
analysis/Utils.java: mergeSeqDirs(): before resolution: NotEq
| this.vets
| NullOp
analysis/Utils.java: mergeSeqDirs(): precedingDIR: 
analysis/Utils.java: resolveTree(): in: NotEq
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:this.vets
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.vets
analysis/Utils.java: resolveTree(): out: NotEq
| this.vets
| NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: NotEq
| this.vets
| NullOp
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getVetList
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.vet.Vets, $r0 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, if $r0 != null goto $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, $r2 = new java.util.ArrayList, specialinvoke $r2.<java.util.ArrayList: void <init>()>(), this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets> = $r2, $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>, return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<org.springframework.samples.petclinic.vet.Vets: java.util.List vets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.vets
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
this.vets

~~~ return ~~~
this.vets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
this.vets

~~~ return ~~~
this.vets


DIR.java: updateRegion(): update region entry: $r1=this.vets
DIR.java: updateRegion(): update region entry: return=this.vets
~~~ $r1 ~~~
this.vets

~~~ return ~~~
this.vets


analysis/Utils.java: mergeSeqDirs(): following dir domain: [$r1, return]
analysis/Utils.java: mergeSeqDirs(): following dir: ~~~ $r1 ~~~
this.vets

~~~ return ~~~
this.vets


analysis/Utils.java: mergeSeqDirs(): following dir vemap: {$r1=this.vets, return=this.vets}
analysis/Utils.java: mergeSeqDirs(): key: $r1
analysis/Utils.java: mergeSeqDirs(): before resolution: this.vets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: resolveTree(): in: this.vets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): key: return
analysis/Utils.java: mergeSeqDirs(): before resolution: this.vets
analysis/Utils.java: mergeSeqDirs(): precedingDIR: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: resolveTree(): in: this.vets
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: resolveTree(): out: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: mergeSeqDirs(): after resolution: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
analysis/Utils.java: mergeSeqDirs(): mergedDIR: ~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


analysis/Utils.java: mergeSeqDirs(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock2
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r1 ~~~
this.vets

~~~ return ~~~
this.vets


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


{$r0=this.vets, condition=NotEq
| this.vets
| NullOp, $r1=this.vets, this=Self, this.vets=$r2, return=this.vets}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.vets=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIR.java: updateRegion(): update region entry: $r0=this.vets
DIR.java: updateRegion(): update region entry: condition=NotEq
| this.vets
| NullOp
DIR.java: updateRegion(): update region entry: $r1=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIR.java: updateRegion(): update region entry: return=?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/List<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlElement; without elements
]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.vet.Vet
AccessPath.java: getCollectionEntityType(): virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/List<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlElement; without elements
]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/vet/Vet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/List<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlElement; without elements
]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.vet.Vet
AccessPath.java: getCollectionEntityType(): virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/List<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlElement; without elements
]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/vet/Vet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()=~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getVetList
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.vet.Vets
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.vets]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.vets
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, this.vets, $r0, condition, $r1, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList(), org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.vets]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = ?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getVetList, [$r0.vets]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.vets]
DIRRegionAnalyzer.java: handleSideEffects(): callee: org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ this ~~~
Self

~~~ vets.vets ~~~
$r0.vets


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.vets
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: ?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
DIRRegionAnalyzer.java: handleSideEffects(): after: ?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.vet.Vet fields = []
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): accesspaths = []
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke $r0.<org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()>()
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = this.vets
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.vets
DIRRegionAnalyzer.java: constructDIR(): key = condition
DIRRegionAnalyzer.java: constructDIR(): val = NotEq
| this.vets
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = ?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList() END
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = this.<org.springframework.samples.petclinic.vet.VetController: org.springframework.samples.petclinic.vet.VetRepository vets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r2 -> this.vets
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findAll
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>
construct/Utils.java: parseObjectInvoke(): methodName = findAll
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r2
DIRRegionAnalyzer.java: valIsRepository(): refType: org.springframework.samples.petclinic.vet.VetRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: org.springframework.samples.petclinic.vet.VetRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): Case : findAll
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
Utils.java: getRelExpForMethod(): actualargs = []
Utils.java: getRelExpForMethod(): methodInvoked = <org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
construct/Utils.java: parseObjectInvoke(): relExpAndJoinedField = null
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/vet/Vet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.Collection
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.vet.Vet
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/vet/Vet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r3
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
AccessPath.java: isReturnTypeEntity(): check :java.util.Collection
AccessPath.java: isReturnTypeEntity(): tags = [Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.vet.Vet
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
AccessPath.java: getCollectionEntityType(): [Signature: ()Ljava/util/Collection<Lorg/springframework/samples/petclinic/vet/Vet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

Annotation: type: Lorg/springframework/cache/annotation/Cacheable; num elems: 1 elems: 
Annotation Element: kind: [ name: value values: [Annotation Element: kind: s name: null value: vets]

]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/vet/Vet
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): java.util.Collection
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Collection
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()=~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

, org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()=~~~ return ~~~
Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findAll
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.vet.Vet fields = []
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r3, org.springframework.samples.petclinic.vet.Vet
DIRRegionAnalyzer.java: constructDIR(): accesspaths = []
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList(), org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r2.<org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList(), org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)]
DIRRegionAnalyzer.java: constructDIR(): key= return
 value= Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.vet.Vet
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.vet.Vet
NRA.java: processTableandFields: org.springframework.samples.petclinic.vet.Vet fields = []
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.vet.Vet
NRA.java: genExprNra(): org.springframework.samples.petclinic.vet.Vet fields= []
NRA.java: genExprNra(): fields count= 0
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): ListNode columns=[]
NRA.java: genExprNra(): projectNode name: Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return
 value : 
 Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List
DIRRegionAnalyzer.java: constructDIR(): leftval = $r3
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll() END
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r3)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: addAll
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.List: boolean addAll(java.util.Collection)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("vets", $r0)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__vets
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Vets.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/xml/bind/annotation/XmlRootElement; without elements
]
AccessPath.java: replaceBase(): input access path: __modelattribute__vets.vets
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "vets/vetList"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ $r2 ~~~
this.vets

~~~ $r3 ~~~
Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List

~~~ __modelattribute__vets.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ return ~~~
"vets/vetList"

~~~ this ~~~
Self

~~~ vets.vets ~~~
$r0.vets


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ $r2 ~~~
this.vets

~~~ $r3 ~~~
Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List

~~~ __modelattribute__vets.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ return ~~~
"vets/vetList"

~~~ this ~~~
Self

~~~ vets.vets ~~~
$r0.vets


DIR.java: updateRegion(): update region entry: $r0.vets=?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
DIR.java: updateRegion(): update region entry: $r2=this.vets
DIR.java: updateRegion(): update region entry: $r3=Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List
DIR.java: updateRegion(): update region entry: __modelattribute__vets.vets=?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return="vets/vetList"
DIR.java: updateRegion(): update region entry: vets.vets=$r0.vets
~~~ $r0.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ $r2 ~~~
this.vets

~~~ $r3 ~~~
Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List

~~~ __modelattribute__vets.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ return ~~~
"vets/vetList"

~~~ this ~~~
Self

~~~ vets.vets ~~~
$r0.vets


Resultant dag : ~~~ $r0.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ $r2 ~~~
this.vets

~~~ $r3 ~~~
Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List

~~~ __modelattribute__vets.vets ~~~
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

~~~ return ~~~
"vets/vetList"

~~~ this ~~~
Self

~~~ vets.vets ~~~
$r0.vets


final FuncStackAnalyzer3 = 
{org.springframework.samples.petclinic.vet.Vets: java.util.List getVetList()=~~~ $r0 ~~~
this.vets

~~~ $r1 ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ condition ~~~
NotEq
| this.vets
| NullOp

~~~ return ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

~~~ this ~~~
Self

~~~ this.vets ~~~
?
| Equals
| | this.vets
| | NullOp
| $r2
| this.vets

, org.springframework.samples.petclinic.vet.VetRepository: java.util.Collection findAll()=~~~ return ~~~
Sel
| ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| NullOp

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: org.springframework.samples.petclinic.vet.VetController: java.lang.String showVetList(java.util.Map)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 7
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r0.vets, $r2, $r3, __modelattribute__vets.vets, this, return, vets.vets]
Final veMap of $r0.vets = 
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
SavePostProcess.java: SavePostProcess(): repo varnode: $r0.vets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2 = 
this.vets
SavePostProcess.java: SavePostProcess(): repo varnode: $r2
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3 = 
Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List
SavePostProcess.java: SavePostProcess(): repo varnode: $r3
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__vets.vets = 
?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__vets.vets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
"vets/vetList"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of vets.vets = 
$r0.vets
SavePostProcess.java: SavePostProcess(): repo varnode: vets.vets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r0.vets
value: ?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

key: $r2
value: this.vets

key: $r3
value: Pi
| Sel
| | ClassRef(org.springframework.samples.petclinic.vet.VetRepository)
| | NullOp
| List

key: __modelattribute__vets.vets
value: ?
| Equals
| | $r0.vets
| | NullOp
| $r2
| $r0.vets

key: this
value: Self

key: return
value: "vets/vetList"

key: vets.vets
value: $r0.vets





























Tables and Fields :

Vet fields = 
{}

{}
{}
Time elapsed: 0.591 seconds
