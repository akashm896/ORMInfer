EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Project/current use/NRAandLoops
starttime, test: 1681452346312
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: java.util.Iterator is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.web.servlet.ModelAndView is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.util.List is a phantom class!
Warning: org.springframework.web.bind.WebDataBinder is a phantom class!
Warning: java.util.Map is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.InitBinder is a phantom class!
Warning: org.springframework.format.annotation.DateTimeFormat is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: org.springframework.beans.support.PropertyComparator is a phantom class!
Warning: java.util.LinkedHashSet is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: org.springframework.beans.support.MutableSortDefinition is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: org.springframework.beans.support.SortDefinition is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: java.time.LocalDate is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.data.repository.Repository is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
Warning: javax.validation.constraints.NotEmpty is a phantom class!
Warning: javax.validation.constraints.Digits is a phantom class!
Warning: org.springframework.core.style.ToStringCreator is a phantom class!
Warning: org.springframework.dao.DataAccessException is a phantom class!
Warning: javax.persistence.MappedSuperclass is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:25
| | Id:26
| Union
| | Project
| | | Select
| | | | Id:26
| | | | Id:18
| | | Id:21
| | Project
| | | Select
| | | | Id:26
| | | | Eq
| | | | | Id:18
| | | | | Zero
| | | Id:24

{<col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=18, <list1>=21, <init_val>=25, <itr>=27, <coll>=26}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:36
| | | Id:31
| | Id:33
| Id:35

{<list>=33, <elseval>=34, <col1>=5, <repo>=23, <list2>=24, <col2>=6, <cond>=31, <list1>=21, <init_val>=35, <itr>=37, <coll>=36}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right> <nop>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:41
| | Select
| | | Id:41
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:49
| | | | | | Id:45
| | | | | Id
| Project
| | Id:47
| | Join
| | | Id:49
| | | Id:45

{<list>=47, <repo>=41, <cond>=31, <nop>=46, <init_val>=48, <join_right>=45, <itr>=50, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=49}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:61
| | Select
| | | Id:57
| | | In
| | | | Id:59
| | | | Id:63
| Id:62

{<list>=61, <rel>=57, <repo>=41, <cond>=31, <nop>=46, <clm>=59, <init_val>=62, <join_right>=45, <itr>=64, <receiver>=54, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=63}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:71
| | | In
| | | | Id:73
| | | | Id:77
| | Id:75
| Id:76

{<list>=61, <rel>=71, <repo>=41, <cond>=31, <nop>=46, <clm>=73, <init_val>=76, <join_right>=45, <itr>=78, <clmagg>=75, <receiver>=54, <aggvar>=68, <elseval>=34, <col1>=5, <list2>=24, <col2>=6, <list1>=21, <coll>=77}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Project/current%20use/NRAandLoops/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateAndFindOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        org.springframework.samples.petclinic.owner.Owner owner;
        java.util.Collection o1;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1, $r3, $r4;
        java.lang.Integer $r2;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);

        owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";

        $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");

        virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);

        return mav;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        org.springframework.samples.petclinic.owner.Owner owner;
        java.util.Collection o1;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1, $r3, $r4;
        java.lang.Integer $r2;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);

        owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";

        $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");

        virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);

        return mav;
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: ownerId
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: ownerId
FuncStackInfoBuilder.java: regionTreeForBody(): local: mav
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: mav
FuncStackInfoBuilder.java: regionTreeForBody(): local: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: owner
FuncStackInfoBuilder.java: regionTreeForBody(): local: o1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: o1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: updateAndFindOwner is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.OwnerController;
ownerId := @parameter0: int;
$r0 = new org.springframework.web.servlet.ModelAndView;
specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");
mav = $r0;
$r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);
owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);
owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";
$r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);
$r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");
virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);
return mav;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.owner.OwnerController;
ownerId := @parameter0: int;
$r0 = new org.springframework.web.servlet.ModelAndView;
specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");
mav = $r0;
$r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);
owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);
owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";
$r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);
$r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;
o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");
virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);
return mav;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.OwnerController, ownerId := @parameter0: int, $r0 = new org.springframework.web.servlet.ModelAndView, specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/"), mav = $r0, $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId), owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2), owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy", $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner), $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy"), virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1), return mav]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId) in <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/") in <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)> ==> <org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.lang.Integer: java.lang.Integer valueOf(int)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
FuncStackInfoBuilder.java: internalTransformHelper(): {org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)=    public org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        org.springframework.samples.petclinic.owner.Owner owner;
        java.util.Collection o1;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1, $r3, $r4;
        java.lang.Integer $r2;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);

        owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";

        $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");

        virtualinvoke mav.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);

        return mav;
    }
}

Decompiling org.springframework.samples.petclinic.owner.OwnerController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: void <init>(org.springframework.samples.petclinic.owner.OwnerRepository,org.springframework.samples.petclinic.visit.VisitRepository)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.samples.petclinic.owner.OwnerRepository, org.springframework.samples.petclinic.visit.VisitRepository)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        org.springframework.samples.petclinic.owner.OwnerRepository clinicService;
        org.springframework.samples.petclinic.visit.VisitRepository visits;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        clinicService := @parameter0: org.springframework.samples.petclinic.owner.OwnerRepository;

        visits := @parameter1: org.springframework.samples.petclinic.visit.VisitRepository;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners> = clinicService;

        this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.visit.VisitRepository visits> = visits;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: void setAllowedFields(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setAllowedFields
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setAllowedFields(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        java.lang.String[] $r0;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "id";

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setDisallowedFields(java.lang.String[])>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String initCreationForm(java.util.Map)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initCreationForm(java.util.Map)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        java.util.Map model;
        org.springframework.samples.petclinic.owner.Owner owner, $r0;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.owner.Owner;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.Owner: void <init>()>();

        owner = $r0;

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owner", $r0);

        return "owners/createOrUpdateOwnerForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.validation.BindingResult)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.validation.BindingResult)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.validation.BindingResult result;
        boolean $z0;
        org.springframework.samples.petclinic.owner.OwnerRepository $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.Integer $r3;
        java.lang.String $r5;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        result := @parameter1: org.springframework.validation.BindingResult;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        return "owners/createOrUpdateOwnerForm";

     label1:
        $r0 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redirect:/owners/");

        $r3 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.Integer getId()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String initFindForm(java.util.Map)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initFindForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initFindForm(java.util.Map)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        java.util.Map model;
        org.springframework.samples.petclinic.owner.Owner $r0;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        model := @parameter0: java.util.Map;

        $r0 = new org.springframework.samples.petclinic.owner.Owner;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.Owner: void <init>()>();

        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("owner", $r0);

        return "owners/findOwners";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String processFindForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.validation.BindingResult,java.util.Map)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processFindForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processFindForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.validation.BindingResult, java.util.Map)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        org.springframework.validation.BindingResult result;
        java.util.Map model;
        java.util.Collection results;
        java.lang.String $r0, $r2, $r10;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1;
        boolean $z0;
        int $i0;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Integer $r8;
        org.springframework.samples.petclinic.owner.Owner owner, owner;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        result := @parameter1: org.springframework.validation.BindingResult;

        model := @parameter2: java.util.Map;

        $r0 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String getLastName()>();

        if $r0 != null goto label1;

        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void setLastName(java.lang.String)>("");

     label1:
        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String getLastName()>();

        results = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>($r2);

        $z0 = interfaceinvoke results.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("lastName", "notFound", "not found");

        return "owners/findOwners";

     label2:
        $i0 = interfaceinvoke results.<java.util.Collection: int size()>();

        if $i0 != 1 goto label3;

        $r4 = interfaceinvoke results.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        owner = (org.springframework.samples.petclinic.owner.Owner) $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redirect:/owners/");

        $r8 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.Integer getId()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label3:
        interfaceinvoke model.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("selections", results);

        return "owners/ownersList";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String initUpdateOwnerForm(int,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initUpdateOwnerForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initUpdateOwnerForm(int, org.springframework.ui.Model)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.ui.Model model;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.OwnerRepository $r0;
        java.lang.Integer $r1;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        model := @parameter1: org.springframework.ui.Model;

        $r0 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.Object)>(owner);

        return "owners/createOrUpdateOwnerForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: java.lang.String processUpdateOwnerForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.validation.BindingResult,int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processUpdateOwnerForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processUpdateOwnerForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.validation.BindingResult, int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.validation.BindingResult result;
        int ownerId;
        boolean $z0;
        java.lang.Integer $r0;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        result := @parameter1: org.springframework.validation.BindingResult;

        ownerId := @parameter2: int;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        return "owners/createOrUpdateOwnerForm";

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void setId(java.lang.Integer)>($r0);

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView showOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: showOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.web.servlet.ModelAndView showOwner(int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        org.springframework.samples.petclinic.owner.Owner owner;
        java.util.Iterator l4;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1;
        java.lang.Integer $r2, $r7;
        java.util.List $r3, $r8;
        boolean $z0;
        java.lang.Object $r5;
        org.springframework.samples.petclinic.visit.VisitRepository $r6;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/ownerDetails");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);

        $r3 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: java.util.List getPets()>();

        l4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        pet = (org.springframework.samples.petclinic.owner.Pet) $r5;

        $r6 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.visit.VisitRepository visits>;

        $r7 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.Integer getId()>();

        $r8 = interfaceinvoke $r6.<org.springframework.samples.petclinic.visit.VisitRepository: java.util.List findByPetId(java.lang.Integer)>($r7);

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setVisitsInternal(java.util.Collection)>($r8);

        goto label1;

     label2:
        virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(owner);

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView showOwners(java.lang.String)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: showOwners
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.web.servlet.ModelAndView showOwners(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        java.lang.String lastName;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        java.util.Collection o;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        lastName := @parameter0: java.lang.String;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/ownerDetails");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        o = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>(lastName);

        virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o);

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateAndFindOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.OwnerController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
    {
        org.springframework.samples.petclinic.owner.OwnerController this;
        int ownerId;
        org.springframework.web.servlet.ModelAndView mav, $r0;
        org.springframework.samples.petclinic.owner.Owner owner;
        java.util.Collection o1;
        org.springframework.samples.petclinic.owner.OwnerRepository $r1, $r3, $r4;
        java.lang.Integer $r2;

        this := @this: org.springframework.samples.petclinic.owner.OwnerController;

        ownerId := @parameter0: int;

        $r0 = new org.springframework.web.servlet.ModelAndView;

        specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/");

        mav = $r0;

        $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2);

        owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy";

        $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner);

        $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy");

        virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1);

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: org.springframework.samples.petclinic.owner.OwnerController, ownerId := @parameter0: int, $r0 = new org.springframework.web.servlet.ModelAndView, specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/"), mav = $r0, $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId), owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2), owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy", $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner), $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy"), virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1), return $r0]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)has typemap: {}
ARegion.java: analyze(): set cur method of analyzer to: updateAndFindOwner
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.OwnerController, ownerId := @parameter0: int, $r0 = new org.springframework.web.servlet.ModelAndView, specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/"), mav = $r0, $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId), owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2), owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy", $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner), $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>, o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy"), virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1), return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.OwnerController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = ownerId := @parameter0: int
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new org.springframework.web.servlet.ModelAndView
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<org.springframework.web.servlet.ModelAndView: void <init>(java.lang.String)>("owners/")
DIRRegionAnalyzer.java: constructDIR(): curUnit = mav = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: mav
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.owners
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JStaticInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = valueOf
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Integer: java.lang.Integer valueOf(int)
construct/Utils.java: parseInvokeExpr(): JstaticInvokeExpr
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Integer: java.lang.Integer valueOf(int)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.Integer: java.lang.Integer valueOf(int)>
Utils.java: parseStaticInvoke(): parseStaticInvoke: name: valueOf
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $r2
Utils.java: getVarNode(): LinkedVariableBox($r2)
JAssignStmtCons.java: construct(): staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId)
construct/Utils.java: parseInvokeExpr(): methodName = valueOf
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Integer: java.lang.Integer valueOf(int)
construct/Utils.java: parseInvokeExpr(): JstaticInvokeExpr
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Integer: java.lang.Integer valueOf(int)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.Integer: java.lang.Integer valueOf(int)>
Utils.java: parseStaticInvoke(): parseStaticInvoke: name: valueOf
DIRRegionAnalyzer.java: constructDIR(): curUnit = owner = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findById
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>
construct/Utils.java: parseObjectInvoke(): methodName = findById
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
Utils.java: getRelExpForMethod(): actualargs = [$r2]
Utils.java: getRelExpForMethod(): methodInvoked = <org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>
Utils.java: getRelExpForMethod(): taglist: 
[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT owner FROM Owner owner left join fetch owner.pets WHERE owner.id =:id

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: id


]
164
165
175
70
154
55
54
|  |  |  |  |  |  |Owner
6
|  |  |  |  |  |  |owner
|  |  |  |  |  |ENTITY_PERSISTER_REF
159
108
|  |  |  |  |  |  |left
66
|  |  |  |  |  |  |fetch
6
|  |  |  |  |  |  |<gen:0>
151
45
84
|  |  |  |  |  |  |  |  |owner
84
|  |  |  |  |  |  |  |  |pets
|  |  |  |  |  |  |  |.
|  |  |  |  |  |  |PATH
|  |  |  |  |  |CommonTreeWalk.java: postOrder(): left
CommonTreeWalk.java: postOrder(): fetch
CommonTreeWalk.java: postOrder(): owner.pets
property-join
|  |  |  |  |PERSISTER_SPACE
|  |  |  |FROM
174
177
176
151
84
|  |  |  |  |  |  |  |owner
|  |  |  |  |  |  |PATH
|  |  |  |  |  |SELECT_ITEM
|  |  |  |  |SELECT_LIST
|  |  |  |SELECT
|  |  |SELECT_FROM
211
57
151
45
84
|  |  |  |  |  |  |owner
84
|  |  |  |  |  |  |id
|  |  |  |  |  |.
|  |  |  |  |PATH
130
|  |  |  |  |id
|  |  |  |=
|  |  |WHERE
|  |QUERY_SPEC
|QUERY
Utils.java: getRelExpForMethod(): Info collected by walk: 
CommonTreeWalk.java: printInfo: tableName = Owner
CommonTreeWalk.java: printInfo: tableAlias = owner
CommonTreeWalk.java: printInfo: conditionOp = =
CommonTreeWalk.java: printInfo: conditionLeftOperand = (PATH (. owner id))
CommonTreeWalk.java: printInfo: conditionRightOperand = id
CommonTreeWalk.java: printInfo: selectedExpr = owner
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
construct/Utils.java: parseObjectInvoke(): expr : Sel
| Cartesian
| | ClassRef(Owner)
| Equals
| | FieldRef(owner.id)
| | $r2=pets
construct/Utils.java: parseObjectInvoke(): relExp = Sel
| Cartesian
| | ClassRef(Owner)
| Equals
| | FieldRef(owner.id)
| | $r2
construct/Utils.java: parseObjectInvoke(): entityClass = org.springframework.samples.petclinic.owner.Owner
construct/Utils.java: parseObjectInvoke(): retType = org.springframework.samples.petclinic.owner.Owner
construct/Utils.java: parseObjectInvoke(): attributes = [address, city, telephone, firstName, lastName, id]
construct/Utils.java: parseObjectInvoke(): Mapped return.address to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address
construct/Utils.java: parseObjectInvoke(): Mapped return.city to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city
construct/Utils.java: parseObjectInvoke(): Mapped return.telephone to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone
construct/Utils.java: parseObjectInvoke(): Mapped return.firstName to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName
construct/Utils.java: parseObjectInvoke(): Mapped return.lastName to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName
construct/Utils.java: parseObjectInvoke(): Mapped return.id to Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
construct/Utils.java: parseObjectInvoke(): nested field type = org.springframework.samples.petclinic.owner.Pet
construct/Utils.java: parseObjectInvoke(): check = Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: owner
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)=~~~ return ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2

~~~ return.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address

~~~ return.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city

~~~ return.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName

~~~ return.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id

~~~ return.lastName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName

~~~ return.pets ~~~
Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp

~~~ return.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2

~~~ return.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address

~~~ return.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city

~~~ return.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName

~~~ return.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id

~~~ return.lastName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName

~~~ return.pets ~~~
Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp

~~~ return.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Owner.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owners

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findById
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Owner fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>  type=Pet
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = owner, org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: org.springframework.samples.petclinic.owner.Owner
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.owner.Owner: java.lang.String address> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.owner.Owner: java.lang.String city> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

]
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets> = java.util.Set
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
Flatten.java: getNestedFields(): check *ToMany sf: pets , type = java.util.Set
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.model.Person: java.lang.String firstName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: first_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.model.Person: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
Flatten.java: getNestedFields(): Type of sf: <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id> = java.lang.Integer
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): returning: [<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.pets
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=org.springframework.samples.petclinic.owner.Owner
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= org.springframework.samples.petclinic.owner.Pet
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): key= return.pets
 value= Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Pet.owner_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| ClassRef(org.springframework.samples.petclinic.owner.Pet)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nested field name= pets
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Pet fields= [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: type_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=type
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= type
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.PetType
NRA.java: getJoinedColumn(): joined Column value=  type_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.type_id
| PetType.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): nested field name= type
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.PetType
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.PetType fields = [<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.PetType fields= [<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 2
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.PetType.name), FieldRef(org.springframework.samples.petclinic.owner.PetType.id)]
NRA.java: genExprNra(): projectNode name: Pet.type=Pi
NRA.java: genExprNra(): nestexpr= Pet.type=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | Equals
| | | Alpha.type_id
| | | PetType.id
| List
| | name
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owner_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=owner
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= owner
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= owner
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.owner_id
| Owner.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): nested field name= owner
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Owner
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Owner fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>  type=Pet
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Owner fields= [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String city>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=pets
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Pet.owner_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nested field name= pets
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Pet fields= [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: type_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=type
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= type
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.PetType
NRA.java: getJoinedColumn(): joined Column value=  type_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.type_id
| PetType.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owner_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=owner
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= owner
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= owner
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.owner_id
| Owner.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=visits
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= visits
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set visits [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Visit.petId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.type), FieldRef(org.springframework.samples.petclinic.owner.Pet.owner), FieldRef(org.springframework.samples.petclinic.owner.Pet.visits), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
NRA.java: genExprNra(): projectNode name: Owner.pets=Pi
NRA.java: genExprNra(): nestexpr= Owner.pets=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | NullOp
| | NullOp
| | NullOp
| | name
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String firstName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: first_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.pets), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
NRA.java: genExprNra(): projectNode name: Pet.owner=Pi
NRA.java: genExprNra(): nestexpr= Pet.owner=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | Alpha.owner_id
| | | Owner.id
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | name
| | | | id
| | firstName
| | lastName
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=visits
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= visits
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set visits [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Visit.petId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): nested field name= visits
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: org.springframework.samples.petclinic.visit.Visit fields = [<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>, <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>, <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>, <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>  type=Pet
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: petId]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): org.springframework.samples.petclinic.visit.Visit fields= [<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>, <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>, <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>, <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: visit_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: description

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: pet_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: petId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=pet
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.visit.Visit
 fieldName= pet
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate date [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 13 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Integer petId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Pet pet [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= pet
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: petId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.petId
| Pet.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nested field name= pet
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Pet fields= [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: type_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=type
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= type
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.PetType
NRA.java: getJoinedColumn(): joined Column value=  type_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.type_id
| PetType.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owner_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=owner
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= owner
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= owner
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.owner_id
| Owner.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=visits
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= visits
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set visits [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Visit.petId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.type), FieldRef(org.springframework.samples.petclinic.owner.Pet.owner), FieldRef(org.springframework.samples.petclinic.owner.Pet.visits), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
NRA.java: genExprNra(): projectNode name: Visit.pet=Pi
NRA.java: genExprNra(): nestexpr= Visit.pet=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.petId
| | | Pet.id
| List
| | birthDate
| | NullOp
| | NullOp
| | NullOp
| | name
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.visit.Visit.date), FieldRef(org.springframework.samples.petclinic.visit.Visit.description), FieldRef(org.springframework.samples.petclinic.visit.Visit.petId), FieldRef(org.springframework.samples.petclinic.visit.Visit.pet), FieldRef(org.springframework.samples.petclinic.visit.Visit.id)]
NRA.java: genExprNra(): projectNode name: Pet.visits=Pi
NRA.java: genExprNra(): nestexpr= Pet.visits=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | Equals
| | | Alpha.id
| | | Visit.petId
| List
| | date
| | description
| | petId
| | Visit.pet=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.petId
| | | | | Pet.id
| | | List
| | | | birthDate
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | name
| | | | id
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.type), FieldRef(org.springframework.samples.petclinic.owner.Pet.owner), FieldRef(org.springframework.samples.petclinic.owner.Pet.visits), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
NRA.java: genExprNra(): projectNode name: Owner.pets=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.pets
 value : 
 Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: constructDIR(): key = return.address
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address
DIRRegionAnalyzer.java: constructDIR(): key = return.city
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city
DIRRegionAnalyzer.java: constructDIR(): key = return.pets
DIRRegionAnalyzer.java: constructDIR(): val = Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2
DIRRegionAnalyzer.java: constructDIR(): key = return.telephone
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [owner.address, owner.city, owner.telephone, owner.pets, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: constructDIR(): key = owner.address
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.address
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address
DIRRegionAnalyzer.java: constructDIR(): key = owner.city
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.city
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city
DIRRegionAnalyzer.java: constructDIR(): key = owner.telephone
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.telephone
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone
DIRRegionAnalyzer.java: constructDIR(): key = owner.pets
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.pets
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIRRegionAnalyzer.java: constructDIR(): key = owner.firstName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = owner.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = owner.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
DIRRegionAnalyzer.java: constructDIR(): curUnit = owner.<org.springframework.samples.petclinic.owner.Owner: java.lang.String lastName> = "Jimmy"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.StringConstant
DIRRegionAnalyzer.java: constructDIR(): Mapping: owner.lastName -> "Jimmy"
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r3 -> this.owners
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: constructDIR(): savestmt invoke expr: interfaceinvoke $r3.<org.springframework.samples.petclinic.owner.OwnerRepository: void save(org.springframework.samples.petclinic.owner.Owner)>(owner)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r3
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $r1 ~~~
this.owners

~~~ $r2 ~~~
ownerId

~~~ $r3 ~~~
this.owners

~~~ mav_view ~~~
"owners/"

~~~ owner ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

~~~ owner.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

~~~ owner.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

~~~ owner.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

~~~ owner.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

~~~ owner.lastName ~~~
"Jimmy"

~~~ owner.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ owner.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): ve map:{owner=Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId, $r1=this.owners, $r2=ownerId, $r3=this.owners, this=Self, mav_view="owners/", owner.pets=Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id, owner.address=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address, owner.firstName=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName, owner.id=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id, owner.city=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city, owner.telephone=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone, owner.lastName="Jimmy"}
DIRRegionAnalyzer.java: constructDIR(): repo: this.owners
DIRRegionAnalyzer.java: constructDIR(): argType: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): table: org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): attributes: [address, city, telephone, firstName, lastName, id]
DIRRegionAnalyzer.java: constructDIR(): fieldVarNodes: [owner.address, owner.city, owner.telephone, owner.firstName, owner.lastName, owner.id]
DIRRegionAnalyzer.java: constructDIR(): listNode.columns: [FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
DIRRegionAnalyzer.java: constructDIR(): mapping: this.owners -> Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
DIRRegionAnalyzer.java: constructDIR(): savestmt args: [owner]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r4 = this.<org.springframework.samples.petclinic.owner.OwnerController: org.springframework.samples.petclinic.owner.OwnerRepository owners>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r4 -> Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
DIRRegionAnalyzer.java: constructDIR(): curUnit = o1 = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByLastName
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByLastName
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
Utils.java: getRelExpForMethod(): actualargs = ["Jimmy"]
Utils.java: getRelExpForMethod(): methodInvoked = <org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
164
165
175
70
154
55
54
|  |  |  |  |  |  |Owner
6
|  |  |  |  |  |  |owner
|  |  |  |  |  |ENTITY_PERSISTER_REF
159
108
|  |  |  |  |  |  |left
66
|  |  |  |  |  |  |fetch
6
|  |  |  |  |  |  |<gen:0>
151
45
84
|  |  |  |  |  |  |  |  |owner
84
|  |  |  |  |  |  |  |  |pets
|  |  |  |  |  |  |  |.
|  |  |  |  |  |  |PATH
|  |  |  |  |  |CommonTreeWalk.java: postOrder(): left
CommonTreeWalk.java: postOrder(): fetch
CommonTreeWalk.java: postOrder(): owner.pets
property-join
|  |  |  |  |PERSISTER_SPACE
|  |  |  |FROM
174
44
|  |  |  |  |DISTINCT
177
176
151
84
|  |  |  |  |  |  |  |owner
|  |  |  |  |  |  |PATH
|  |  |  |  |  |SELECT_ITEM
|  |  |  |  |SELECT_LIST
|  |  |  |SELECT
|  |  |SELECT_FROM
211
114
151
45
84
|  |  |  |  |  |  |owner
84
|  |  |  |  |  |  |lastName
|  |  |  |  |  |.
|  |  |  |  |PATH
130
|  |  |  |  |lastName
|  |  |  |LIKE
|  |  |WHERE
|  |QUERY_SPEC
|QUERY
Utils.java: getRelExpForMethod(): Info collected by walk: 
CommonTreeWalk.java: printInfo: tableName = Owner
CommonTreeWalk.java: printInfo: tableAlias = owner
CommonTreeWalk.java: printInfo: conditionOp = LIKE
CommonTreeWalk.java: printInfo: conditionLeftOperand = (PATH (. owner lastName))
CommonTreeWalk.java: printInfo: conditionRightOperand = lastName
CommonTreeWalk.java: printInfo: selectedExpr = owner
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
construct/Utils.java: parseObjectInvoke(): expr : Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"=pets
construct/Utils.java: parseObjectInvoke(): relExp = Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"
construct/Utils.java: parseObjectInvoke(): entityClass = java.util.Collection
construct/Utils.java: parseObjectInvoke(): retType = java.util.Collection
AccessPath.java: isReturnTypeEntity(): check :java.util.Collection
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.Collection
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Owner
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
AccessPath.java: getCollectionEntityType(): [Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Owner
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): leftType : org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: o1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
AccessPath.java: isReturnTypeEntity(): check :java.util.Collection
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
AccessPath.java: isReturnTypeEntity(): method retType = org.springframework.samples.petclinic.owner.Owner
AccessPath.java: getCollectionEntityType(): interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
AccessPath.java: getCollectionEntityType(): [Signature: (Ljava/lang/String;)Ljava/util/Collection<Lorg/springframework/samples/petclinic/owner/Owner;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/jpa/repository/Query; num elems: 1 elems: 
Annotation Element: kind: s name: value value: SELECT DISTINCT owner FROM Owner owner left join fetch owner.pets WHERE owner.lastName LIKE :lastName%

Annotation: type: Lorg/springframework/transaction/annotation/Transactional; num elems: 1 elems: 
Annotation Element: kind: Z name: readOnly value: 1

, Visibility Param Annotation: num params: 1 kind: 0
Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Lorg/springframework/data/repository/query/Param; num elems: 1 elems: 
Annotation Element: kind: s name: value value: lastName


]
AccessPath.java: getCollectionEntityType(): org/springframework/samples/petclinic/owner/Owner
AccessPath.java: getCollectionEntityType(): Collection Entity Type = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): left type = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): java.util.Collection
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Collection
DIRRegionAnalyzer.java: constructDIR(): method sig = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)=~~~ return ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2

~~~ return.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address

~~~ return.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city

~~~ return.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName

~~~ return.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id

~~~ return.lastName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName

~~~ return.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ return.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone

, org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)=~~~ return ~~~
Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Owner.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owners

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): leftType = org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByLastName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Owner fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>  type=Pet
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = o1, org.springframework.samples.petclinic.owner.Owner
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [o1.address, o1.city, o1.telephone, o1.pets, o1.firstName, o1.lastName, o1.id]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer), org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)>("Jimmy")
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)]
DIRRegionAnalyzer.java: constructDIR(): key= return
 value= Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Owner
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Owner fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>  type=Pet
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Owner fields= [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String city>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=pets
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Pet.owner_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nested field name= pets
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Pet fields = [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>  type=PetType
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>  type=Owner
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>  type=Visit
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.visit.Visit
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Pet fields= [<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>, <org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>, <org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>, <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.time.LocalDate birthDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: birth_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.PetType type>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: type_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=type
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= type
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.PetType
NRA.java: getJoinedColumn(): joined Column value=  type_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: type_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.type_id
| PetType.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): nested field name= type
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.PetType
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.PetType fields = [<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.PetType
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.PetType fields= [<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 2
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.PetType.name), FieldRef(org.springframework.samples.petclinic.owner.PetType.id)]
NRA.java: genExprNra(): projectNode name: Pet.type=Pi
NRA.java: genExprNra(): nestexpr= Pet.type=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | Equals
| | | Alpha.type_id
| | | PetType.id
| List
| | name
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: org.springframework.samples.petclinic.owner.Owner owner>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: owner_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=owner
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= owner
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= owner
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: owner_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.owner_id
| Owner.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): nested field name= owner
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.owner.Owner
NRA.java: processTableandFields: org.springframework.samples.petclinic.owner.Owner fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>  type=Pet
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
AccessPath.java: getCollectionType: Collection field Type = org.springframework.samples.petclinic.owner.Pet
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): org.springframework.samples.petclinic.owner.Owner fields= [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String city>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=pets
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Owner
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= owner
NRA.java: getJoinedColumn(): joined Column value=  owner_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Pet.owner_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String firstName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: first_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.pets), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
NRA.java: genExprNra(): projectNode name: Pet.owner=Pi
NRA.java: genExprNra(): nestexpr= Pet.owner=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | Alpha.owner_id
| | | Owner.id
| List
| | address
| | city
| | telephone
| | NullOp
| | firstName
| | lastName
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.owner.Pet: java.util.Set visits>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: pet

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=visits
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Pet
 fieldName= visits
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate birthDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.PetType type [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Owner owner [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set visits [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/visit/Visit;>;
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Visit.petId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): nested field name= visits
NRA.java: genExprNra(): nested Entity = org.springframework.samples.petclinic.visit.Visit
NRA.java: processTableandFields: org.springframework.samples.petclinic.visit.Visit fields = [<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>, <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>, <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>, <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>  type=FieldData
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>  type=Pet
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: petId]
NRA.java: processTableandFields: sf <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>  type=FieldData
NRA.java: genExprNra(): From soot typeclass= org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): org.springframework.samples.petclinic.visit.Visit fields= [<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>, <org.springframework.samples.petclinic.visit.Visit: java.lang.String description>, <org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>, <org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.time.LocalDate date>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: visit_date

Annotation: type: Lorg/springframework/format/annotation/DateTimeFormat; num elems: 1 elems: 
Annotation Element: kind: s name: pattern value: yyyy-MM-dd

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: description

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: java.lang.Integer petId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: pet_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.visit.Visit: org.springframework.samples.petclinic.owner.Pet pet>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: petId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=pet
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.visit.Visit
 fieldName= pet
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.time.LocalDate date [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 13 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Integer petId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.samples.petclinic.owner.Pet pet [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= pet
NRA.java: genExprNra(): sfEntity=org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): baseclass = org.springframework.samples.petclinic.visit.Visit
NRA.java: genExprNra(): fieldclass = org.springframework.samples.petclinic.owner.Pet
NRA.java: getJoinedColumn(): joined Column value=  petId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: petId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.petId
| Pet.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : org.springframework.samples.petclinic.owner.Pet
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.visit.Visit.date), FieldRef(org.springframework.samples.petclinic.visit.Visit.description), FieldRef(org.springframework.samples.petclinic.visit.Visit.petId), FieldRef(org.springframework.samples.petclinic.visit.Visit.pet), FieldRef(org.springframework.samples.petclinic.visit.Visit.id)]
NRA.java: genExprNra(): projectNode name: Pet.visits=Pi
NRA.java: genExprNra(): nestexpr= Pet.visits=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | Equals
| | | Alpha.id
| | | Visit.petId
| List
| | date
| | description
| | petId
| | NullOp
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Pet.birthDate), FieldRef(org.springframework.samples.petclinic.owner.Pet.type), FieldRef(org.springframework.samples.petclinic.owner.Pet.owner), FieldRef(org.springframework.samples.petclinic.owner.Pet.visits), FieldRef(org.springframework.samples.petclinic.owner.Pet.name), FieldRef(org.springframework.samples.petclinic.owner.Pet.id)]
NRA.java: genExprNra(): projectNode name: Owner.pets=Pi
NRA.java: genExprNra(): nestexpr= Owner.pets=Pi
| Join
| | Alpha
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | NullOp
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | NullOp
| | | | id
| | name
| | id
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String firstName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: first_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.Person: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [org.springframework.samples.petclinic.owner.Owner~pets]
NRA.java: genExprNra(): field =<org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): ListNode columns=[FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.pets), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
NRA.java: genExprNra(): projectNode name: Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return
 value : 
 Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id
DIRRegionAnalyzer.java: constructDIR(): leftval = o1
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r0.<org.springframework.web.servlet.ModelAndView: org.springframework.web.servlet.ModelAndView addObject(java.lang.Object)>(o1)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
Utils.java: getVarNode(): __modelattribute__collection
Utils.java: getVarNode(): LinkedVariableBox(__modelattribute__collection)
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
this.owners

~~~ $r2 ~~~
ownerId

~~~ $r3 ~~~
this.owners

~~~ $r4 ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

~~~ __modelattribute__collection ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ mav_view ~~~
"owners/"

~~~ o1 ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ owner ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

~~~ owner.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

~~~ owner.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

~~~ owner.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

~~~ owner.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

~~~ owner.lastName ~~~
"Jimmy"

~~~ owner.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ owner.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

~~~ return ~~~
$r0

~~~ this ~~~
Self

~~~ this.owners ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
this.owners

~~~ $r2 ~~~
ownerId

~~~ $r3 ~~~
this.owners

~~~ $r4 ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

~~~ __modelattribute__collection ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ mav_view ~~~
"owners/"

~~~ o1 ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ owner ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

~~~ owner.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

~~~ owner.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

~~~ owner.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

~~~ owner.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

~~~ owner.lastName ~~~
"Jimmy"

~~~ owner.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ owner.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

~~~ return ~~~
$r0

~~~ this ~~~
Self

~~~ this.owners ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id


DIR.java: updateRegion(): update region entry: owner=Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId
DIR.java: updateRegion(): update region entry: o1=Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id
DIR.java: updateRegion(): update region entry: $r1=this.owners
DIR.java: updateRegion(): update region entry: $r2=ownerId
DIR.java: updateRegion(): update region entry: $r3=this.owners
DIR.java: updateRegion(): update region entry: $r4=Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: mav_view="owners/"
DIR.java: updateRegion(): update region entry: this.owners=Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
DIR.java: updateRegion(): update region entry: owner.pets=Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
DIR.java: updateRegion(): update region entry: owner.address=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address
DIR.java: updateRegion(): update region entry: owner.firstName=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName
DIR.java: updateRegion(): update region entry: owner.id=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
DIR.java: updateRegion(): update region entry: __modelattribute__collection=Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id
DIR.java: updateRegion(): update region entry: owner.city=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city
DIR.java: updateRegion(): update region entry: owner.telephone=Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone
DIR.java: updateRegion(): update region entry: owner.lastName="Jimmy"
DIR.java: updateRegion(): update region entry: return=$r0
~~~ $r1 ~~~
this.owners

~~~ $r2 ~~~
ownerId

~~~ $r3 ~~~
this.owners

~~~ $r4 ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

~~~ __modelattribute__collection ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ mav_view ~~~
"owners/"

~~~ o1 ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ owner ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

~~~ owner.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

~~~ owner.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

~~~ owner.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

~~~ owner.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

~~~ owner.lastName ~~~
"Jimmy"

~~~ owner.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ owner.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

~~~ return ~~~
$r0

~~~ this ~~~
Self

~~~ this.owners ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id


Resultant dag : ~~~ $r1 ~~~
this.owners

~~~ $r2 ~~~
ownerId

~~~ $r3 ~~~
this.owners

~~~ $r4 ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

~~~ __modelattribute__collection ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ mav_view ~~~
"owners/"

~~~ o1 ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

~~~ owner ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

~~~ owner.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

~~~ owner.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

~~~ owner.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

~~~ owner.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

~~~ owner.lastName ~~~
"Jimmy"

~~~ owner.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ owner.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

~~~ return ~~~
$r0

~~~ this ~~~
Self

~~~ this.owners ~~~
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id


final FuncStackAnalyzer3 = 
{org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)=~~~ return ~~~
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | $r2

~~~ return.address ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| address

~~~ return.city ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| city

~~~ return.firstName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| firstName

~~~ return.id ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| id

~~~ return.lastName ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| lastName

~~~ return.pets ~~~
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

~~~ return.telephone ~~~
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | $r2
| telephone

, org.springframework.samples.petclinic.owner.OwnerRepository: java.util.Collection findByLastName(java.lang.String)=~~~ return ~~~
Sel
| Cartesian
| | ClassRef(Owner)
| Like
| | FieldRef(owner.lastName)
| | "Jimmy"

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: org.springframework.samples.petclinic.owner.OwnerController: org.springframework.web.servlet.ModelAndView updateAndFindOwner(int)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 18
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [owner, o1, $r1, $r2, $r3, $r4, this, mav_view, this.owners, owner.pets, owner.address, owner.firstName, owner.id, __modelattribute__collection, owner.city, owner.telephone, owner.lastName, return]
Final veMap of owner = 
Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId
SavePostProcess.java: SavePostProcess(): repo varnode: owner
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of o1 = 
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id
SavePostProcess.java: SavePostProcess(): repo varnode: o1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
this.owners
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2 = 
ownerId
SavePostProcess.java: SavePostProcess(): repo varnode: $r2
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3 = 
this.owners
SavePostProcess.java: SavePostProcess(): repo varnode: $r3
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r4 = 
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
SavePostProcess.java: SavePostProcess(): repo varnode: $r4
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: handleCascading(): accesspathsofarg: [owner.address, owner.firstName, owner.id, owner.city, owner.pets, owner.telephone, owner.lastName]
SavePostProcess.java: handleCascading(): check mapDBFetchAccessGraph in savepostProcess
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
SavePostProcess.java: handleCascading(): coll f: pets
SavePostProcess.java: transformSave(): saveNode = Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
SavePostProcess.java: transformSave(): columns: [FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): idInd = 5
SavePostProcess.java: transformSave(): idField: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | $r4
| | | Equals
| | | | FieldRef($r4.id)
| | | | Pi
| | | | | Sel
| | | | | | Cartesian
| | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | FieldRef(owner.id)
| | | | | | | ownerId
| | | | | id
| | EmptySet
| UnionOp
| | $r4
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | $r4
| | | Sel
| | | | Cartesian
| | | | | $r4
| | | | Equals
| | | | | FieldRef($r4.id)
| | | | | Pi
| | | | | | Sel
| | | | | | | Cartesian
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | | Equals
| | | | | | | | FieldRef(owner.id)
| | | | | | | | ownerId
| | | | | | id
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of mav_view = 
"owners/"
SavePostProcess.java: SavePostProcess(): repo varnode: mav_view
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this.owners = 
Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
SavePostProcess.java: SavePostProcess(): repo varnode: this.owners
SavePostProcess.java: SavePostProcess(): repo type = org.springframework.samples.petclinic.owner.OwnerRepository
entity = org.springframework.samples.petclinic.owner.Owner
entity soot cls: org.springframework.samples.petclinic.owner.Owner
field: <org.springframework.samples.petclinic.owner.Owner: java.lang.String address>
annotation tag: Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

annotation tag: Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: address

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
field: <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>
annotation tag: Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

annotation tag: Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: city

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
]
field: <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>
annotation tag: Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

annotation tag: Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
annotation tag: Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: telephone

Annotation type: Ljavax/validation/constraints/NotEmpty; without elements
Annotation: type: Ljavax/validation/constraints/Digits; num elems: 2 elems: 
Annotation Element: kind: I name: fraction value: 0
Annotation Element: kind: I name: integer value: 10

]
field: <org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>
annotation tag: Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

field tags: [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: owner

]
SavePostProcess.java: handleCascading(): accesspathsofarg: [owner.address, owner.firstName, owner.id, owner.city, owner.pets, owner.telephone, owner.lastName]
SavePostProcess.java: handleCascading(): check mapDBFetchAccessGraph in savepostProcess
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<org.springframework.samples.petclinic.owner.Owner: java.lang.String address>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String city>, <org.springframework.samples.petclinic.owner.Owner: java.lang.String telephone>, <org.springframework.samples.petclinic.model.Person: java.lang.String firstName>, <org.springframework.samples.petclinic.model.Person: java.lang.String lastName>, <org.springframework.samples.petclinic.model.BaseEntity: java.lang.Integer id>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<org.springframework.samples.petclinic.owner.Owner: java.util.Set pets>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= org.springframework.samples.petclinic.owner.Owner
 fieldName= pets
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String address [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String city [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 01 13 00 00 32 00 00)]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String telephone [RuntimeVisibleAnnotations] [(Unknown attribute RuntimeVisibleTypeAnnotations: 00 02 13 00 00 32 00 00 13 00... (truncated))]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set pets [Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lorg/springframework/samples/petclinic/owner/Pet;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
SavePostProcess.java: handleCascading(): coll f: pets
SavePostProcess.java: transformSave(): saveNode = Save
| $r3
| Tuple
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
SavePostProcess.java: transformSave(): columns: [FieldRef(org.springframework.samples.petclinic.owner.Owner.address), FieldRef(org.springframework.samples.petclinic.owner.Owner.city), FieldRef(org.springframework.samples.petclinic.owner.Owner.telephone), FieldRef(org.springframework.samples.petclinic.owner.Owner.firstName), FieldRef(org.springframework.samples.petclinic.owner.Owner.lastName), FieldRef(org.springframework.samples.petclinic.owner.Owner.id)]
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): idInd = 5
SavePostProcess.java: transformSave(): idField: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.owners
| | | Equals
| | | | FieldRef(this.owners.id)
| | | | Pi
| | | | | Sel
| | | | | | Cartesian
| | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | FieldRef(owner.id)
| | | | | | | ownerId
| | | | | id
| | EmptySet
| UnionOp
| | this.owners
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.owners
| | | Sel
| | | | Cartesian
| | | | | this.owners
| | | | Equals
| | | | | FieldRef(this.owners.id)
| | | | | Pi
| | | | | | Sel
| | | | | | | Cartesian
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | | Equals
| | | | | | | | FieldRef(owner.id)
| | | | | | | | ownerId
| | | | | | id
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
Final veMap of owner.pets = 
Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id
SavePostProcess.java: SavePostProcess(): repo varnode: owner.pets
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.address = 
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address
SavePostProcess.java: SavePostProcess(): repo varnode: owner.address
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.firstName = 
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName
SavePostProcess.java: SavePostProcess(): repo varnode: owner.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.id = 
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id
SavePostProcess.java: SavePostProcess(): repo varnode: owner.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__collection = 
Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__collection
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.city = 
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city
SavePostProcess.java: SavePostProcess(): repo varnode: owner.city
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.telephone = 
Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone
SavePostProcess.java: SavePostProcess(): repo varnode: owner.telephone
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of owner.lastName = 
"Jimmy"
SavePostProcess.java: SavePostProcess(): repo varnode: owner.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
$r0
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: owner
value: Sel
| Cartesian
| | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| Equals
| | FieldRef(owner.id)
| | ownerId

key: petsRepo
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | NullOp
| petsRepo
| UnionOp
| | RelationalMinus
| | | petsRepo
| | | Join
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | NullOp
| | Owner.pets=Pi
| | | Join
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | Owner.pets=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Pet.owner_id
| | | | | | | List
| | | | | | | | birthDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | | | name
| | | | | | | | id
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | Visit.pet=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | | | Equals
| | | | | | | | | Alpha.petId
| | | | | | | | | Pet.id
| | | | | | | List
| | | | | | | | birthDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | | | name
| | | | | | | | id
| | | | | | id
| | | | name
| | | | id

key: o1
value: Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

key: $r1
value: this.owners

key: $r2
value: ownerId

key: $r3
value: this.owners

key: $r4
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | $r4
| | | Equals
| | | | FieldRef($r4.id)
| | | | Pi
| | | | | Sel
| | | | | | Cartesian
| | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | FieldRef(owner.id)
| | | | | | | ownerId
| | | | | id
| | EmptySet
| UnionOp
| | $r4
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | $r4
| | | Sel
| | | | Cartesian
| | | | | $r4
| | | | Equals
| | | | | FieldRef($r4.id)
| | | | | Pi
| | | | | | Sel
| | | | | | | Cartesian
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | | Equals
| | | | | | | | FieldRef(owner.id)
| | | | | | | | ownerId
| | | | | | id
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

key: this
value: Self

key: mav_view
value: "owners/"

key: this.owners
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.owners
| | | Equals
| | | | FieldRef(this.owners.id)
| | | | Pi
| | | | | Sel
| | | | | | Cartesian
| | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | FieldRef(owner.id)
| | | | | | | ownerId
| | | | | id
| | EmptySet
| UnionOp
| | this.owners
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.owners
| | | Sel
| | | | Cartesian
| | | | | this.owners
| | | | Equals
| | | | | FieldRef(this.owners.id)
| | | | | Pi
| | | | | | Sel
| | | | | | | Cartesian
| | | | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | | Equals
| | | | | | | | FieldRef(owner.id)
| | | | | | | | ownerId
| | | | | | id
| | List
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | address
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | city
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | telephone
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | firstName
| | | "Jimmy"
| | | Pi
| | | | Sel
| | | | | Cartesian
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | Equals
| | | | | | FieldRef(owner.id)
| | | | | | ownerId
| | | | id

key: owner.pets
value: Owner.pets=Pi
| Join
| | Sel
| | | Cartesian
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | Equals
| | | | FieldRef(owner.id)
| | | | ownerId
| | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | Equals
| | | Alpha.id
| | | Pet.owner_id
| List
| | birthDate
| | Pet.type=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | Equals
| | | | | Alpha.type_id
| | | | | PetType.id
| | | List
| | | | name
| | | | id
| | Pet.owner=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | Equals
| | | | | Alpha.owner_id
| | | | | Owner.id
| | | List
| | | | address
| | | | city
| | | | telephone
| | | | Owner.pets=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Pet.owner_id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | firstName
| | | | lastName
| | | | id
| | Pet.visits=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | Equals
| | | | | Alpha.id
| | | | | Visit.petId
| | | List
| | | | date
| | | | description
| | | | petId
| | | | Visit.pet=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | | | Equals
| | | | | | | Alpha.petId
| | | | | | | Pet.id
| | | | | List
| | | | | | birthDate
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | name
| | | | | | id
| | | | id
| | name
| | id

key: owner.address
value: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| address

key: owner.firstName
value: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| firstName

key: owner.id
value: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| id

key: __modelattribute__collection
value: Pi
| Sel
| | Cartesian
| | | ClassRef(Owner)
| | Like
| | | FieldRef(owner.lastName)
| | | "Jimmy"
| List
| | address
| | city
| | telephone
| | Owner.pets=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(org.springframework.samples.petclinic.owner.Pet)
| | | | Equals
| | | | | Alpha.id
| | | | | Pet.owner_id
| | | List
| | | | birthDate
| | | | Pet.type=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.PetType)
| | | | | | Equals
| | | | | | | Alpha.type_id
| | | | | | | PetType.id
| | | | | List
| | | | | | name
| | | | | | id
| | | | Pet.owner=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | | | | | Equals
| | | | | | | Alpha.owner_id
| | | | | | | Owner.id
| | | | | List
| | | | | | address
| | | | | | city
| | | | | | telephone
| | | | | | NullOp
| | | | | | firstName
| | | | | | lastName
| | | | | | id
| | | | Pet.visits=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(org.springframework.samples.petclinic.visit.Visit)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Visit.petId
| | | | | List
| | | | | | date
| | | | | | description
| | | | | | petId
| | | | | | NullOp
| | | | | | id
| | | | name
| | | | id
| | firstName
| | lastName
| | id

key: owner.city
value: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| city

key: owner.telephone
value: Pi
| Sel
| | Cartesian
| | | ClassRef(org.springframework.samples.petclinic.owner.Owner)
| | Equals
| | | FieldRef(owner.id)
| | | ownerId
| telephone

key: owner.lastName
value: "Jimmy"

key: return
value: $r0





























Tables and Fields :

Owner fields = 
{pets=Pet, firstName=FieldData, lastName=FieldData, address=FieldData, city=FieldData, owner_id=FieldData, telephone=FieldData, id=FieldData}

Visit fields = 
{date=FieldData, petId=FieldData, description=FieldData, id=FieldData, pet=Pet}

Pet fields = 
{owner=Owner, visits=Visit, petId=FieldData, type_id=FieldData, owner_id=FieldData, name=FieldData, id=FieldData, type=PetType, birthDate=FieldData}

PetType fields = 
{name=FieldData, id=FieldData}

{}
{}
 Node contains nested fields
u_Sel___Cartesian_____1
u_Join___Alpha___Class4
u_Join___Alpha___Class6
u_Join___Alpha___Class8
u_Join___Alpha___Class10
Time elapsed: 0.947 seconds
